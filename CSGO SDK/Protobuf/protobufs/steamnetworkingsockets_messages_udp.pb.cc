// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_udp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steamnetworkingsockets_messages_udp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ChallengeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamSockets_UDP_ChallengeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ChallengeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamSockets_UDP_ChallengeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamSockets_UDP_ConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamSockets_UDP_ConnectOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectionClosed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamSockets_UDP_ConnectionClosed_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_NoConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamSockets_UDP_NoConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamSockets_UDP_Stats_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamSockets_UDP_Stats_Flags_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESteamNetworkingUDPMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steamnetworkingsockets_messages_udp.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSteamSockets_UDP_ChallengeRequest_descriptor_ = file->message_type(0);
  static const int CMsgSteamSockets_UDP_ChallengeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, my_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, protocol_version_),
  };
  CMsgSteamSockets_UDP_ChallengeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamSockets_UDP_ChallengeRequest_descriptor_,
      CMsgSteamSockets_UDP_ChallengeRequest::default_instance_,
      CMsgSteamSockets_UDP_ChallengeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamSockets_UDP_ChallengeRequest));
  CMsgSteamSockets_UDP_ChallengeReply_descriptor_ = file->message_type(1);
  static const int CMsgSteamSockets_UDP_ChallengeReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, your_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, protocol_version_),
  };
  CMsgSteamSockets_UDP_ChallengeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamSockets_UDP_ChallengeReply_descriptor_,
      CMsgSteamSockets_UDP_ChallengeReply::default_instance_,
      CMsgSteamSockets_UDP_ChallengeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamSockets_UDP_ChallengeReply));
  CMsgSteamSockets_UDP_ConnectRequest_descriptor_ = file->message_type(2);
  static const int CMsgSteamSockets_UDP_ConnectRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, my_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, ping_est_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, crypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, protocol_version_),
  };
  CMsgSteamSockets_UDP_ConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamSockets_UDP_ConnectRequest_descriptor_,
      CMsgSteamSockets_UDP_ConnectRequest::default_instance_,
      CMsgSteamSockets_UDP_ConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamSockets_UDP_ConnectRequest));
  CMsgSteamSockets_UDP_ConnectOK_descriptor_ = file->message_type(3);
  static const int CMsgSteamSockets_UDP_ConnectOK_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, server_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, server_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, your_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, delay_time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, crypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, protocol_version_),
  };
  CMsgSteamSockets_UDP_ConnectOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamSockets_UDP_ConnectOK_descriptor_,
      CMsgSteamSockets_UDP_ConnectOK::default_instance_,
      CMsgSteamSockets_UDP_ConnectOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamSockets_UDP_ConnectOK));
  CMsgSteamSockets_UDP_ConnectionClosed_descriptor_ = file->message_type(4);
  static const int CMsgSteamSockets_UDP_ConnectionClosed_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, to_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, from_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, reason_code_),
  };
  CMsgSteamSockets_UDP_ConnectionClosed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamSockets_UDP_ConnectionClosed_descriptor_,
      CMsgSteamSockets_UDP_ConnectionClosed::default_instance_,
      CMsgSteamSockets_UDP_ConnectionClosed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamSockets_UDP_ConnectionClosed));
  CMsgSteamSockets_UDP_NoConnection_descriptor_ = file->message_type(5);
  static const int CMsgSteamSockets_UDP_NoConnection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, from_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, to_connection_id_),
  };
  CMsgSteamSockets_UDP_NoConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamSockets_UDP_NoConnection_descriptor_,
      CMsgSteamSockets_UDP_NoConnection::default_instance_,
      CMsgSteamSockets_UDP_NoConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamSockets_UDP_NoConnection));
  CMsgSteamSockets_UDP_Stats_descriptor_ = file->message_type(6);
  static const int CMsgSteamSockets_UDP_Stats_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, to_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, from_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, seq_num_),
  };
  CMsgSteamSockets_UDP_Stats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamSockets_UDP_Stats_descriptor_,
      CMsgSteamSockets_UDP_Stats::default_instance_,
      CMsgSteamSockets_UDP_Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamSockets_UDP_Stats));
  CMsgSteamSockets_UDP_Stats_Flags_descriptor_ = CMsgSteamSockets_UDP_Stats_descriptor_->enum_type(0);
  ESteamNetworkingUDPMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamSockets_UDP_ChallengeRequest_descriptor_, &CMsgSteamSockets_UDP_ChallengeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamSockets_UDP_ChallengeReply_descriptor_, &CMsgSteamSockets_UDP_ChallengeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamSockets_UDP_ConnectRequest_descriptor_, &CMsgSteamSockets_UDP_ConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamSockets_UDP_ConnectOK_descriptor_, &CMsgSteamSockets_UDP_ConnectOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamSockets_UDP_ConnectionClosed_descriptor_, &CMsgSteamSockets_UDP_ConnectionClosed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamSockets_UDP_NoConnection_descriptor_, &CMsgSteamSockets_UDP_NoConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamSockets_UDP_Stats_descriptor_, &CMsgSteamSockets_UDP_Stats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  delete CMsgSteamSockets_UDP_ChallengeRequest::default_instance_;
  delete CMsgSteamSockets_UDP_ChallengeRequest_reflection_;
  delete CMsgSteamSockets_UDP_ChallengeReply::default_instance_;
  delete CMsgSteamSockets_UDP_ChallengeReply_reflection_;
  delete CMsgSteamSockets_UDP_ConnectRequest::default_instance_;
  delete CMsgSteamSockets_UDP_ConnectRequest_reflection_;
  delete CMsgSteamSockets_UDP_ConnectOK::default_instance_;
  delete CMsgSteamSockets_UDP_ConnectOK_reflection_;
  delete CMsgSteamSockets_UDP_ConnectionClosed::default_instance_;
  delete CMsgSteamSockets_UDP_ConnectionClosed_reflection_;
  delete CMsgSteamSockets_UDP_NoConnection::default_instance_;
  delete CMsgSteamSockets_UDP_NoConnection_reflection_;
  delete CMsgSteamSockets_UDP_Stats::default_instance_;
  delete CMsgSteamSockets_UDP_Stats_reflection_;
}

void protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  ::protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)steamnetworkingsockets_messages_udp.pr"
    "oto\032+steamnetworkingsockets_messages_cer"
    "ts.proto\032%steamnetworkingsockets_message"
    "s.proto\"n\n%CMsgSteamSockets_UDP_Challeng"
    "eRequest\022\025\n\rconnection_id\030\001 \001(\007\022\024\n\014my_ti"
    "mestamp\030\003 \001(\006\022\030\n\020protocol_version\030\004 \001(\r\""
    "\201\001\n#CMsgSteamSockets_UDP_ChallengeReply\022"
    "\025\n\rconnection_id\030\001 \001(\007\022\021\n\tchallenge\030\002 \001("
    "\006\022\026\n\016your_timestamp\030\003 \001(\006\022\030\n\020protocol_ve"
    "rsion\030\004 \001(\r\"\240\002\n#CMsgSteamSockets_UDP_Con"
    "nectRequest\022\034\n\024client_connection_id\030\001 \001("
    "\007\022\021\n\tchallenge\030\002 \001(\006\022\027\n\017client_steam_id\030"
    "\003 \001(\006\022\024\n\014my_timestamp\030\005 \001(\006\022\023\n\013ping_est_"
    "ms\030\006 \001(\r\0227\n\005crypt\030\007 \001(\0132(.CMsgSteamDatag"
    "ramSessionCryptInfoSigned\0221\n\004cert\030\004 \001(\0132"
    "#.CMsgSteamDatagramCertificateSigned\022\030\n\020"
    "protocol_version\030\010 \001(\r\"\254\002\n\036CMsgSteamSock"
    "ets_UDP_ConnectOK\022\034\n\024client_connection_i"
    "d\030\001 \001(\007\022\034\n\024server_connection_id\030\005 \001(\007\022\027\n"
    "\017server_steam_id\030\002 \001(\006\022\026\n\016your_timestamp"
    "\030\003 \001(\006\022\027\n\017delay_time_usec\030\004 \001(\r\0227\n\005crypt"
    "\030\007 \001(\0132(.CMsgSteamDatagramSessionCryptIn"
    "foSigned\0221\n\004cert\030\010 \001(\0132#.CMsgSteamDatagr"
    "amCertificateSigned\022\030\n\020protocol_version\030"
    "\t \001(\r\"\201\001\n%CMsgSteamSockets_UDP_Connectio"
    "nClosed\022\030\n\020to_connection_id\030\004 \001(\007\022\032\n\022fro"
    "m_connection_id\030\005 \001(\007\022\r\n\005debug\030\002 \001(\t\022\023\n\013"
    "reason_code\030\003 \001(\r\"Y\n!CMsgSteamSockets_UD"
    "P_NoConnection\022\032\n\022from_connection_id\030\002 \001"
    "(\007\022\030\n\020to_connection_id\030\003 \001(\007\"\337\001\n\032CMsgSte"
    "amSockets_UDP_Stats\0222\n\005stats\030\001 \001(\0132#.CMs"
    "gSteamDatagramConnectionQuality\022\r\n\005flags"
    "\030\003 \001(\r\022\030\n\020to_connection_id\030\t \001(\007\022\032\n\022from"
    "_connection_id\030\n \001(\007\022\017\n\007seq_num\030\004 \001(\r\"7\n"
    "\005Flags\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUE"
    "ST_IMMEDIATE\020\004*\245\002\n\030ESteamNetworkingUDPMs"
    "gID\022-\n)k_ESteamNetworkingUDPMsg_Challeng"
    "eRequest\020 \022+\n\'k_ESteamNetworkingUDPMsg_C"
    "hallengeReply\020!\022+\n\'k_ESteamNetworkingUDP"
    "Msg_ConnectRequest\020\"\022&\n\"k_ESteamNetworki"
    "ngUDPMsg_ConnectOK\020#\022-\n)k_ESteamNetworki"
    "ngUDPMsg_ConnectionClosed\020$\022)\n%k_ESteamN"
    "etworkingUDPMsg_NoConnection\020%B\003\200\001\000", 1715);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamnetworkingsockets_messages_udp.proto", &protobuf_RegisterTypes);
  CMsgSteamSockets_UDP_ChallengeRequest::default_instance_ = new CMsgSteamSockets_UDP_ChallengeRequest();
  CMsgSteamSockets_UDP_ChallengeReply::default_instance_ = new CMsgSteamSockets_UDP_ChallengeReply();
  CMsgSteamSockets_UDP_ConnectRequest::default_instance_ = new CMsgSteamSockets_UDP_ConnectRequest();
  CMsgSteamSockets_UDP_ConnectOK::default_instance_ = new CMsgSteamSockets_UDP_ConnectOK();
  CMsgSteamSockets_UDP_ConnectionClosed::default_instance_ = new CMsgSteamSockets_UDP_ConnectionClosed();
  CMsgSteamSockets_UDP_NoConnection::default_instance_ = new CMsgSteamSockets_UDP_NoConnection();
  CMsgSteamSockets_UDP_Stats::default_instance_ = new CMsgSteamSockets_UDP_Stats();
  CMsgSteamSockets_UDP_ChallengeRequest::default_instance_->InitAsDefaultInstance();
  CMsgSteamSockets_UDP_ChallengeReply::default_instance_->InitAsDefaultInstance();
  CMsgSteamSockets_UDP_ConnectRequest::default_instance_->InitAsDefaultInstance();
  CMsgSteamSockets_UDP_ConnectOK::default_instance_->InitAsDefaultInstance();
  CMsgSteamSockets_UDP_ConnectionClosed::default_instance_->InitAsDefaultInstance();
  CMsgSteamSockets_UDP_NoConnection::default_instance_->InitAsDefaultInstance();
  CMsgSteamSockets_UDP_Stats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steamnetworkingsockets_5fmessages_5fudp_2eproto {
  StaticDescriptorInitializer_steamnetworkingsockets_5fmessages_5fudp_2eproto() {
    protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  }
} static_descriptor_initializer_steamnetworkingsockets_5fmessages_5fudp_2eproto_;
const ::google::protobuf::EnumDescriptor* ESteamNetworkingUDPMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESteamNetworkingUDPMsgID_descriptor_;
}
bool ESteamNetworkingUDPMsgID_IsValid(int value) {
  switch(value) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamSockets_UDP_ChallengeRequest::kConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeRequest::kMyTimestampFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeRequest::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamSockets_UDP_ChallengeRequest::InitAsDefaultInstance() {
}

CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest(const CMsgSteamSockets_UDP_ChallengeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ChallengeRequest::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  my_timestamp_ = GOOGLE_ULONGLONG(0);
  protocol_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamSockets_UDP_ChallengeRequest::~CMsgSteamSockets_UDP_ChallengeRequest() {
  SharedDtor();
}

void CMsgSteamSockets_UDP_ChallengeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamSockets_UDP_ChallengeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ChallengeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamSockets_UDP_ChallengeRequest_descriptor_;
}

const CMsgSteamSockets_UDP_ChallengeRequest& CMsgSteamSockets_UDP_ChallengeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  return *default_instance_;
}

CMsgSteamSockets_UDP_ChallengeRequest* CMsgSteamSockets_UDP_ChallengeRequest::default_instance_ = NULL;

CMsgSteamSockets_UDP_ChallengeRequest* CMsgSteamSockets_UDP_ChallengeRequest::New() const {
  return new CMsgSteamSockets_UDP_ChallengeRequest;
}

void CMsgSteamSockets_UDP_ChallengeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
    my_timestamp_ = GOOGLE_ULONGLONG(0);
    protocol_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamSockets_UDP_ChallengeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_my_timestamp;
        break;
      }

      // optional fixed64 my_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_my_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &my_timestamp_)));
          set_has_my_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamSockets_UDP_ChallengeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional fixed64 my_timestamp = 3;
  if (has_my_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->my_timestamp(), output);
  }

  // optional uint32 protocol_version = 4;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ChallengeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional fixed64 my_timestamp = 3;
  if (has_my_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->my_timestamp(), target);
  }

  // optional uint32 protocol_version = 4;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamSockets_UDP_ChallengeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 my_timestamp = 3;
    if (has_my_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 protocol_version = 4;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamSockets_UDP_ChallengeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ChallengeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamSockets_UDP_ChallengeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ChallengeRequest::MergeFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_my_timestamp()) {
      set_my_timestamp(from.my_timestamp());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamSockets_UDP_ChallengeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ChallengeRequest::CopyFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ChallengeRequest::IsInitialized() const {

  return true;
}

void CMsgSteamSockets_UDP_ChallengeRequest::Swap(CMsgSteamSockets_UDP_ChallengeRequest* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(my_timestamp_, other->my_timestamp_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ChallengeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamSockets_UDP_ChallengeRequest_descriptor_;
  metadata.reflection = CMsgSteamSockets_UDP_ChallengeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamSockets_UDP_ChallengeReply::kConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeReply::kChallengeFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeReply::kYourTimestampFieldNumber;
const int CMsgSteamSockets_UDP_ChallengeReply::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamSockets_UDP_ChallengeReply::InitAsDefaultInstance() {
}

CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply(const CMsgSteamSockets_UDP_ChallengeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ChallengeReply::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  your_timestamp_ = GOOGLE_ULONGLONG(0);
  protocol_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamSockets_UDP_ChallengeReply::~CMsgSteamSockets_UDP_ChallengeReply() {
  SharedDtor();
}

void CMsgSteamSockets_UDP_ChallengeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamSockets_UDP_ChallengeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ChallengeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamSockets_UDP_ChallengeReply_descriptor_;
}

const CMsgSteamSockets_UDP_ChallengeReply& CMsgSteamSockets_UDP_ChallengeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  return *default_instance_;
}

CMsgSteamSockets_UDP_ChallengeReply* CMsgSteamSockets_UDP_ChallengeReply::default_instance_ = NULL;

CMsgSteamSockets_UDP_ChallengeReply* CMsgSteamSockets_UDP_ChallengeReply::New() const {
  return new CMsgSteamSockets_UDP_ChallengeReply;
}

void CMsgSteamSockets_UDP_ChallengeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    your_timestamp_ = GOOGLE_ULONGLONG(0);
    protocol_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamSockets_UDP_ChallengeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_your_timestamp;
        break;
      }

      // optional fixed64 your_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_your_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &your_timestamp_)));
          set_has_your_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamSockets_UDP_ChallengeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional fixed64 challenge = 2;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->challenge(), output);
  }

  // optional fixed64 your_timestamp = 3;
  if (has_your_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->your_timestamp(), output);
  }

  // optional uint32 protocol_version = 4;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ChallengeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional fixed64 challenge = 2;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->challenge(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (has_your_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->your_timestamp(), target);
  }

  // optional uint32 protocol_version = 4;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamSockets_UDP_ChallengeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 2;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed64 your_timestamp = 3;
    if (has_your_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 protocol_version = 4;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamSockets_UDP_ChallengeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ChallengeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamSockets_UDP_ChallengeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ChallengeReply::MergeFrom(const CMsgSteamSockets_UDP_ChallengeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_your_timestamp()) {
      set_your_timestamp(from.your_timestamp());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamSockets_UDP_ChallengeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ChallengeReply::CopyFrom(const CMsgSteamSockets_UDP_ChallengeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ChallengeReply::IsInitialized() const {

  return true;
}

void CMsgSteamSockets_UDP_ChallengeReply::Swap(CMsgSteamSockets_UDP_ChallengeReply* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(challenge_, other->challenge_);
    std::swap(your_timestamp_, other->your_timestamp_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ChallengeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamSockets_UDP_ChallengeReply_descriptor_;
  metadata.reflection = CMsgSteamSockets_UDP_ChallengeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamSockets_UDP_ConnectRequest::kClientConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kChallengeFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kClientSteamIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kMyTimestampFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kPingEstMsFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kCryptFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kCertFieldNumber;
const int CMsgSteamSockets_UDP_ConnectRequest::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamSockets_UDP_ConnectRequest::InitAsDefaultInstance() {
  crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(&::CMsgSteamDatagramSessionCryptInfoSigned::default_instance());
  cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(&::CMsgSteamDatagramCertificateSigned::default_instance());
}

CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest(const CMsgSteamSockets_UDP_ConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  client_connection_id_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  my_timestamp_ = GOOGLE_ULONGLONG(0);
  ping_est_ms_ = 0u;
  crypt_ = NULL;
  cert_ = NULL;
  protocol_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamSockets_UDP_ConnectRequest::~CMsgSteamSockets_UDP_ConnectRequest() {
  SharedDtor();
}

void CMsgSteamSockets_UDP_ConnectRequest::SharedDtor() {
  if (this != default_instance_) {
    delete crypt_;
    delete cert_;
  }
}

void CMsgSteamSockets_UDP_ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamSockets_UDP_ConnectRequest_descriptor_;
}

const CMsgSteamSockets_UDP_ConnectRequest& CMsgSteamSockets_UDP_ConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  return *default_instance_;
}

CMsgSteamSockets_UDP_ConnectRequest* CMsgSteamSockets_UDP_ConnectRequest::default_instance_ = NULL;

CMsgSteamSockets_UDP_ConnectRequest* CMsgSteamSockets_UDP_ConnectRequest::New() const {
  return new CMsgSteamSockets_UDP_ConnectRequest;
}

void CMsgSteamSockets_UDP_ConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_connection_id_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    client_steam_id_ = GOOGLE_ULONGLONG(0);
    my_timestamp_ = GOOGLE_ULONGLONG(0);
    ping_est_ms_ = 0u;
    if (has_crypt()) {
      if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
    }
    if (has_cert()) {
      if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
    }
    protocol_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamSockets_UDP_ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_client_steam_id;
        break;
      }

      // optional fixed64 client_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          set_has_client_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cert;
        break;
      }

      // optional .CMsgSteamDatagramCertificateSigned cert = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_my_timestamp;
        break;
      }

      // optional fixed64 my_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_my_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &my_timestamp_)));
          set_has_my_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ping_est_ms;
        break;
      }

      // optional uint32 ping_est_ms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_est_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_est_ms_)));
          set_has_ping_est_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_crypt;
        break;
      }

      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crypt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamSockets_UDP_ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_connection_id = 1;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_connection_id(), output);
  }

  // optional fixed64 challenge = 2;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->challenge(), output);
  }

  // optional fixed64 client_steam_id = 3;
  if (has_client_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->client_steam_id(), output);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 4;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cert(), output);
  }

  // optional fixed64 my_timestamp = 5;
  if (has_my_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->my_timestamp(), output);
  }

  // optional uint32 ping_est_ms = 6;
  if (has_ping_est_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ping_est_ms(), output);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (has_crypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->crypt(), output);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_connection_id = 1;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_connection_id(), target);
  }

  // optional fixed64 challenge = 2;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->challenge(), target);
  }

  // optional fixed64 client_steam_id = 3;
  if (has_client_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->client_steam_id(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 4;
  if (has_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cert(), target);
  }

  // optional fixed64 my_timestamp = 5;
  if (has_my_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 6;
  if (has_ping_est_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ping_est_ms(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (has_crypt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->crypt(), target);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protocol_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamSockets_UDP_ConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_connection_id = 1;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 2;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed64 client_steam_id = 3;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 my_timestamp = 5;
    if (has_my_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 ping_est_ms = 6;
    if (has_ping_est_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_est_ms());
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    if (has_crypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crypt());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 4;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cert());
    }

    // optional uint32 protocol_version = 8;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamSockets_UDP_ConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectRequest::MergeFrom(const CMsgSteamSockets_UDP_ConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_client_steam_id()) {
      set_client_steam_id(from.client_steam_id());
    }
    if (from.has_my_timestamp()) {
      set_my_timestamp(from.my_timestamp());
    }
    if (from.has_ping_est_ms()) {
      set_ping_est_ms(from.ping_est_ms());
    }
    if (from.has_crypt()) {
      mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (from.has_cert()) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamSockets_UDP_ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectRequest::CopyFrom(const CMsgSteamSockets_UDP_ConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectRequest::IsInitialized() const {

  return true;
}

void CMsgSteamSockets_UDP_ConnectRequest::Swap(CMsgSteamSockets_UDP_ConnectRequest* other) {
  if (other != this) {
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(challenge_, other->challenge_);
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(my_timestamp_, other->my_timestamp_);
    std::swap(ping_est_ms_, other->ping_est_ms_);
    std::swap(crypt_, other->crypt_);
    std::swap(cert_, other->cert_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamSockets_UDP_ConnectRequest_descriptor_;
  metadata.reflection = CMsgSteamSockets_UDP_ConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamSockets_UDP_ConnectOK::kClientConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kServerConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kServerSteamIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kYourTimestampFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kDelayTimeUsecFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kCryptFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kCertFieldNumber;
const int CMsgSteamSockets_UDP_ConnectOK::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamSockets_UDP_ConnectOK::InitAsDefaultInstance() {
  crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(&::CMsgSteamDatagramSessionCryptInfoSigned::default_instance());
  cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(&::CMsgSteamDatagramCertificateSigned::default_instance());
}

CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK(const CMsgSteamSockets_UDP_ConnectOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectOK::SharedCtor() {
  _cached_size_ = 0;
  client_connection_id_ = 0u;
  server_connection_id_ = 0u;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  your_timestamp_ = GOOGLE_ULONGLONG(0);
  delay_time_usec_ = 0u;
  crypt_ = NULL;
  cert_ = NULL;
  protocol_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamSockets_UDP_ConnectOK::~CMsgSteamSockets_UDP_ConnectOK() {
  SharedDtor();
}

void CMsgSteamSockets_UDP_ConnectOK::SharedDtor() {
  if (this != default_instance_) {
    delete crypt_;
    delete cert_;
  }
}

void CMsgSteamSockets_UDP_ConnectOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamSockets_UDP_ConnectOK_descriptor_;
}

const CMsgSteamSockets_UDP_ConnectOK& CMsgSteamSockets_UDP_ConnectOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  return *default_instance_;
}

CMsgSteamSockets_UDP_ConnectOK* CMsgSteamSockets_UDP_ConnectOK::default_instance_ = NULL;

CMsgSteamSockets_UDP_ConnectOK* CMsgSteamSockets_UDP_ConnectOK::New() const {
  return new CMsgSteamSockets_UDP_ConnectOK;
}

void CMsgSteamSockets_UDP_ConnectOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_connection_id_ = 0u;
    server_connection_id_ = 0u;
    server_steam_id_ = GOOGLE_ULONGLONG(0);
    your_timestamp_ = GOOGLE_ULONGLONG(0);
    delay_time_usec_ = 0u;
    if (has_crypt()) {
      if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
    }
    if (has_cert()) {
      if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
    }
    protocol_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamSockets_UDP_ConnectOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_server_steam_id;
        break;
      }

      // optional fixed64 server_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
          set_has_server_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_your_timestamp;
        break;
      }

      // optional fixed64 your_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_your_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &your_timestamp_)));
          set_has_your_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delay_time_usec;
        break;
      }

      // optional uint32 delay_time_usec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_usec_)));
          set_has_delay_time_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_server_connection_id;
        break;
      }

      // optional fixed32 server_connection_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
          set_has_server_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_crypt;
        break;
      }

      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crypt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cert;
        break;
      }

      // optional .CMsgSteamDatagramCertificateSigned cert = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamSockets_UDP_ConnectOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_connection_id = 1;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_connection_id(), output);
  }

  // optional fixed64 server_steam_id = 2;
  if (has_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->server_steam_id(), output);
  }

  // optional fixed64 your_timestamp = 3;
  if (has_your_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->your_timestamp(), output);
  }

  // optional uint32 delay_time_usec = 4;
  if (has_delay_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delay_time_usec(), output);
  }

  // optional fixed32 server_connection_id = 5;
  if (has_server_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->server_connection_id(), output);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (has_crypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->crypt(), output);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 8;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cert(), output);
  }

  // optional uint32 protocol_version = 9;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->protocol_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ConnectOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_connection_id = 1;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_connection_id(), target);
  }

  // optional fixed64 server_steam_id = 2;
  if (has_server_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->server_steam_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (has_your_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if (has_delay_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delay_time_usec(), target);
  }

  // optional fixed32 server_connection_id = 5;
  if (has_server_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->server_connection_id(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if (has_crypt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->crypt(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 8;
  if (has_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cert(), target);
  }

  // optional uint32 protocol_version = 9;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->protocol_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamSockets_UDP_ConnectOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_connection_id = 1;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_connection_id = 5;
    if (has_server_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_steam_id = 2;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 your_timestamp = 3;
    if (has_your_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 delay_time_usec = 4;
    if (has_delay_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time_usec());
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    if (has_crypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crypt());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 8;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cert());
    }

    // optional uint32 protocol_version = 9;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamSockets_UDP_ConnectOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectOK::MergeFrom(const CMsgSteamSockets_UDP_ConnectOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_server_connection_id()) {
      set_server_connection_id(from.server_connection_id());
    }
    if (from.has_server_steam_id()) {
      set_server_steam_id(from.server_steam_id());
    }
    if (from.has_your_timestamp()) {
      set_your_timestamp(from.your_timestamp());
    }
    if (from.has_delay_time_usec()) {
      set_delay_time_usec(from.delay_time_usec());
    }
    if (from.has_crypt()) {
      mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (from.has_cert()) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamSockets_UDP_ConnectOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectOK::CopyFrom(const CMsgSteamSockets_UDP_ConnectOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectOK::IsInitialized() const {

  return true;
}

void CMsgSteamSockets_UDP_ConnectOK::Swap(CMsgSteamSockets_UDP_ConnectOK* other) {
  if (other != this) {
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(server_connection_id_, other->server_connection_id_);
    std::swap(server_steam_id_, other->server_steam_id_);
    std::swap(your_timestamp_, other->your_timestamp_);
    std::swap(delay_time_usec_, other->delay_time_usec_);
    std::swap(crypt_, other->crypt_);
    std::swap(cert_, other->cert_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamSockets_UDP_ConnectOK_descriptor_;
  metadata.reflection = CMsgSteamSockets_UDP_ConnectOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamSockets_UDP_ConnectionClosed::kToConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectionClosed::kFromConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_ConnectionClosed::kDebugFieldNumber;
const int CMsgSteamSockets_UDP_ConnectionClosed::kReasonCodeFieldNumber;
#endif  // !_MSC_VER

CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamSockets_UDP_ConnectionClosed::InitAsDefaultInstance() {
}

CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed(const CMsgSteamSockets_UDP_ConnectionClosed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectionClosed::SharedCtor() {
  _cached_size_ = 0;
  to_connection_id_ = 0u;
  from_connection_id_ = 0u;
  debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamSockets_UDP_ConnectionClosed::~CMsgSteamSockets_UDP_ConnectionClosed() {
  SharedDtor();
}

void CMsgSteamSockets_UDP_ConnectionClosed::SharedDtor() {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamSockets_UDP_ConnectionClosed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_ConnectionClosed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamSockets_UDP_ConnectionClosed_descriptor_;
}

const CMsgSteamSockets_UDP_ConnectionClosed& CMsgSteamSockets_UDP_ConnectionClosed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  return *default_instance_;
}

CMsgSteamSockets_UDP_ConnectionClosed* CMsgSteamSockets_UDP_ConnectionClosed::default_instance_ = NULL;

CMsgSteamSockets_UDP_ConnectionClosed* CMsgSteamSockets_UDP_ConnectionClosed::New() const {
  return new CMsgSteamSockets_UDP_ConnectionClosed;
}

void CMsgSteamSockets_UDP_ConnectionClosed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_connection_id_ = 0u;
    from_connection_id_ = 0u;
    if (has_debug()) {
      if (debug_ != &::google::protobuf::internal::kEmptyString) {
        debug_->clear();
      }
    }
    reason_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamSockets_UDP_ConnectionClosed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string debug = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug().data(), this->debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason_code;
        break;
      }

      // optional uint32 reason_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_code_)));
          set_has_reason_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_to_connection_id;
        break;
      }

      // optional fixed32 to_connection_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
          set_has_to_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_from_connection_id;
        break;
      }

      // optional fixed32 from_connection_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
          set_has_from_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamSockets_UDP_ConnectionClosed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string debug = 2;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debug(), output);
  }

  // optional uint32 reason_code = 3;
  if (has_reason_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason_code(), output);
  }

  // optional fixed32 to_connection_id = 4;
  if (has_to_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->to_connection_id(), output);
  }

  // optional fixed32 from_connection_id = 5;
  if (has_from_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->from_connection_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_ConnectionClosed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string debug = 2;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->debug(), target);
  }

  // optional uint32 reason_code = 3;
  if (has_reason_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason_code(), target);
  }

  // optional fixed32 to_connection_id = 4;
  if (has_to_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 5;
  if (has_from_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->from_connection_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamSockets_UDP_ConnectionClosed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 to_connection_id = 4;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 5;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

    // optional string debug = 2;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug());
    }

    // optional uint32 reason_code = 3;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamSockets_UDP_ConnectionClosed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_ConnectionClosed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamSockets_UDP_ConnectionClosed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_ConnectionClosed::MergeFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_connection_id()) {
      set_to_connection_id(from.to_connection_id());
    }
    if (from.has_from_connection_id()) {
      set_from_connection_id(from.from_connection_id());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
    if (from.has_reason_code()) {
      set_reason_code(from.reason_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamSockets_UDP_ConnectionClosed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_ConnectionClosed::CopyFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_ConnectionClosed::IsInitialized() const {

  return true;
}

void CMsgSteamSockets_UDP_ConnectionClosed::Swap(CMsgSteamSockets_UDP_ConnectionClosed* other) {
  if (other != this) {
    std::swap(to_connection_id_, other->to_connection_id_);
    std::swap(from_connection_id_, other->from_connection_id_);
    std::swap(debug_, other->debug_);
    std::swap(reason_code_, other->reason_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectionClosed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamSockets_UDP_ConnectionClosed_descriptor_;
  metadata.reflection = CMsgSteamSockets_UDP_ConnectionClosed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamSockets_UDP_NoConnection::kFromConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_NoConnection::kToConnectionIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamSockets_UDP_NoConnection::InitAsDefaultInstance() {
}

CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection(const CMsgSteamSockets_UDP_NoConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_NoConnection::SharedCtor() {
  _cached_size_ = 0;
  from_connection_id_ = 0u;
  to_connection_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamSockets_UDP_NoConnection::~CMsgSteamSockets_UDP_NoConnection() {
  SharedDtor();
}

void CMsgSteamSockets_UDP_NoConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamSockets_UDP_NoConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_NoConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamSockets_UDP_NoConnection_descriptor_;
}

const CMsgSteamSockets_UDP_NoConnection& CMsgSteamSockets_UDP_NoConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  return *default_instance_;
}

CMsgSteamSockets_UDP_NoConnection* CMsgSteamSockets_UDP_NoConnection::default_instance_ = NULL;

CMsgSteamSockets_UDP_NoConnection* CMsgSteamSockets_UDP_NoConnection::New() const {
  return new CMsgSteamSockets_UDP_NoConnection;
}

void CMsgSteamSockets_UDP_NoConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_connection_id_ = 0u;
    to_connection_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamSockets_UDP_NoConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 from_connection_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
          set_has_from_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_to_connection_id;
        break;
      }

      // optional fixed32 to_connection_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
          set_has_to_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamSockets_UDP_NoConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 from_connection_id = 2;
  if (has_from_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_connection_id(), output);
  }

  // optional fixed32 to_connection_id = 3;
  if (has_to_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->to_connection_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_NoConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 from_connection_id = 2;
  if (has_from_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_connection_id(), target);
  }

  // optional fixed32 to_connection_id = 3;
  if (has_to_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->to_connection_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamSockets_UDP_NoConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 from_connection_id = 2;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 to_connection_id = 3;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamSockets_UDP_NoConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_NoConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamSockets_UDP_NoConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_NoConnection::MergeFrom(const CMsgSteamSockets_UDP_NoConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_connection_id()) {
      set_from_connection_id(from.from_connection_id());
    }
    if (from.has_to_connection_id()) {
      set_to_connection_id(from.to_connection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamSockets_UDP_NoConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_NoConnection::CopyFrom(const CMsgSteamSockets_UDP_NoConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_NoConnection::IsInitialized() const {

  return true;
}

void CMsgSteamSockets_UDP_NoConnection::Swap(CMsgSteamSockets_UDP_NoConnection* other) {
  if (other != this) {
    std::swap(from_connection_id_, other->from_connection_id_);
    std::swap(to_connection_id_, other->to_connection_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_NoConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamSockets_UDP_NoConnection_descriptor_;
  metadata.reflection = CMsgSteamSockets_UDP_NoConnection_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamSockets_UDP_Stats_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamSockets_UDP_Stats_Flags_descriptor_;
}
bool CMsgSteamSockets_UDP_Stats_Flags_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::ACK_REQUEST_E2E;
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::ACK_REQUEST_IMMEDIATE;
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::Flags_MIN;
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats::Flags_MAX;
const int CMsgSteamSockets_UDP_Stats::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamSockets_UDP_Stats::kStatsFieldNumber;
const int CMsgSteamSockets_UDP_Stats::kFlagsFieldNumber;
const int CMsgSteamSockets_UDP_Stats::kToConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_Stats::kFromConnectionIdFieldNumber;
const int CMsgSteamSockets_UDP_Stats::kSeqNumFieldNumber;
#endif  // !_MSC_VER

CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamSockets_UDP_Stats::InitAsDefaultInstance() {
  stats_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats(const CMsgSteamSockets_UDP_Stats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_Stats::SharedCtor() {
  _cached_size_ = 0;
  stats_ = NULL;
  flags_ = 0u;
  to_connection_id_ = 0u;
  from_connection_id_ = 0u;
  seq_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamSockets_UDP_Stats::~CMsgSteamSockets_UDP_Stats() {
  SharedDtor();
}

void CMsgSteamSockets_UDP_Stats::SharedDtor() {
  if (this != default_instance_) {
    delete stats_;
  }
}

void CMsgSteamSockets_UDP_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamSockets_UDP_Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamSockets_UDP_Stats_descriptor_;
}

const CMsgSteamSockets_UDP_Stats& CMsgSteamSockets_UDP_Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  return *default_instance_;
}

CMsgSteamSockets_UDP_Stats* CMsgSteamSockets_UDP_Stats::default_instance_ = NULL;

CMsgSteamSockets_UDP_Stats* CMsgSteamSockets_UDP_Stats::New() const {
  return new CMsgSteamSockets_UDP_Stats;
}

void CMsgSteamSockets_UDP_Stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats()) {
      if (stats_ != NULL) stats_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    flags_ = 0u;
    to_connection_id_ = 0u;
    from_connection_id_ = 0u;
    seq_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamSockets_UDP_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq_num;
        break;
      }

      // optional uint32 seq_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_)));
          set_has_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_to_connection_id;
        break;
      }

      // optional fixed32 to_connection_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
          set_has_to_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_from_connection_id;
        break;
      }

      // optional fixed32 from_connection_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
          set_has_from_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamSockets_UDP_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality stats = 1;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional uint32 seq_num = 4;
  if (has_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq_num(), output);
  }

  // optional fixed32 to_connection_id = 9;
  if (has_to_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->to_connection_id(), output);
  }

  // optional fixed32 from_connection_id = 10;
  if (has_from_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->from_connection_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamSockets_UDP_Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality stats = 1;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats(), target);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional uint32 seq_num = 4;
  if (has_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_num(), target);
  }

  // optional fixed32 to_connection_id = 9;
  if (has_to_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 10;
  if (has_from_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->from_connection_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamSockets_UDP_Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality stats = 1;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 to_connection_id = 9;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 10;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num = 4;
    if (has_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamSockets_UDP_Stats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamSockets_UDP_Stats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamSockets_UDP_Stats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamSockets_UDP_Stats::MergeFrom(const CMsgSteamSockets_UDP_Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      mutable_stats()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.stats());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_to_connection_id()) {
      set_to_connection_id(from.to_connection_id());
    }
    if (from.has_from_connection_id()) {
      set_from_connection_id(from.from_connection_id());
    }
    if (from.has_seq_num()) {
      set_seq_num(from.seq_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamSockets_UDP_Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamSockets_UDP_Stats::CopyFrom(const CMsgSteamSockets_UDP_Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamSockets_UDP_Stats::IsInitialized() const {

  return true;
}

void CMsgSteamSockets_UDP_Stats::Swap(CMsgSteamSockets_UDP_Stats* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(flags_, other->flags_);
    std::swap(to_connection_id_, other->to_connection_id_);
    std::swap(from_connection_id_, other->from_connection_id_);
    std::swap(seq_num_, other->seq_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamSockets_UDP_Stats_descriptor_;
  metadata.reflection = CMsgSteamSockets_UDP_Stats_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
