// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#ifndef PROTOBUF_steammessages_5fbase_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steammessages_5fbase_2eproto();
void protobuf_AssignDesc_steammessages_5fbase_2eproto();
void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

class CMsgProtoBufHeader;
class CMsgMulti;
class CMsgProtobufWrapped;
class CMsgAuthTicket;
class CCDDBAppDetailCommon;
class CMsgAppRights;

// ===================================================================

class CMsgProtoBufHeader : public ::google::protobuf::Message {
 public:
  CMsgProtoBufHeader();
  virtual ~CMsgProtoBufHeader();

  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);

  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgProtoBufHeader& default_instance();

  void Swap(CMsgProtoBufHeader* other);

  // implements Message ----------------------------------------------

  CMsgProtoBufHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgProtoBufHeader& from);
  void MergeFrom(const CMsgProtoBufHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steamid = 1;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 1;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional int32 client_sessionid = 2;
  inline bool has_client_sessionid() const;
  inline void clear_client_sessionid();
  static const int kClientSessionidFieldNumber = 2;
  inline ::google::protobuf::int32 client_sessionid() const;
  inline void set_client_sessionid(::google::protobuf::int32 value);

  // optional uint32 routing_appid = 3;
  inline bool has_routing_appid() const;
  inline void clear_routing_appid();
  static const int kRoutingAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 routing_appid() const;
  inline void set_routing_appid(::google::protobuf::uint32 value);

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  inline bool has_jobid_source() const;
  inline void clear_jobid_source();
  static const int kJobidSourceFieldNumber = 10;
  inline ::google::protobuf::uint64 jobid_source() const;
  inline void set_jobid_source(::google::protobuf::uint64 value);

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  inline bool has_jobid_target() const;
  inline void clear_jobid_target();
  static const int kJobidTargetFieldNumber = 11;
  inline ::google::protobuf::uint64 jobid_target() const;
  inline void set_jobid_target(::google::protobuf::uint64 value);

  // optional string target_job_name = 12;
  inline bool has_target_job_name() const;
  inline void clear_target_job_name();
  static const int kTargetJobNameFieldNumber = 12;
  inline const ::std::string& target_job_name() const;
  inline void set_target_job_name(const ::std::string& value);
  inline void set_target_job_name(const char* value);
  inline void set_target_job_name(const char* value, size_t size);
  inline ::std::string* mutable_target_job_name();
  inline ::std::string* release_target_job_name();
  inline void set_allocated_target_job_name(::std::string* target_job_name);

  // optional int32 seq_num = 24;
  inline bool has_seq_num() const;
  inline void clear_seq_num();
  static const int kSeqNumFieldNumber = 24;
  inline ::google::protobuf::int32 seq_num() const;
  inline void set_seq_num(::google::protobuf::int32 value);

  // optional int32 eresult = 13 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 13;
  inline ::google::protobuf::int32 eresult() const;
  inline void set_eresult(::google::protobuf::int32 value);

  // optional string error_message = 14;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 14;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  inline void set_allocated_error_message(::std::string* error_message);

  // optional uint32 ip = 15;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 15;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);

  // optional uint32 auth_account_flags = 16;
  inline bool has_auth_account_flags() const;
  inline void clear_auth_account_flags();
  static const int kAuthAccountFlagsFieldNumber = 16;
  inline ::google::protobuf::uint32 auth_account_flags() const;
  inline void set_auth_account_flags(::google::protobuf::uint32 value);

  // optional uint32 token_source = 22;
  inline bool has_token_source() const;
  inline void clear_token_source();
  static const int kTokenSourceFieldNumber = 22;
  inline ::google::protobuf::uint32 token_source() const;
  inline void set_token_source(::google::protobuf::uint32 value);

  // optional bool admin_spoofing_user = 23;
  inline bool has_admin_spoofing_user() const;
  inline void clear_admin_spoofing_user();
  static const int kAdminSpoofingUserFieldNumber = 23;
  inline bool admin_spoofing_user() const;
  inline void set_admin_spoofing_user(bool value);

  // optional int32 transport_error = 17 [default = 1];
  inline bool has_transport_error() const;
  inline void clear_transport_error();
  static const int kTransportErrorFieldNumber = 17;
  inline ::google::protobuf::int32 transport_error() const;
  inline void set_transport_error(::google::protobuf::int32 value);

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageidFieldNumber = 18;
  inline ::google::protobuf::uint64 messageid() const;
  inline void set_messageid(::google::protobuf::uint64 value);

  // optional uint32 publisher_group_id = 19;
  inline bool has_publisher_group_id() const;
  inline void clear_publisher_group_id();
  static const int kPublisherGroupIdFieldNumber = 19;
  inline ::google::protobuf::uint32 publisher_group_id() const;
  inline void set_publisher_group_id(::google::protobuf::uint32 value);

  // optional uint32 sysid = 20;
  inline bool has_sysid() const;
  inline void clear_sysid();
  static const int kSysidFieldNumber = 20;
  inline ::google::protobuf::uint32 sysid() const;
  inline void set_sysid(::google::protobuf::uint32 value);

  // optional uint64 trace_tag = 21;
  inline bool has_trace_tag() const;
  inline void clear_trace_tag();
  static const int kTraceTagFieldNumber = 21;
  inline ::google::protobuf::uint64 trace_tag() const;
  inline void set_trace_tag(::google::protobuf::uint64 value);

  // optional uint32 webapi_key_id = 25;
  inline bool has_webapi_key_id() const;
  inline void clear_webapi_key_id();
  static const int kWebapiKeyIdFieldNumber = 25;
  inline ::google::protobuf::uint32 webapi_key_id() const;
  inline void set_webapi_key_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_client_sessionid();
  inline void clear_has_client_sessionid();
  inline void set_has_routing_appid();
  inline void clear_has_routing_appid();
  inline void set_has_jobid_source();
  inline void clear_has_jobid_source();
  inline void set_has_jobid_target();
  inline void clear_has_jobid_target();
  inline void set_has_target_job_name();
  inline void clear_has_target_job_name();
  inline void set_has_seq_num();
  inline void clear_has_seq_num();
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_error_message();
  inline void clear_has_error_message();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_auth_account_flags();
  inline void clear_has_auth_account_flags();
  inline void set_has_token_source();
  inline void clear_has_token_source();
  inline void set_has_admin_spoofing_user();
  inline void clear_has_admin_spoofing_user();
  inline void set_has_transport_error();
  inline void clear_has_transport_error();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_publisher_group_id();
  inline void clear_has_publisher_group_id();
  inline void set_has_sysid();
  inline void clear_has_sysid();
  inline void set_has_trace_tag();
  inline void clear_has_trace_tag();
  inline void set_has_webapi_key_id();
  inline void clear_has_webapi_key_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::int32 client_sessionid_;
  ::google::protobuf::uint32 routing_appid_;
  ::google::protobuf::uint64 jobid_source_;
  ::google::protobuf::uint64 jobid_target_;
  ::std::string* target_job_name_;
  ::google::protobuf::int32 seq_num_;
  ::google::protobuf::int32 eresult_;
  ::std::string* error_message_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 auth_account_flags_;
  ::google::protobuf::uint32 token_source_;
  bool admin_spoofing_user_;
  ::google::protobuf::uint64 messageid_;
  ::google::protobuf::int32 transport_error_;
  ::google::protobuf::uint32 publisher_group_id_;
  ::google::protobuf::uint64 trace_tag_;
  ::google::protobuf::uint32 sysid_;
  ::google::protobuf::uint32 webapi_key_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgProtoBufHeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMulti : public ::google::protobuf::Message {
 public:
  CMsgMulti();
  virtual ~CMsgMulti();

  CMsgMulti(const CMsgMulti& from);

  inline CMsgMulti& operator=(const CMsgMulti& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMulti& default_instance();

  void Swap(CMsgMulti* other);

  // implements Message ----------------------------------------------

  CMsgMulti* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMulti& from);
  void MergeFrom(const CMsgMulti& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 size_unzipped = 1;
  inline bool has_size_unzipped() const;
  inline void clear_size_unzipped();
  static const int kSizeUnzippedFieldNumber = 1;
  inline ::google::protobuf::uint32 size_unzipped() const;
  inline void set_size_unzipped(::google::protobuf::uint32 value);

  // optional bytes message_body = 2;
  inline bool has_message_body() const;
  inline void clear_message_body();
  static const int kMessageBodyFieldNumber = 2;
  inline const ::std::string& message_body() const;
  inline void set_message_body(const ::std::string& value);
  inline void set_message_body(const char* value);
  inline void set_message_body(const void* value, size_t size);
  inline ::std::string* mutable_message_body();
  inline ::std::string* release_message_body();
  inline void set_allocated_message_body(::std::string* message_body);

  // @@protoc_insertion_point(class_scope:CMsgMulti)
 private:
  inline void set_has_size_unzipped();
  inline void clear_has_size_unzipped();
  inline void set_has_message_body();
  inline void clear_has_message_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_body_;
  ::google::protobuf::uint32 size_unzipped_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgMulti* default_instance_;
};
// -------------------------------------------------------------------

class CMsgProtobufWrapped : public ::google::protobuf::Message {
 public:
  CMsgProtobufWrapped();
  virtual ~CMsgProtobufWrapped();

  CMsgProtobufWrapped(const CMsgProtobufWrapped& from);

  inline CMsgProtobufWrapped& operator=(const CMsgProtobufWrapped& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgProtobufWrapped& default_instance();

  void Swap(CMsgProtobufWrapped* other);

  // implements Message ----------------------------------------------

  CMsgProtobufWrapped* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgProtobufWrapped& from);
  void MergeFrom(const CMsgProtobufWrapped& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes message_body = 1;
  inline bool has_message_body() const;
  inline void clear_message_body();
  static const int kMessageBodyFieldNumber = 1;
  inline const ::std::string& message_body() const;
  inline void set_message_body(const ::std::string& value);
  inline void set_message_body(const char* value);
  inline void set_message_body(const void* value, size_t size);
  inline ::std::string* mutable_message_body();
  inline ::std::string* release_message_body();
  inline void set_allocated_message_body(::std::string* message_body);

  // @@protoc_insertion_point(class_scope:CMsgProtobufWrapped)
 private:
  inline void set_has_message_body();
  inline void clear_has_message_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgProtobufWrapped* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAuthTicket : public ::google::protobuf::Message {
 public:
  CMsgAuthTicket();
  virtual ~CMsgAuthTicket();

  CMsgAuthTicket(const CMsgAuthTicket& from);

  inline CMsgAuthTicket& operator=(const CMsgAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAuthTicket& default_instance();

  void Swap(CMsgAuthTicket* other);

  // implements Message ----------------------------------------------

  CMsgAuthTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAuthTicket& from);
  void MergeFrom(const CMsgAuthTicket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 estate = 1;
  inline bool has_estate() const;
  inline void clear_estate();
  static const int kEstateFieldNumber = 1;
  inline ::google::protobuf::uint32 estate() const;
  inline void set_estate(::google::protobuf::uint32 value);

  // optional uint32 eresult = 2 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 2;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);

  // optional fixed64 steamid = 3;
  inline bool has_steamid() const;
  inline void clear_steamid();
  static const int kSteamidFieldNumber = 3;
  inline ::google::protobuf::uint64 steamid() const;
  inline void set_steamid(::google::protobuf::uint64 value);

  // optional fixed64 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::uint64 gameid() const;
  inline void set_gameid(::google::protobuf::uint64 value);

  // optional uint32 h_steam_pipe = 5;
  inline bool has_h_steam_pipe() const;
  inline void clear_h_steam_pipe();
  static const int kHSteamPipeFieldNumber = 5;
  inline ::google::protobuf::uint32 h_steam_pipe() const;
  inline void set_h_steam_pipe(::google::protobuf::uint32 value);

  // optional uint32 ticket_crc = 6;
  inline bool has_ticket_crc() const;
  inline void clear_ticket_crc();
  static const int kTicketCrcFieldNumber = 6;
  inline ::google::protobuf::uint32 ticket_crc() const;
  inline void set_ticket_crc(::google::protobuf::uint32 value);

  // optional bytes ticket = 7;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 7;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const void* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // @@protoc_insertion_point(class_scope:CMsgAuthTicket)
 private:
  inline void set_has_estate();
  inline void clear_has_estate();
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_steamid();
  inline void clear_has_steamid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_h_steam_pipe();
  inline void clear_has_h_steam_pipe();
  inline void set_has_ticket_crc();
  inline void clear_has_ticket_crc();
  inline void set_has_ticket();
  inline void clear_has_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 estate_;
  ::google::protobuf::uint32 eresult_;
  ::google::protobuf::uint64 steamid_;
  ::google::protobuf::uint64 gameid_;
  ::google::protobuf::uint32 h_steam_pipe_;
  ::google::protobuf::uint32 ticket_crc_;
  ::std::string* ticket_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgAuthTicket* default_instance_;
};
// -------------------------------------------------------------------

class CCDDBAppDetailCommon : public ::google::protobuf::Message {
 public:
  CCDDBAppDetailCommon();
  virtual ~CCDDBAppDetailCommon();

  CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from);

  inline CCDDBAppDetailCommon& operator=(const CCDDBAppDetailCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCDDBAppDetailCommon& default_instance();

  void Swap(CCDDBAppDetailCommon* other);

  // implements Message ----------------------------------------------

  CCDDBAppDetailCommon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCDDBAppDetailCommon& from);
  void MergeFrom(const CCDDBAppDetailCommon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional string logo = 4;
  inline bool has_logo() const;
  inline void clear_logo();
  static const int kLogoFieldNumber = 4;
  inline const ::std::string& logo() const;
  inline void set_logo(const ::std::string& value);
  inline void set_logo(const char* value);
  inline void set_logo(const char* value, size_t size);
  inline ::std::string* mutable_logo();
  inline ::std::string* release_logo();
  inline void set_allocated_logo(::std::string* logo);

  // optional string logo_small = 5;
  inline bool has_logo_small() const;
  inline void clear_logo_small();
  static const int kLogoSmallFieldNumber = 5;
  inline const ::std::string& logo_small() const;
  inline void set_logo_small(const ::std::string& value);
  inline void set_logo_small(const char* value);
  inline void set_logo_small(const char* value, size_t size);
  inline ::std::string* mutable_logo_small();
  inline ::std::string* release_logo_small();
  inline void set_allocated_logo_small(::std::string* logo_small);

  // optional bool tool = 6;
  inline bool has_tool() const;
  inline void clear_tool();
  static const int kToolFieldNumber = 6;
  inline bool tool() const;
  inline void set_tool(bool value);

  // optional bool demo = 7;
  inline bool has_demo() const;
  inline void clear_demo();
  static const int kDemoFieldNumber = 7;
  inline bool demo() const;
  inline void set_demo(bool value);

  // optional bool media = 8;
  inline bool has_media() const;
  inline void clear_media();
  static const int kMediaFieldNumber = 8;
  inline bool media() const;
  inline void set_media(bool value);

  // optional bool community_visible_stats = 9;
  inline bool has_community_visible_stats() const;
  inline void clear_community_visible_stats();
  static const int kCommunityVisibleStatsFieldNumber = 9;
  inline bool community_visible_stats() const;
  inline void set_community_visible_stats(bool value);

  // optional string friendly_name = 10;
  inline bool has_friendly_name() const;
  inline void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 10;
  inline const ::std::string& friendly_name() const;
  inline void set_friendly_name(const ::std::string& value);
  inline void set_friendly_name(const char* value);
  inline void set_friendly_name(const char* value, size_t size);
  inline ::std::string* mutable_friendly_name();
  inline ::std::string* release_friendly_name();
  inline void set_allocated_friendly_name(::std::string* friendly_name);

  // optional string propagation = 11;
  inline bool has_propagation() const;
  inline void clear_propagation();
  static const int kPropagationFieldNumber = 11;
  inline const ::std::string& propagation() const;
  inline void set_propagation(const ::std::string& value);
  inline void set_propagation(const char* value);
  inline void set_propagation(const char* value, size_t size);
  inline ::std::string* mutable_propagation();
  inline ::std::string* release_propagation();
  inline void set_allocated_propagation(::std::string* propagation);

  // optional bool has_adult_content = 12;
  inline bool has_has_adult_content() const;
  inline void clear_has_adult_content();
  static const int kHasAdultContentFieldNumber = 12;
  inline bool has_adult_content() const;
  inline void set_has_adult_content(bool value);

  // @@protoc_insertion_point(class_scope:CCDDBAppDetailCommon)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_logo();
  inline void clear_has_logo();
  inline void set_has_logo_small();
  inline void clear_has_logo_small();
  inline void set_has_tool();
  inline void clear_has_tool();
  inline void set_has_demo();
  inline void clear_has_demo();
  inline void set_has_media();
  inline void clear_has_media();
  inline void set_has_community_visible_stats();
  inline void clear_has_community_visible_stats();
  inline void set_has_friendly_name();
  inline void clear_has_friendly_name();
  inline void set_has_propagation();
  inline void clear_has_propagation();
  inline void set_has_has_adult_content();
  inline void clear_has_has_adult_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* icon_;
  ::std::string* logo_;
  ::std::string* logo_small_;
  ::google::protobuf::uint32 appid_;
  bool tool_;
  bool demo_;
  bool media_;
  bool community_visible_stats_;
  ::std::string* friendly_name_;
  ::std::string* propagation_;
  bool has_adult_content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CCDDBAppDetailCommon* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAppRights : public ::google::protobuf::Message {
 public:
  CMsgAppRights();
  virtual ~CMsgAppRights();

  CMsgAppRights(const CMsgAppRights& from);

  inline CMsgAppRights& operator=(const CMsgAppRights& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAppRights& default_instance();

  void Swap(CMsgAppRights* other);

  // implements Message ----------------------------------------------

  CMsgAppRights* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAppRights& from);
  void MergeFrom(const CMsgAppRights& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool edit_info = 1;
  inline bool has_edit_info() const;
  inline void clear_edit_info();
  static const int kEditInfoFieldNumber = 1;
  inline bool edit_info() const;
  inline void set_edit_info(bool value);

  // optional bool publish = 2;
  inline bool has_publish() const;
  inline void clear_publish();
  static const int kPublishFieldNumber = 2;
  inline bool publish() const;
  inline void set_publish(bool value);

  // optional bool view_error_data = 3;
  inline bool has_view_error_data() const;
  inline void clear_view_error_data();
  static const int kViewErrorDataFieldNumber = 3;
  inline bool view_error_data() const;
  inline void set_view_error_data(bool value);

  // optional bool download = 4;
  inline bool has_download() const;
  inline void clear_download();
  static const int kDownloadFieldNumber = 4;
  inline bool download() const;
  inline void set_download(bool value);

  // optional bool upload_cdkeys = 5;
  inline bool has_upload_cdkeys() const;
  inline void clear_upload_cdkeys();
  static const int kUploadCdkeysFieldNumber = 5;
  inline bool upload_cdkeys() const;
  inline void set_upload_cdkeys(bool value);

  // optional bool generate_cdkeys = 6;
  inline bool has_generate_cdkeys() const;
  inline void clear_generate_cdkeys();
  static const int kGenerateCdkeysFieldNumber = 6;
  inline bool generate_cdkeys() const;
  inline void set_generate_cdkeys(bool value);

  // optional bool view_financials = 7;
  inline bool has_view_financials() const;
  inline void clear_view_financials();
  static const int kViewFinancialsFieldNumber = 7;
  inline bool view_financials() const;
  inline void set_view_financials(bool value);

  // optional bool manage_ceg = 8;
  inline bool has_manage_ceg() const;
  inline void clear_manage_ceg();
  static const int kManageCegFieldNumber = 8;
  inline bool manage_ceg() const;
  inline void set_manage_ceg(bool value);

  // optional bool manage_signing = 9;
  inline bool has_manage_signing() const;
  inline void clear_manage_signing();
  static const int kManageSigningFieldNumber = 9;
  inline bool manage_signing() const;
  inline void set_manage_signing(bool value);

  // optional bool manage_cdkeys = 10;
  inline bool has_manage_cdkeys() const;
  inline void clear_manage_cdkeys();
  static const int kManageCdkeysFieldNumber = 10;
  inline bool manage_cdkeys() const;
  inline void set_manage_cdkeys(bool value);

  // optional bool edit_marketing = 11;
  inline bool has_edit_marketing() const;
  inline void clear_edit_marketing();
  static const int kEditMarketingFieldNumber = 11;
  inline bool edit_marketing() const;
  inline void set_edit_marketing(bool value);

  // optional bool economy_support = 12;
  inline bool has_economy_support() const;
  inline void clear_economy_support();
  static const int kEconomySupportFieldNumber = 12;
  inline bool economy_support() const;
  inline void set_economy_support(bool value);

  // optional bool economy_support_supervisor = 13;
  inline bool has_economy_support_supervisor() const;
  inline void clear_economy_support_supervisor();
  static const int kEconomySupportSupervisorFieldNumber = 13;
  inline bool economy_support_supervisor() const;
  inline void set_economy_support_supervisor(bool value);

  // optional bool manage_pricing = 14;
  inline bool has_manage_pricing() const;
  inline void clear_manage_pricing();
  static const int kManagePricingFieldNumber = 14;
  inline bool manage_pricing() const;
  inline void set_manage_pricing(bool value);

  // optional bool broadcast_live = 15;
  inline bool has_broadcast_live() const;
  inline void clear_broadcast_live();
  static const int kBroadcastLiveFieldNumber = 15;
  inline bool broadcast_live() const;
  inline void set_broadcast_live(bool value);

  // @@protoc_insertion_point(class_scope:CMsgAppRights)
 private:
  inline void set_has_edit_info();
  inline void clear_has_edit_info();
  inline void set_has_publish();
  inline void clear_has_publish();
  inline void set_has_view_error_data();
  inline void clear_has_view_error_data();
  inline void set_has_download();
  inline void clear_has_download();
  inline void set_has_upload_cdkeys();
  inline void clear_has_upload_cdkeys();
  inline void set_has_generate_cdkeys();
  inline void clear_has_generate_cdkeys();
  inline void set_has_view_financials();
  inline void clear_has_view_financials();
  inline void set_has_manage_ceg();
  inline void clear_has_manage_ceg();
  inline void set_has_manage_signing();
  inline void clear_has_manage_signing();
  inline void set_has_manage_cdkeys();
  inline void clear_has_manage_cdkeys();
  inline void set_has_edit_marketing();
  inline void clear_has_edit_marketing();
  inline void set_has_economy_support();
  inline void clear_has_economy_support();
  inline void set_has_economy_support_supervisor();
  inline void clear_has_economy_support_supervisor();
  inline void set_has_manage_pricing();
  inline void clear_has_manage_pricing();
  inline void set_has_broadcast_live();
  inline void clear_has_broadcast_live();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool edit_info_;
  bool publish_;
  bool view_error_data_;
  bool download_;
  bool upload_cdkeys_;
  bool generate_cdkeys_;
  bool view_financials_;
  bool manage_ceg_;
  bool manage_signing_;
  bool manage_cdkeys_;
  bool edit_marketing_;
  bool economy_support_;
  bool economy_support_supervisor_;
  bool manage_pricing_;
  bool broadcast_live_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

  void InitAsDefaultInstance();
  static CMsgAppRights* default_instance_;
};
// ===================================================================

static const int kMsgpoolSoftLimitFieldNumber = 50000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_soft_limit;
static const int kMsgpoolHardLimitFieldNumber = 50001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_hard_limit;

// ===================================================================

// CMsgProtoBufHeader

// optional fixed64 steamid = 1;
inline bool CMsgProtoBufHeader::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgProtoBufHeader::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgProtoBufHeader::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgProtoBufHeader::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::steamid() const {
  return steamid_;
}
inline void CMsgProtoBufHeader::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional int32 client_sessionid = 2;
inline bool CMsgProtoBufHeader::has_client_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgProtoBufHeader::set_has_client_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgProtoBufHeader::clear_has_client_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgProtoBufHeader::clear_client_sessionid() {
  client_sessionid_ = 0;
  clear_has_client_sessionid();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::client_sessionid() const {
  return client_sessionid_;
}
inline void CMsgProtoBufHeader::set_client_sessionid(::google::protobuf::int32 value) {
  set_has_client_sessionid();
  client_sessionid_ = value;
}

// optional uint32 routing_appid = 3;
inline bool CMsgProtoBufHeader::has_routing_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgProtoBufHeader::set_has_routing_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgProtoBufHeader::clear_has_routing_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgProtoBufHeader::clear_routing_appid() {
  routing_appid_ = 0u;
  clear_has_routing_appid();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::routing_appid() const {
  return routing_appid_;
}
inline void CMsgProtoBufHeader::set_routing_appid(::google::protobuf::uint32 value) {
  set_has_routing_appid();
  routing_appid_ = value;
}

// optional fixed64 jobid_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_jobid_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgProtoBufHeader::set_has_jobid_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgProtoBufHeader::clear_has_jobid_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgProtoBufHeader::clear_jobid_source() {
  jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_jobid_source();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::jobid_source() const {
  return jobid_source_;
}
inline void CMsgProtoBufHeader::set_jobid_source(::google::protobuf::uint64 value) {
  set_has_jobid_source();
  jobid_source_ = value;
}

// optional fixed64 jobid_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_jobid_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgProtoBufHeader::set_has_jobid_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgProtoBufHeader::clear_has_jobid_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgProtoBufHeader::clear_jobid_target() {
  jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_jobid_target();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::jobid_target() const {
  return jobid_target_;
}
inline void CMsgProtoBufHeader::set_jobid_target(::google::protobuf::uint64 value) {
  set_has_jobid_target();
  jobid_target_ = value;
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgProtoBufHeader::set_has_target_job_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgProtoBufHeader::clear_has_target_job_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    target_job_name_->clear();
  }
  clear_has_target_job_name();
}
inline const ::std::string& CMsgProtoBufHeader::target_job_name() const {
  return *target_job_name_;
}
inline void CMsgProtoBufHeader::set_target_job_name(const ::std::string& value) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(value);
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(value);
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value, size_t size) {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  set_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    target_job_name_ = new ::std::string;
  }
  return target_job_name_;
}
inline ::std::string* CMsgProtoBufHeader::release_target_job_name() {
  clear_has_target_job_name();
  if (target_job_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_job_name_;
    target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgProtoBufHeader::set_allocated_target_job_name(::std::string* target_job_name) {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_job_name_;
  }
  if (target_job_name) {
    set_has_target_job_name();
    target_job_name_ = target_job_name;
  } else {
    clear_has_target_job_name();
    target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 seq_num = 24;
inline bool CMsgProtoBufHeader::has_seq_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgProtoBufHeader::set_has_seq_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgProtoBufHeader::clear_has_seq_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgProtoBufHeader::clear_seq_num() {
  seq_num_ = 0;
  clear_has_seq_num();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::seq_num() const {
  return seq_num_;
}
inline void CMsgProtoBufHeader::set_seq_num(::google::protobuf::int32 value) {
  set_has_seq_num();
  seq_num_ = value;
}

// optional int32 eresult = 13 [default = 2];
inline bool CMsgProtoBufHeader::has_eresult() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgProtoBufHeader::set_has_eresult() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgProtoBufHeader::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgProtoBufHeader::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::eresult() const {
  return eresult_;
}
inline void CMsgProtoBufHeader::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional string error_message = 14;
inline bool CMsgProtoBufHeader::has_error_message() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgProtoBufHeader::set_has_error_message() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgProtoBufHeader::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgProtoBufHeader::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& CMsgProtoBufHeader::error_message() const {
  return *error_message_;
}
inline void CMsgProtoBufHeader::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void CMsgProtoBufHeader::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void CMsgProtoBufHeader::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtoBufHeader::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* CMsgProtoBufHeader::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgProtoBufHeader::set_allocated_error_message(::std::string* error_message) {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (error_message) {
    set_has_error_message();
    error_message_ = error_message;
  } else {
    clear_has_error_message();
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ip = 15;
inline bool CMsgProtoBufHeader::has_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgProtoBufHeader::set_has_ip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgProtoBufHeader::clear_has_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgProtoBufHeader::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::ip() const {
  return ip_;
}
inline void CMsgProtoBufHeader::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
}

// optional uint32 auth_account_flags = 16;
inline bool CMsgProtoBufHeader::has_auth_account_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgProtoBufHeader::set_has_auth_account_flags() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgProtoBufHeader::clear_has_auth_account_flags() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgProtoBufHeader::clear_auth_account_flags() {
  auth_account_flags_ = 0u;
  clear_has_auth_account_flags();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::auth_account_flags() const {
  return auth_account_flags_;
}
inline void CMsgProtoBufHeader::set_auth_account_flags(::google::protobuf::uint32 value) {
  set_has_auth_account_flags();
  auth_account_flags_ = value;
}

// optional uint32 token_source = 22;
inline bool CMsgProtoBufHeader::has_token_source() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgProtoBufHeader::set_has_token_source() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgProtoBufHeader::clear_has_token_source() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgProtoBufHeader::clear_token_source() {
  token_source_ = 0u;
  clear_has_token_source();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::token_source() const {
  return token_source_;
}
inline void CMsgProtoBufHeader::set_token_source(::google::protobuf::uint32 value) {
  set_has_token_source();
  token_source_ = value;
}

// optional bool admin_spoofing_user = 23;
inline bool CMsgProtoBufHeader::has_admin_spoofing_user() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_admin_spoofing_user() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgProtoBufHeader::clear_has_admin_spoofing_user() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgProtoBufHeader::clear_admin_spoofing_user() {
  admin_spoofing_user_ = false;
  clear_has_admin_spoofing_user();
}
inline bool CMsgProtoBufHeader::admin_spoofing_user() const {
  return admin_spoofing_user_;
}
inline void CMsgProtoBufHeader::set_admin_spoofing_user(bool value) {
  set_has_admin_spoofing_user();
  admin_spoofing_user_ = value;
}

// optional int32 transport_error = 17 [default = 1];
inline bool CMsgProtoBufHeader::has_transport_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_transport_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgProtoBufHeader::clear_has_transport_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgProtoBufHeader::clear_transport_error() {
  transport_error_ = 1;
  clear_has_transport_error();
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::transport_error() const {
  return transport_error_;
}
inline void CMsgProtoBufHeader::set_transport_error(::google::protobuf::int32 value) {
  set_has_transport_error();
  transport_error_ = value;
}

// optional uint64 messageid = 18 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_messageid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_messageid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgProtoBufHeader::clear_has_messageid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgProtoBufHeader::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_messageid();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::messageid() const {
  return messageid_;
}
inline void CMsgProtoBufHeader::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
}

// optional uint32 publisher_group_id = 19;
inline bool CMsgProtoBufHeader::has_publisher_group_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_publisher_group_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgProtoBufHeader::clear_has_publisher_group_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgProtoBufHeader::clear_publisher_group_id() {
  publisher_group_id_ = 0u;
  clear_has_publisher_group_id();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::publisher_group_id() const {
  return publisher_group_id_;
}
inline void CMsgProtoBufHeader::set_publisher_group_id(::google::protobuf::uint32 value) {
  set_has_publisher_group_id();
  publisher_group_id_ = value;
}

// optional uint32 sysid = 20;
inline bool CMsgProtoBufHeader::has_sysid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_sysid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgProtoBufHeader::clear_has_sysid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgProtoBufHeader::clear_sysid() {
  sysid_ = 0u;
  clear_has_sysid();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::sysid() const {
  return sysid_;
}
inline void CMsgProtoBufHeader::set_sysid(::google::protobuf::uint32 value) {
  set_has_sysid();
  sysid_ = value;
}

// optional uint64 trace_tag = 21;
inline bool CMsgProtoBufHeader::has_trace_tag() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_trace_tag() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgProtoBufHeader::clear_has_trace_tag() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgProtoBufHeader::clear_trace_tag() {
  trace_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_trace_tag();
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::trace_tag() const {
  return trace_tag_;
}
inline void CMsgProtoBufHeader::set_trace_tag(::google::protobuf::uint64 value) {
  set_has_trace_tag();
  trace_tag_ = value;
}

// optional uint32 webapi_key_id = 25;
inline bool CMsgProtoBufHeader::has_webapi_key_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgProtoBufHeader::set_has_webapi_key_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgProtoBufHeader::clear_has_webapi_key_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgProtoBufHeader::clear_webapi_key_id() {
  webapi_key_id_ = 0u;
  clear_has_webapi_key_id();
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::webapi_key_id() const {
  return webapi_key_id_;
}
inline void CMsgProtoBufHeader::set_webapi_key_id(::google::protobuf::uint32 value) {
  set_has_webapi_key_id();
  webapi_key_id_ = value;
}

// -------------------------------------------------------------------

// CMsgMulti

// optional uint32 size_unzipped = 1;
inline bool CMsgMulti::has_size_unzipped() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgMulti::set_has_size_unzipped() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgMulti::clear_has_size_unzipped() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgMulti::clear_size_unzipped() {
  size_unzipped_ = 0u;
  clear_has_size_unzipped();
}
inline ::google::protobuf::uint32 CMsgMulti::size_unzipped() const {
  return size_unzipped_;
}
inline void CMsgMulti::set_size_unzipped(::google::protobuf::uint32 value) {
  set_has_size_unzipped();
  size_unzipped_ = value;
}

// optional bytes message_body = 2;
inline bool CMsgMulti::has_message_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgMulti::set_has_message_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgMulti::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgMulti::clear_message_body() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    message_body_->clear();
  }
  clear_has_message_body();
}
inline const ::std::string& CMsgMulti::message_body() const {
  return *message_body_;
}
inline void CMsgMulti::set_message_body(const ::std::string& value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgMulti::set_message_body(const char* value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgMulti::set_message_body(const void* value, size_t size) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgMulti::mutable_message_body() {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  return message_body_;
}
inline ::std::string* CMsgMulti::release_message_body() {
  clear_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_body_;
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgMulti::set_allocated_message_body(::std::string* message_body) {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (message_body) {
    set_has_message_body();
    message_body_ = message_body;
  } else {
    clear_has_message_body();
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgProtobufWrapped

// optional bytes message_body = 1;
inline bool CMsgProtobufWrapped::has_message_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgProtobufWrapped::set_has_message_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgProtobufWrapped::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgProtobufWrapped::clear_message_body() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    message_body_->clear();
  }
  clear_has_message_body();
}
inline const ::std::string& CMsgProtobufWrapped::message_body() const {
  return *message_body_;
}
inline void CMsgProtobufWrapped::set_message_body(const ::std::string& value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgProtobufWrapped::set_message_body(const char* value) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgProtobufWrapped::set_message_body(const void* value, size_t size) {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtobufWrapped::mutable_message_body() {
  set_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    message_body_ = new ::std::string;
  }
  return message_body_;
}
inline ::std::string* CMsgProtobufWrapped::release_message_body() {
  clear_has_message_body();
  if (message_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_body_;
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgProtobufWrapped::set_allocated_message_body(::std::string* message_body) {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (message_body) {
    set_has_message_body();
    message_body_ = message_body;
  } else {
    clear_has_message_body();
    message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgAuthTicket

// optional uint32 estate = 1;
inline bool CMsgAuthTicket::has_estate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAuthTicket::set_has_estate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAuthTicket::clear_has_estate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAuthTicket::clear_estate() {
  estate_ = 0u;
  clear_has_estate();
}
inline ::google::protobuf::uint32 CMsgAuthTicket::estate() const {
  return estate_;
}
inline void CMsgAuthTicket::set_estate(::google::protobuf::uint32 value) {
  set_has_estate();
  estate_ = value;
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgAuthTicket::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAuthTicket::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAuthTicket::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAuthTicket::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
inline ::google::protobuf::uint32 CMsgAuthTicket::eresult() const {
  return eresult_;
}
inline void CMsgAuthTicket::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
}

// optional fixed64 steamid = 3;
inline bool CMsgAuthTicket::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgAuthTicket::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgAuthTicket::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgAuthTicket::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
inline ::google::protobuf::uint64 CMsgAuthTicket::steamid() const {
  return steamid_;
}
inline void CMsgAuthTicket::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
}

// optional fixed64 gameid = 4;
inline bool CMsgAuthTicket::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgAuthTicket::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgAuthTicket::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgAuthTicket::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
inline ::google::protobuf::uint64 CMsgAuthTicket::gameid() const {
  return gameid_;
}
inline void CMsgAuthTicket::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional uint32 h_steam_pipe = 5;
inline bool CMsgAuthTicket::has_h_steam_pipe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgAuthTicket::set_has_h_steam_pipe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgAuthTicket::clear_has_h_steam_pipe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgAuthTicket::clear_h_steam_pipe() {
  h_steam_pipe_ = 0u;
  clear_has_h_steam_pipe();
}
inline ::google::protobuf::uint32 CMsgAuthTicket::h_steam_pipe() const {
  return h_steam_pipe_;
}
inline void CMsgAuthTicket::set_h_steam_pipe(::google::protobuf::uint32 value) {
  set_has_h_steam_pipe();
  h_steam_pipe_ = value;
}

// optional uint32 ticket_crc = 6;
inline bool CMsgAuthTicket::has_ticket_crc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgAuthTicket::set_has_ticket_crc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgAuthTicket::clear_has_ticket_crc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgAuthTicket::clear_ticket_crc() {
  ticket_crc_ = 0u;
  clear_has_ticket_crc();
}
inline ::google::protobuf::uint32 CMsgAuthTicket::ticket_crc() const {
  return ticket_crc_;
}
inline void CMsgAuthTicket::set_ticket_crc(::google::protobuf::uint32 value) {
  set_has_ticket_crc();
  ticket_crc_ = value;
}

// optional bytes ticket = 7;
inline bool CMsgAuthTicket::has_ticket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgAuthTicket::set_has_ticket() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgAuthTicket::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgAuthTicket::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& CMsgAuthTicket::ticket() const {
  return *ticket_;
}
inline void CMsgAuthTicket::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgAuthTicket::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgAuthTicket::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgAuthTicket::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}
inline ::std::string* CMsgAuthTicket::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgAuthTicket::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CCDDBAppDetailCommon

// optional uint32 appid = 1;
inline bool CCDDBAppDetailCommon::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCDDBAppDetailCommon::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCDDBAppDetailCommon::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CCDDBAppDetailCommon::appid() const {
  return appid_;
}
inline void CCDDBAppDetailCommon::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// optional string name = 2;
inline bool CCDDBAppDetailCommon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCDDBAppDetailCommon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCDDBAppDetailCommon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CCDDBAppDetailCommon::name() const {
  return *name_;
}
inline void CCDDBAppDetailCommon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CCDDBAppDetailCommon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CCDDBAppDetailCommon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CCDDBAppDetailCommon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string icon = 3;
inline bool CCDDBAppDetailCommon::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCDDBAppDetailCommon::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCDDBAppDetailCommon::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& CCDDBAppDetailCommon::icon() const {
  return *icon_;
}
inline void CCDDBAppDetailCommon::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void CCDDBAppDetailCommon::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void CCDDBAppDetailCommon::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* CCDDBAppDetailCommon::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string logo = 4;
inline bool CCDDBAppDetailCommon::has_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_logo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CCDDBAppDetailCommon::clear_has_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CCDDBAppDetailCommon::clear_logo() {
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    logo_->clear();
  }
  clear_has_logo();
}
inline const ::std::string& CCDDBAppDetailCommon::logo() const {
  return *logo_;
}
inline void CCDDBAppDetailCommon::set_logo(const ::std::string& value) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(value);
}
inline void CCDDBAppDetailCommon::set_logo(const char* value) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(value);
}
inline void CCDDBAppDetailCommon::set_logo(const char* value, size_t size) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_logo() {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  return logo_;
}
inline ::std::string* CCDDBAppDetailCommon::release_logo() {
  clear_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logo_;
    logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_logo(::std::string* logo) {
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_;
  }
  if (logo) {
    set_has_logo();
    logo_ = logo;
  } else {
    clear_has_logo();
    logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string logo_small = 5;
inline bool CCDDBAppDetailCommon::has_logo_small() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_logo_small() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CCDDBAppDetailCommon::clear_has_logo_small() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CCDDBAppDetailCommon::clear_logo_small() {
  if (logo_small_ != &::google::protobuf::internal::kEmptyString) {
    logo_small_->clear();
  }
  clear_has_logo_small();
}
inline const ::std::string& CCDDBAppDetailCommon::logo_small() const {
  return *logo_small_;
}
inline void CCDDBAppDetailCommon::set_logo_small(const ::std::string& value) {
  set_has_logo_small();
  if (logo_small_ == &::google::protobuf::internal::kEmptyString) {
    logo_small_ = new ::std::string;
  }
  logo_small_->assign(value);
}
inline void CCDDBAppDetailCommon::set_logo_small(const char* value) {
  set_has_logo_small();
  if (logo_small_ == &::google::protobuf::internal::kEmptyString) {
    logo_small_ = new ::std::string;
  }
  logo_small_->assign(value);
}
inline void CCDDBAppDetailCommon::set_logo_small(const char* value, size_t size) {
  set_has_logo_small();
  if (logo_small_ == &::google::protobuf::internal::kEmptyString) {
    logo_small_ = new ::std::string;
  }
  logo_small_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_logo_small() {
  set_has_logo_small();
  if (logo_small_ == &::google::protobuf::internal::kEmptyString) {
    logo_small_ = new ::std::string;
  }
  return logo_small_;
}
inline ::std::string* CCDDBAppDetailCommon::release_logo_small() {
  clear_has_logo_small();
  if (logo_small_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logo_small_;
    logo_small_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_logo_small(::std::string* logo_small) {
  if (logo_small_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_small_;
  }
  if (logo_small) {
    set_has_logo_small();
    logo_small_ = logo_small;
  } else {
    clear_has_logo_small();
    logo_small_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool tool = 6;
inline bool CCDDBAppDetailCommon::has_tool() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_tool() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CCDDBAppDetailCommon::clear_has_tool() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CCDDBAppDetailCommon::clear_tool() {
  tool_ = false;
  clear_has_tool();
}
inline bool CCDDBAppDetailCommon::tool() const {
  return tool_;
}
inline void CCDDBAppDetailCommon::set_tool(bool value) {
  set_has_tool();
  tool_ = value;
}

// optional bool demo = 7;
inline bool CCDDBAppDetailCommon::has_demo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_demo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CCDDBAppDetailCommon::clear_has_demo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CCDDBAppDetailCommon::clear_demo() {
  demo_ = false;
  clear_has_demo();
}
inline bool CCDDBAppDetailCommon::demo() const {
  return demo_;
}
inline void CCDDBAppDetailCommon::set_demo(bool value) {
  set_has_demo();
  demo_ = value;
}

// optional bool media = 8;
inline bool CCDDBAppDetailCommon::has_media() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_media() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CCDDBAppDetailCommon::clear_has_media() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CCDDBAppDetailCommon::clear_media() {
  media_ = false;
  clear_has_media();
}
inline bool CCDDBAppDetailCommon::media() const {
  return media_;
}
inline void CCDDBAppDetailCommon::set_media(bool value) {
  set_has_media();
  media_ = value;
}

// optional bool community_visible_stats = 9;
inline bool CCDDBAppDetailCommon::has_community_visible_stats() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_community_visible_stats() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CCDDBAppDetailCommon::clear_has_community_visible_stats() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CCDDBAppDetailCommon::clear_community_visible_stats() {
  community_visible_stats_ = false;
  clear_has_community_visible_stats();
}
inline bool CCDDBAppDetailCommon::community_visible_stats() const {
  return community_visible_stats_;
}
inline void CCDDBAppDetailCommon::set_community_visible_stats(bool value) {
  set_has_community_visible_stats();
  community_visible_stats_ = value;
}

// optional string friendly_name = 10;
inline bool CCDDBAppDetailCommon::has_friendly_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_friendly_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CCDDBAppDetailCommon::clear_has_friendly_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CCDDBAppDetailCommon::clear_friendly_name() {
  if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
    friendly_name_->clear();
  }
  clear_has_friendly_name();
}
inline const ::std::string& CCDDBAppDetailCommon::friendly_name() const {
  return *friendly_name_;
}
inline void CCDDBAppDetailCommon::set_friendly_name(const ::std::string& value) {
  set_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    friendly_name_ = new ::std::string;
  }
  friendly_name_->assign(value);
}
inline void CCDDBAppDetailCommon::set_friendly_name(const char* value) {
  set_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    friendly_name_ = new ::std::string;
  }
  friendly_name_->assign(value);
}
inline void CCDDBAppDetailCommon::set_friendly_name(const char* value, size_t size) {
  set_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    friendly_name_ = new ::std::string;
  }
  friendly_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_friendly_name() {
  set_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    friendly_name_ = new ::std::string;
  }
  return friendly_name_;
}
inline ::std::string* CCDDBAppDetailCommon::release_friendly_name() {
  clear_has_friendly_name();
  if (friendly_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendly_name_;
    friendly_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friendly_name_;
  }
  if (friendly_name) {
    set_has_friendly_name();
    friendly_name_ = friendly_name;
  } else {
    clear_has_friendly_name();
    friendly_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string propagation = 11;
inline bool CCDDBAppDetailCommon::has_propagation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_propagation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CCDDBAppDetailCommon::clear_has_propagation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CCDDBAppDetailCommon::clear_propagation() {
  if (propagation_ != &::google::protobuf::internal::kEmptyString) {
    propagation_->clear();
  }
  clear_has_propagation();
}
inline const ::std::string& CCDDBAppDetailCommon::propagation() const {
  return *propagation_;
}
inline void CCDDBAppDetailCommon::set_propagation(const ::std::string& value) {
  set_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    propagation_ = new ::std::string;
  }
  propagation_->assign(value);
}
inline void CCDDBAppDetailCommon::set_propagation(const char* value) {
  set_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    propagation_ = new ::std::string;
  }
  propagation_->assign(value);
}
inline void CCDDBAppDetailCommon::set_propagation(const char* value, size_t size) {
  set_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    propagation_ = new ::std::string;
  }
  propagation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDDBAppDetailCommon::mutable_propagation() {
  set_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    propagation_ = new ::std::string;
  }
  return propagation_;
}
inline ::std::string* CCDDBAppDetailCommon::release_propagation() {
  clear_has_propagation();
  if (propagation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = propagation_;
    propagation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CCDDBAppDetailCommon::set_allocated_propagation(::std::string* propagation) {
  if (propagation_ != &::google::protobuf::internal::kEmptyString) {
    delete propagation_;
  }
  if (propagation) {
    set_has_propagation();
    propagation_ = propagation;
  } else {
    clear_has_propagation();
    propagation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool has_adult_content = 12;
inline bool CCDDBAppDetailCommon::has_has_adult_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CCDDBAppDetailCommon::set_has_has_adult_content() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CCDDBAppDetailCommon::clear_has_has_adult_content() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CCDDBAppDetailCommon::clear_has_adult_content() {
  has_adult_content_ = false;
  clear_has_has_adult_content();
}
inline bool CCDDBAppDetailCommon::has_adult_content() const {
  return has_adult_content_;
}
inline void CCDDBAppDetailCommon::set_has_adult_content(bool value) {
  set_has_has_adult_content();
  has_adult_content_ = value;
}

// -------------------------------------------------------------------

// CMsgAppRights

// optional bool edit_info = 1;
inline bool CMsgAppRights::has_edit_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgAppRights::set_has_edit_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgAppRights::clear_has_edit_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgAppRights::clear_edit_info() {
  edit_info_ = false;
  clear_has_edit_info();
}
inline bool CMsgAppRights::edit_info() const {
  return edit_info_;
}
inline void CMsgAppRights::set_edit_info(bool value) {
  set_has_edit_info();
  edit_info_ = value;
}

// optional bool publish = 2;
inline bool CMsgAppRights::has_publish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgAppRights::set_has_publish() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgAppRights::clear_has_publish() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgAppRights::clear_publish() {
  publish_ = false;
  clear_has_publish();
}
inline bool CMsgAppRights::publish() const {
  return publish_;
}
inline void CMsgAppRights::set_publish(bool value) {
  set_has_publish();
  publish_ = value;
}

// optional bool view_error_data = 3;
inline bool CMsgAppRights::has_view_error_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgAppRights::set_has_view_error_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgAppRights::clear_has_view_error_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgAppRights::clear_view_error_data() {
  view_error_data_ = false;
  clear_has_view_error_data();
}
inline bool CMsgAppRights::view_error_data() const {
  return view_error_data_;
}
inline void CMsgAppRights::set_view_error_data(bool value) {
  set_has_view_error_data();
  view_error_data_ = value;
}

// optional bool download = 4;
inline bool CMsgAppRights::has_download() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgAppRights::set_has_download() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgAppRights::clear_has_download() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgAppRights::clear_download() {
  download_ = false;
  clear_has_download();
}
inline bool CMsgAppRights::download() const {
  return download_;
}
inline void CMsgAppRights::set_download(bool value) {
  set_has_download();
  download_ = value;
}

// optional bool upload_cdkeys = 5;
inline bool CMsgAppRights::has_upload_cdkeys() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgAppRights::set_has_upload_cdkeys() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgAppRights::clear_has_upload_cdkeys() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgAppRights::clear_upload_cdkeys() {
  upload_cdkeys_ = false;
  clear_has_upload_cdkeys();
}
inline bool CMsgAppRights::upload_cdkeys() const {
  return upload_cdkeys_;
}
inline void CMsgAppRights::set_upload_cdkeys(bool value) {
  set_has_upload_cdkeys();
  upload_cdkeys_ = value;
}

// optional bool generate_cdkeys = 6;
inline bool CMsgAppRights::has_generate_cdkeys() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgAppRights::set_has_generate_cdkeys() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgAppRights::clear_has_generate_cdkeys() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgAppRights::clear_generate_cdkeys() {
  generate_cdkeys_ = false;
  clear_has_generate_cdkeys();
}
inline bool CMsgAppRights::generate_cdkeys() const {
  return generate_cdkeys_;
}
inline void CMsgAppRights::set_generate_cdkeys(bool value) {
  set_has_generate_cdkeys();
  generate_cdkeys_ = value;
}

// optional bool view_financials = 7;
inline bool CMsgAppRights::has_view_financials() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgAppRights::set_has_view_financials() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgAppRights::clear_has_view_financials() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgAppRights::clear_view_financials() {
  view_financials_ = false;
  clear_has_view_financials();
}
inline bool CMsgAppRights::view_financials() const {
  return view_financials_;
}
inline void CMsgAppRights::set_view_financials(bool value) {
  set_has_view_financials();
  view_financials_ = value;
}

// optional bool manage_ceg = 8;
inline bool CMsgAppRights::has_manage_ceg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgAppRights::set_has_manage_ceg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgAppRights::clear_has_manage_ceg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgAppRights::clear_manage_ceg() {
  manage_ceg_ = false;
  clear_has_manage_ceg();
}
inline bool CMsgAppRights::manage_ceg() const {
  return manage_ceg_;
}
inline void CMsgAppRights::set_manage_ceg(bool value) {
  set_has_manage_ceg();
  manage_ceg_ = value;
}

// optional bool manage_signing = 9;
inline bool CMsgAppRights::has_manage_signing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgAppRights::set_has_manage_signing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgAppRights::clear_has_manage_signing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgAppRights::clear_manage_signing() {
  manage_signing_ = false;
  clear_has_manage_signing();
}
inline bool CMsgAppRights::manage_signing() const {
  return manage_signing_;
}
inline void CMsgAppRights::set_manage_signing(bool value) {
  set_has_manage_signing();
  manage_signing_ = value;
}

// optional bool manage_cdkeys = 10;
inline bool CMsgAppRights::has_manage_cdkeys() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgAppRights::set_has_manage_cdkeys() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgAppRights::clear_has_manage_cdkeys() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgAppRights::clear_manage_cdkeys() {
  manage_cdkeys_ = false;
  clear_has_manage_cdkeys();
}
inline bool CMsgAppRights::manage_cdkeys() const {
  return manage_cdkeys_;
}
inline void CMsgAppRights::set_manage_cdkeys(bool value) {
  set_has_manage_cdkeys();
  manage_cdkeys_ = value;
}

// optional bool edit_marketing = 11;
inline bool CMsgAppRights::has_edit_marketing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgAppRights::set_has_edit_marketing() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgAppRights::clear_has_edit_marketing() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgAppRights::clear_edit_marketing() {
  edit_marketing_ = false;
  clear_has_edit_marketing();
}
inline bool CMsgAppRights::edit_marketing() const {
  return edit_marketing_;
}
inline void CMsgAppRights::set_edit_marketing(bool value) {
  set_has_edit_marketing();
  edit_marketing_ = value;
}

// optional bool economy_support = 12;
inline bool CMsgAppRights::has_economy_support() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgAppRights::set_has_economy_support() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgAppRights::clear_has_economy_support() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgAppRights::clear_economy_support() {
  economy_support_ = false;
  clear_has_economy_support();
}
inline bool CMsgAppRights::economy_support() const {
  return economy_support_;
}
inline void CMsgAppRights::set_economy_support(bool value) {
  set_has_economy_support();
  economy_support_ = value;
}

// optional bool economy_support_supervisor = 13;
inline bool CMsgAppRights::has_economy_support_supervisor() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgAppRights::set_has_economy_support_supervisor() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgAppRights::clear_has_economy_support_supervisor() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgAppRights::clear_economy_support_supervisor() {
  economy_support_supervisor_ = false;
  clear_has_economy_support_supervisor();
}
inline bool CMsgAppRights::economy_support_supervisor() const {
  return economy_support_supervisor_;
}
inline void CMsgAppRights::set_economy_support_supervisor(bool value) {
  set_has_economy_support_supervisor();
  economy_support_supervisor_ = value;
}

// optional bool manage_pricing = 14;
inline bool CMsgAppRights::has_manage_pricing() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgAppRights::set_has_manage_pricing() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgAppRights::clear_has_manage_pricing() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgAppRights::clear_manage_pricing() {
  manage_pricing_ = false;
  clear_has_manage_pricing();
}
inline bool CMsgAppRights::manage_pricing() const {
  return manage_pricing_;
}
inline void CMsgAppRights::set_manage_pricing(bool value) {
  set_has_manage_pricing();
  manage_pricing_ = value;
}

// optional bool broadcast_live = 15;
inline bool CMsgAppRights::has_broadcast_live() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgAppRights::set_has_broadcast_live() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgAppRights::clear_has_broadcast_live() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgAppRights::clear_broadcast_live() {
  broadcast_live_ = false;
  clear_has_broadcast_live();
}
inline bool CMsgAppRights::broadcast_live() const {
  return broadcast_live_;
}
inline void CMsgAppRights::set_broadcast_live(bool value) {
  set_has_broadcast_live();
  broadcast_live_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fbase_2eproto__INCLUDED
