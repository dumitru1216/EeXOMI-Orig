// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uifontfile_format.proto

#ifndef PROTOBUF_uifontfile_5fformat_2eproto__INCLUDED
#define PROTOBUF_uifontfile_5fformat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_uifontfile_5fformat_2eproto();
void protobuf_AssignDesc_uifontfile_5fformat_2eproto();
void protobuf_ShutdownFile_uifontfile_5fformat_2eproto();

class CUIFontFilePB;
class CUIFontFilePackagePB;
class CUIFontFilePackagePB_CUIEncryptedFontFilePB;

// ===================================================================

class CUIFontFilePB : public ::google::protobuf::Message {
 public:
  CUIFontFilePB();
  virtual ~CUIFontFilePB();

  CUIFontFilePB(const CUIFontFilePB& from);

  inline CUIFontFilePB& operator=(const CUIFontFilePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CUIFontFilePB& default_instance();

  void Swap(CUIFontFilePB* other);

  // implements Message ----------------------------------------------

  CUIFontFilePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CUIFontFilePB& from);
  void MergeFrom(const CUIFontFilePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string font_file_name = 1;
  inline bool has_font_file_name() const;
  inline void clear_font_file_name();
  static const int kFontFileNameFieldNumber = 1;
  inline const ::std::string& font_file_name() const;
  inline void set_font_file_name(const ::std::string& value);
  inline void set_font_file_name(const char* value);
  inline void set_font_file_name(const char* value, size_t size);
  inline ::std::string* mutable_font_file_name();
  inline ::std::string* release_font_file_name();
  inline void set_allocated_font_file_name(::std::string* font_file_name);

  // optional bytes opentype_font_data = 2;
  inline bool has_opentype_font_data() const;
  inline void clear_opentype_font_data();
  static const int kOpentypeFontDataFieldNumber = 2;
  inline const ::std::string& opentype_font_data() const;
  inline void set_opentype_font_data(const ::std::string& value);
  inline void set_opentype_font_data(const char* value);
  inline void set_opentype_font_data(const void* value, size_t size);
  inline ::std::string* mutable_opentype_font_data();
  inline ::std::string* release_opentype_font_data();
  inline void set_allocated_opentype_font_data(::std::string* opentype_font_data);

  // @@protoc_insertion_point(class_scope:CUIFontFilePB)
 private:
  inline void set_has_font_file_name();
  inline void clear_has_font_file_name();
  inline void set_has_opentype_font_data();
  inline void clear_has_opentype_font_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* font_file_name_;
  ::std::string* opentype_font_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_uifontfile_5fformat_2eproto();
  friend void protobuf_AssignDesc_uifontfile_5fformat_2eproto();
  friend void protobuf_ShutdownFile_uifontfile_5fformat_2eproto();

  void InitAsDefaultInstance();
  static CUIFontFilePB* default_instance_;
};
// -------------------------------------------------------------------

class CUIFontFilePackagePB_CUIEncryptedFontFilePB : public ::google::protobuf::Message {
 public:
  CUIFontFilePackagePB_CUIEncryptedFontFilePB();
  virtual ~CUIFontFilePackagePB_CUIEncryptedFontFilePB();

  CUIFontFilePackagePB_CUIEncryptedFontFilePB(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from);

  inline CUIFontFilePackagePB_CUIEncryptedFontFilePB& operator=(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CUIFontFilePackagePB_CUIEncryptedFontFilePB& default_instance();

  void Swap(CUIFontFilePackagePB_CUIEncryptedFontFilePB* other);

  // implements Message ----------------------------------------------

  CUIFontFilePackagePB_CUIEncryptedFontFilePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from);
  void MergeFrom(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes encrypted_contents = 1;
  inline bool has_encrypted_contents() const;
  inline void clear_encrypted_contents();
  static const int kEncryptedContentsFieldNumber = 1;
  inline const ::std::string& encrypted_contents() const;
  inline void set_encrypted_contents(const ::std::string& value);
  inline void set_encrypted_contents(const char* value);
  inline void set_encrypted_contents(const void* value, size_t size);
  inline ::std::string* mutable_encrypted_contents();
  inline ::std::string* release_encrypted_contents();
  inline void set_allocated_encrypted_contents(::std::string* encrypted_contents);

  // @@protoc_insertion_point(class_scope:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
 private:
  inline void set_has_encrypted_contents();
  inline void clear_has_encrypted_contents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* encrypted_contents_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_uifontfile_5fformat_2eproto();
  friend void protobuf_AssignDesc_uifontfile_5fformat_2eproto();
  friend void protobuf_ShutdownFile_uifontfile_5fformat_2eproto();

  void InitAsDefaultInstance();
  static CUIFontFilePackagePB_CUIEncryptedFontFilePB* default_instance_;
};
// -------------------------------------------------------------------

class CUIFontFilePackagePB : public ::google::protobuf::Message {
 public:
  CUIFontFilePackagePB();
  virtual ~CUIFontFilePackagePB();

  CUIFontFilePackagePB(const CUIFontFilePackagePB& from);

  inline CUIFontFilePackagePB& operator=(const CUIFontFilePackagePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CUIFontFilePackagePB& default_instance();

  void Swap(CUIFontFilePackagePB* other);

  // implements Message ----------------------------------------------

  CUIFontFilePackagePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CUIFontFilePackagePB& from);
  void MergeFrom(const CUIFontFilePackagePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CUIFontFilePackagePB_CUIEncryptedFontFilePB CUIEncryptedFontFilePB;

  // accessors -------------------------------------------------------

  // required uint32 package_version = 1;
  inline bool has_package_version() const;
  inline void clear_package_version();
  static const int kPackageVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 package_version() const;
  inline void set_package_version(::google::protobuf::uint32 value);

  // repeated .CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2;
  inline int encrypted_font_files_size() const;
  inline void clear_encrypted_font_files();
  static const int kEncryptedFontFilesFieldNumber = 2;
  inline const ::CUIFontFilePackagePB_CUIEncryptedFontFilePB& encrypted_font_files(int index) const;
  inline ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* mutable_encrypted_font_files(int index);
  inline ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* add_encrypted_font_files();
  inline const ::google::protobuf::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >&
      encrypted_font_files() const;
  inline ::google::protobuf::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >*
      mutable_encrypted_font_files();

  // @@protoc_insertion_point(class_scope:CUIFontFilePackagePB)
 private:
  inline void set_has_package_version();
  inline void clear_has_package_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB > encrypted_font_files_;
  ::google::protobuf::uint32 package_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_uifontfile_5fformat_2eproto();
  friend void protobuf_AssignDesc_uifontfile_5fformat_2eproto();
  friend void protobuf_ShutdownFile_uifontfile_5fformat_2eproto();

  void InitAsDefaultInstance();
  static CUIFontFilePackagePB* default_instance_;
};
// ===================================================================


// ===================================================================

// CUIFontFilePB

// optional string font_file_name = 1;
inline bool CUIFontFilePB::has_font_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CUIFontFilePB::set_has_font_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CUIFontFilePB::clear_has_font_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CUIFontFilePB::clear_font_file_name() {
  if (font_file_name_ != &::google::protobuf::internal::kEmptyString) {
    font_file_name_->clear();
  }
  clear_has_font_file_name();
}
inline const ::std::string& CUIFontFilePB::font_file_name() const {
  return *font_file_name_;
}
inline void CUIFontFilePB::set_font_file_name(const ::std::string& value) {
  set_has_font_file_name();
  if (font_file_name_ == &::google::protobuf::internal::kEmptyString) {
    font_file_name_ = new ::std::string;
  }
  font_file_name_->assign(value);
}
inline void CUIFontFilePB::set_font_file_name(const char* value) {
  set_has_font_file_name();
  if (font_file_name_ == &::google::protobuf::internal::kEmptyString) {
    font_file_name_ = new ::std::string;
  }
  font_file_name_->assign(value);
}
inline void CUIFontFilePB::set_font_file_name(const char* value, size_t size) {
  set_has_font_file_name();
  if (font_file_name_ == &::google::protobuf::internal::kEmptyString) {
    font_file_name_ = new ::std::string;
  }
  font_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CUIFontFilePB::mutable_font_file_name() {
  set_has_font_file_name();
  if (font_file_name_ == &::google::protobuf::internal::kEmptyString) {
    font_file_name_ = new ::std::string;
  }
  return font_file_name_;
}
inline ::std::string* CUIFontFilePB::release_font_file_name() {
  clear_has_font_file_name();
  if (font_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = font_file_name_;
    font_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CUIFontFilePB::set_allocated_font_file_name(::std::string* font_file_name) {
  if (font_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete font_file_name_;
  }
  if (font_file_name) {
    set_has_font_file_name();
    font_file_name_ = font_file_name;
  } else {
    clear_has_font_file_name();
    font_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes opentype_font_data = 2;
inline bool CUIFontFilePB::has_opentype_font_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CUIFontFilePB::set_has_opentype_font_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CUIFontFilePB::clear_has_opentype_font_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CUIFontFilePB::clear_opentype_font_data() {
  if (opentype_font_data_ != &::google::protobuf::internal::kEmptyString) {
    opentype_font_data_->clear();
  }
  clear_has_opentype_font_data();
}
inline const ::std::string& CUIFontFilePB::opentype_font_data() const {
  return *opentype_font_data_;
}
inline void CUIFontFilePB::set_opentype_font_data(const ::std::string& value) {
  set_has_opentype_font_data();
  if (opentype_font_data_ == &::google::protobuf::internal::kEmptyString) {
    opentype_font_data_ = new ::std::string;
  }
  opentype_font_data_->assign(value);
}
inline void CUIFontFilePB::set_opentype_font_data(const char* value) {
  set_has_opentype_font_data();
  if (opentype_font_data_ == &::google::protobuf::internal::kEmptyString) {
    opentype_font_data_ = new ::std::string;
  }
  opentype_font_data_->assign(value);
}
inline void CUIFontFilePB::set_opentype_font_data(const void* value, size_t size) {
  set_has_opentype_font_data();
  if (opentype_font_data_ == &::google::protobuf::internal::kEmptyString) {
    opentype_font_data_ = new ::std::string;
  }
  opentype_font_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CUIFontFilePB::mutable_opentype_font_data() {
  set_has_opentype_font_data();
  if (opentype_font_data_ == &::google::protobuf::internal::kEmptyString) {
    opentype_font_data_ = new ::std::string;
  }
  return opentype_font_data_;
}
inline ::std::string* CUIFontFilePB::release_opentype_font_data() {
  clear_has_opentype_font_data();
  if (opentype_font_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opentype_font_data_;
    opentype_font_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CUIFontFilePB::set_allocated_opentype_font_data(::std::string* opentype_font_data) {
  if (opentype_font_data_ != &::google::protobuf::internal::kEmptyString) {
    delete opentype_font_data_;
  }
  if (opentype_font_data) {
    set_has_opentype_font_data();
    opentype_font_data_ = opentype_font_data;
  } else {
    clear_has_opentype_font_data();
    opentype_font_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CUIFontFilePackagePB_CUIEncryptedFontFilePB

// optional bytes encrypted_contents = 1;
inline bool CUIFontFilePackagePB_CUIEncryptedFontFilePB::has_encrypted_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_has_encrypted_contents() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::clear_has_encrypted_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::clear_encrypted_contents() {
  if (encrypted_contents_ != &::google::protobuf::internal::kEmptyString) {
    encrypted_contents_->clear();
  }
  clear_has_encrypted_contents();
}
inline const ::std::string& CUIFontFilePackagePB_CUIEncryptedFontFilePB::encrypted_contents() const {
  return *encrypted_contents_;
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_encrypted_contents(const ::std::string& value) {
  set_has_encrypted_contents();
  if (encrypted_contents_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_contents_ = new ::std::string;
  }
  encrypted_contents_->assign(value);
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_encrypted_contents(const char* value) {
  set_has_encrypted_contents();
  if (encrypted_contents_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_contents_ = new ::std::string;
  }
  encrypted_contents_->assign(value);
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_encrypted_contents(const void* value, size_t size) {
  set_has_encrypted_contents();
  if (encrypted_contents_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_contents_ = new ::std::string;
  }
  encrypted_contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CUIFontFilePackagePB_CUIEncryptedFontFilePB::mutable_encrypted_contents() {
  set_has_encrypted_contents();
  if (encrypted_contents_ == &::google::protobuf::internal::kEmptyString) {
    encrypted_contents_ = new ::std::string;
  }
  return encrypted_contents_;
}
inline ::std::string* CUIFontFilePackagePB_CUIEncryptedFontFilePB::release_encrypted_contents() {
  clear_has_encrypted_contents();
  if (encrypted_contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = encrypted_contents_;
    encrypted_contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_allocated_encrypted_contents(::std::string* encrypted_contents) {
  if (encrypted_contents_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_contents_;
  }
  if (encrypted_contents) {
    set_has_encrypted_contents();
    encrypted_contents_ = encrypted_contents;
  } else {
    clear_has_encrypted_contents();
    encrypted_contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CUIFontFilePackagePB

// required uint32 package_version = 1;
inline bool CUIFontFilePackagePB::has_package_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CUIFontFilePackagePB::set_has_package_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CUIFontFilePackagePB::clear_has_package_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CUIFontFilePackagePB::clear_package_version() {
  package_version_ = 0u;
  clear_has_package_version();
}
inline ::google::protobuf::uint32 CUIFontFilePackagePB::package_version() const {
  return package_version_;
}
inline void CUIFontFilePackagePB::set_package_version(::google::protobuf::uint32 value) {
  set_has_package_version();
  package_version_ = value;
}

// repeated .CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2;
inline int CUIFontFilePackagePB::encrypted_font_files_size() const {
  return encrypted_font_files_.size();
}
inline void CUIFontFilePackagePB::clear_encrypted_font_files() {
  encrypted_font_files_.Clear();
}
inline const ::CUIFontFilePackagePB_CUIEncryptedFontFilePB& CUIFontFilePackagePB::encrypted_font_files(int index) const {
  return encrypted_font_files_.Get(index);
}
inline ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* CUIFontFilePackagePB::mutable_encrypted_font_files(int index) {
  return encrypted_font_files_.Mutable(index);
}
inline ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* CUIFontFilePackagePB::add_encrypted_font_files() {
  return encrypted_font_files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >&
CUIFontFilePackagePB::encrypted_font_files() const {
  return encrypted_font_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >*
CUIFontFilePackagePB::mutable_encrypted_font_files() {
  return &encrypted_font_files_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uifontfile_5fformat_2eproto__INCLUDED
