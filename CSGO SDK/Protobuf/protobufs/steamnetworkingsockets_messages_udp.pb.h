// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_udp.proto

#ifndef PROTOBUF_steamnetworkingsockets_5fmessages_5fudp_2eproto__INCLUDED
#define PROTOBUF_steamnetworkingsockets_5fmessages_5fudp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steamnetworkingsockets_messages_certs.pb.h"
#include "steamnetworkingsockets_messages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto();

class CMsgSteamSockets_UDP_ChallengeRequest;
class CMsgSteamSockets_UDP_ChallengeReply;
class CMsgSteamSockets_UDP_ConnectRequest;
class CMsgSteamSockets_UDP_ConnectOK;
class CMsgSteamSockets_UDP_ConnectionClosed;
class CMsgSteamSockets_UDP_NoConnection;
class CMsgSteamSockets_UDP_Stats;

enum CMsgSteamSockets_UDP_Stats_Flags {
  CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamSockets_UDP_Stats_Flags_IsValid(int value);
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats_Flags_Flags_MIN = CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_E2E;
const CMsgSteamSockets_UDP_Stats_Flags CMsgSteamSockets_UDP_Stats_Flags_Flags_MAX = CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamSockets_UDP_Stats_Flags_Flags_ARRAYSIZE = CMsgSteamSockets_UDP_Stats_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamSockets_UDP_Stats_Flags_descriptor();
inline const ::std::string& CMsgSteamSockets_UDP_Stats_Flags_Name(CMsgSteamSockets_UDP_Stats_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamSockets_UDP_Stats_Flags_descriptor(), value);
}
inline bool CMsgSteamSockets_UDP_Stats_Flags_Parse(
    const ::std::string& name, CMsgSteamSockets_UDP_Stats_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamSockets_UDP_Stats_Flags>(
    CMsgSteamSockets_UDP_Stats_Flags_descriptor(), name, value);
}
enum ESteamNetworkingUDPMsgID {
  k_ESteamNetworkingUDPMsg_ChallengeRequest = 32,
  k_ESteamNetworkingUDPMsg_ChallengeReply = 33,
  k_ESteamNetworkingUDPMsg_ConnectRequest = 34,
  k_ESteamNetworkingUDPMsg_ConnectOK = 35,
  k_ESteamNetworkingUDPMsg_ConnectionClosed = 36,
  k_ESteamNetworkingUDPMsg_NoConnection = 37
};
bool ESteamNetworkingUDPMsgID_IsValid(int value);
const ESteamNetworkingUDPMsgID ESteamNetworkingUDPMsgID_MIN = k_ESteamNetworkingUDPMsg_ChallengeRequest;
const ESteamNetworkingUDPMsgID ESteamNetworkingUDPMsgID_MAX = k_ESteamNetworkingUDPMsg_NoConnection;
const int ESteamNetworkingUDPMsgID_ARRAYSIZE = ESteamNetworkingUDPMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESteamNetworkingUDPMsgID_descriptor();
inline const ::std::string& ESteamNetworkingUDPMsgID_Name(ESteamNetworkingUDPMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESteamNetworkingUDPMsgID_descriptor(), value);
}
inline bool ESteamNetworkingUDPMsgID_Parse(
    const ::std::string& name, ESteamNetworkingUDPMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESteamNetworkingUDPMsgID>(
    ESteamNetworkingUDPMsgID_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamSockets_UDP_ChallengeRequest : public ::google::protobuf::Message {
 public:
  CMsgSteamSockets_UDP_ChallengeRequest();
  virtual ~CMsgSteamSockets_UDP_ChallengeRequest();

  CMsgSteamSockets_UDP_ChallengeRequest(const CMsgSteamSockets_UDP_ChallengeRequest& from);

  inline CMsgSteamSockets_UDP_ChallengeRequest& operator=(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ChallengeRequest& default_instance();

  void Swap(CMsgSteamSockets_UDP_ChallengeRequest* other);

  // implements Message ----------------------------------------------

  CMsgSteamSockets_UDP_ChallengeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 my_timestamp = 3;
  inline bool has_my_timestamp() const;
  inline void clear_my_timestamp();
  static const int kMyTimestampFieldNumber = 3;
  inline ::google::protobuf::uint64 my_timestamp() const;
  inline void set_my_timestamp(::google::protobuf::uint64 value);

  // optional uint32 protocol_version = 4;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ChallengeRequest)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_my_timestamp();
  inline void clear_has_my_timestamp();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 my_timestamp_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 protocol_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamSockets_UDP_ChallengeRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_ChallengeReply : public ::google::protobuf::Message {
 public:
  CMsgSteamSockets_UDP_ChallengeReply();
  virtual ~CMsgSteamSockets_UDP_ChallengeReply();

  CMsgSteamSockets_UDP_ChallengeReply(const CMsgSteamSockets_UDP_ChallengeReply& from);

  inline CMsgSteamSockets_UDP_ChallengeReply& operator=(const CMsgSteamSockets_UDP_ChallengeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ChallengeReply& default_instance();

  void Swap(CMsgSteamSockets_UDP_ChallengeReply* other);

  // implements Message ----------------------------------------------

  CMsgSteamSockets_UDP_ChallengeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamSockets_UDP_ChallengeReply& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ChallengeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 challenge = 2;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 2;
  inline ::google::protobuf::uint64 challenge() const;
  inline void set_challenge(::google::protobuf::uint64 value);

  // optional fixed64 your_timestamp = 3;
  inline bool has_your_timestamp() const;
  inline void clear_your_timestamp();
  static const int kYourTimestampFieldNumber = 3;
  inline ::google::protobuf::uint64 your_timestamp() const;
  inline void set_your_timestamp(::google::protobuf::uint64 value);

  // optional uint32 protocol_version = 4;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ChallengeReply)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_challenge();
  inline void clear_has_challenge();
  inline void set_has_your_timestamp();
  inline void clear_has_your_timestamp();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint64 your_timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamSockets_UDP_ChallengeReply* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_ConnectRequest : public ::google::protobuf::Message {
 public:
  CMsgSteamSockets_UDP_ConnectRequest();
  virtual ~CMsgSteamSockets_UDP_ConnectRequest();

  CMsgSteamSockets_UDP_ConnectRequest(const CMsgSteamSockets_UDP_ConnectRequest& from);

  inline CMsgSteamSockets_UDP_ConnectRequest& operator=(const CMsgSteamSockets_UDP_ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ConnectRequest& default_instance();

  void Swap(CMsgSteamSockets_UDP_ConnectRequest* other);

  // implements Message ----------------------------------------------

  CMsgSteamSockets_UDP_ConnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamSockets_UDP_ConnectRequest& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ConnectRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 client_connection_id = 1;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 challenge = 2;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 2;
  inline ::google::protobuf::uint64 challenge() const;
  inline void set_challenge(::google::protobuf::uint64 value);

  // optional fixed64 client_steam_id = 3;
  inline bool has_client_steam_id() const;
  inline void clear_client_steam_id();
  static const int kClientSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 client_steam_id() const;
  inline void set_client_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 my_timestamp = 5;
  inline bool has_my_timestamp() const;
  inline void clear_my_timestamp();
  static const int kMyTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 my_timestamp() const;
  inline void set_my_timestamp(::google::protobuf::uint64 value);

  // optional uint32 ping_est_ms = 6;
  inline bool has_ping_est_ms() const;
  inline void clear_ping_est_ms();
  static const int kPingEstMsFieldNumber = 6;
  inline ::google::protobuf::uint32 ping_est_ms() const;
  inline void set_ping_est_ms(::google::protobuf::uint32 value);

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  inline bool has_crypt() const;
  inline void clear_crypt();
  static const int kCryptFieldNumber = 7;
  inline const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  inline void set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .CMsgSteamDatagramCertificateSigned cert = 4;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 4;
  inline const ::CMsgSteamDatagramCertificateSigned& cert() const;
  inline ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  inline ::CMsgSteamDatagramCertificateSigned* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional uint32 protocol_version = 8;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 8;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectRequest)
 private:
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_challenge();
  inline void clear_has_challenge();
  inline void set_has_client_steam_id();
  inline void clear_has_client_steam_id();
  inline void set_has_my_timestamp();
  inline void clear_has_my_timestamp();
  inline void set_has_ping_est_ms();
  inline void clear_has_ping_est_ms();
  inline void set_has_crypt();
  inline void clear_has_crypt();
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint64 client_steam_id_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 ping_est_ms_;
  ::google::protobuf::uint64 my_timestamp_;
  ::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::CMsgSteamDatagramCertificateSigned* cert_;
  ::google::protobuf::uint32 protocol_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamSockets_UDP_ConnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_ConnectOK : public ::google::protobuf::Message {
 public:
  CMsgSteamSockets_UDP_ConnectOK();
  virtual ~CMsgSteamSockets_UDP_ConnectOK();

  CMsgSteamSockets_UDP_ConnectOK(const CMsgSteamSockets_UDP_ConnectOK& from);

  inline CMsgSteamSockets_UDP_ConnectOK& operator=(const CMsgSteamSockets_UDP_ConnectOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ConnectOK& default_instance();

  void Swap(CMsgSteamSockets_UDP_ConnectOK* other);

  // implements Message ----------------------------------------------

  CMsgSteamSockets_UDP_ConnectOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamSockets_UDP_ConnectOK& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ConnectOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 client_connection_id = 1;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 5;
  inline bool has_server_connection_id() const;
  inline void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 5;
  inline ::google::protobuf::uint32 server_connection_id() const;
  inline void set_server_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 server_steam_id = 2;
  inline bool has_server_steam_id() const;
  inline void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 server_steam_id() const;
  inline void set_server_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 your_timestamp = 3;
  inline bool has_your_timestamp() const;
  inline void clear_your_timestamp();
  static const int kYourTimestampFieldNumber = 3;
  inline ::google::protobuf::uint64 your_timestamp() const;
  inline void set_your_timestamp(::google::protobuf::uint64 value);

  // optional uint32 delay_time_usec = 4;
  inline bool has_delay_time_usec() const;
  inline void clear_delay_time_usec();
  static const int kDelayTimeUsecFieldNumber = 4;
  inline ::google::protobuf::uint32 delay_time_usec() const;
  inline void set_delay_time_usec(::google::protobuf::uint32 value);

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  inline bool has_crypt() const;
  inline void clear_crypt();
  static const int kCryptFieldNumber = 7;
  inline const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  inline void set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .CMsgSteamDatagramCertificateSigned cert = 8;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 8;
  inline const ::CMsgSteamDatagramCertificateSigned& cert() const;
  inline ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  inline ::CMsgSteamDatagramCertificateSigned* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional uint32 protocol_version = 9;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 9;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectOK)
 private:
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_server_connection_id();
  inline void clear_has_server_connection_id();
  inline void set_has_server_steam_id();
  inline void clear_has_server_steam_id();
  inline void set_has_your_timestamp();
  inline void clear_has_your_timestamp();
  inline void set_has_delay_time_usec();
  inline void clear_has_delay_time_usec();
  inline void set_has_crypt();
  inline void clear_has_crypt();
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 server_connection_id_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 your_timestamp_;
  ::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::google::protobuf::uint32 delay_time_usec_;
  ::google::protobuf::uint32 protocol_version_;
  ::CMsgSteamDatagramCertificateSigned* cert_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamSockets_UDP_ConnectOK* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_ConnectionClosed : public ::google::protobuf::Message {
 public:
  CMsgSteamSockets_UDP_ConnectionClosed();
  virtual ~CMsgSteamSockets_UDP_ConnectionClosed();

  CMsgSteamSockets_UDP_ConnectionClosed(const CMsgSteamSockets_UDP_ConnectionClosed& from);

  inline CMsgSteamSockets_UDP_ConnectionClosed& operator=(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_ConnectionClosed& default_instance();

  void Swap(CMsgSteamSockets_UDP_ConnectionClosed* other);

  // implements Message ----------------------------------------------

  CMsgSteamSockets_UDP_ConnectionClosed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from);
  void MergeFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 to_connection_id = 4;
  inline bool has_to_connection_id() const;
  inline void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 to_connection_id() const;
  inline void set_to_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 5;
  inline bool has_from_connection_id() const;
  inline void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 5;
  inline ::google::protobuf::uint32 from_connection_id() const;
  inline void set_from_connection_id(::google::protobuf::uint32 value);

  // optional string debug = 2;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 2;
  inline const ::std::string& debug() const;
  inline void set_debug(const ::std::string& value);
  inline void set_debug(const char* value);
  inline void set_debug(const char* value, size_t size);
  inline ::std::string* mutable_debug();
  inline ::std::string* release_debug();
  inline void set_allocated_debug(::std::string* debug);

  // optional uint32 reason_code = 3;
  inline bool has_reason_code() const;
  inline void clear_reason_code();
  static const int kReasonCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 reason_code() const;
  inline void set_reason_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_ConnectionClosed)
 private:
  inline void set_has_to_connection_id();
  inline void clear_has_to_connection_id();
  inline void set_has_from_connection_id();
  inline void clear_has_from_connection_id();
  inline void set_has_debug();
  inline void clear_has_debug();
  inline void set_has_reason_code();
  inline void clear_has_reason_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 from_connection_id_;
  ::std::string* debug_;
  ::google::protobuf::uint32 reason_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamSockets_UDP_ConnectionClosed* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_NoConnection : public ::google::protobuf::Message {
 public:
  CMsgSteamSockets_UDP_NoConnection();
  virtual ~CMsgSteamSockets_UDP_NoConnection();

  CMsgSteamSockets_UDP_NoConnection(const CMsgSteamSockets_UDP_NoConnection& from);

  inline CMsgSteamSockets_UDP_NoConnection& operator=(const CMsgSteamSockets_UDP_NoConnection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_NoConnection& default_instance();

  void Swap(CMsgSteamSockets_UDP_NoConnection* other);

  // implements Message ----------------------------------------------

  CMsgSteamSockets_UDP_NoConnection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamSockets_UDP_NoConnection& from);
  void MergeFrom(const CMsgSteamSockets_UDP_NoConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 from_connection_id = 2;
  inline bool has_from_connection_id() const;
  inline void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 from_connection_id() const;
  inline void set_from_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 to_connection_id = 3;
  inline bool has_to_connection_id() const;
  inline void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 to_connection_id() const;
  inline void set_to_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_NoConnection)
 private:
  inline void set_has_from_connection_id();
  inline void clear_has_from_connection_id();
  inline void set_has_to_connection_id();
  inline void clear_has_to_connection_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint32 to_connection_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamSockets_UDP_NoConnection* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamSockets_UDP_Stats : public ::google::protobuf::Message {
 public:
  CMsgSteamSockets_UDP_Stats();
  virtual ~CMsgSteamSockets_UDP_Stats();

  CMsgSteamSockets_UDP_Stats(const CMsgSteamSockets_UDP_Stats& from);

  inline CMsgSteamSockets_UDP_Stats& operator=(const CMsgSteamSockets_UDP_Stats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamSockets_UDP_Stats& default_instance();

  void Swap(CMsgSteamSockets_UDP_Stats* other);

  // implements Message ----------------------------------------------

  CMsgSteamSockets_UDP_Stats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamSockets_UDP_Stats& from);
  void MergeFrom(const CMsgSteamSockets_UDP_Stats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamSockets_UDP_Stats_Flags Flags;
  static const Flags ACK_REQUEST_E2E = CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE = CMsgSteamSockets_UDP_Stats_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamSockets_UDP_Stats_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamSockets_UDP_Stats_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamSockets_UDP_Stats_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamSockets_UDP_Stats_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamSockets_UDP_Stats_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamSockets_UDP_Stats_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamSockets_UDP_Stats_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality stats = 1;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 1;
  inline const ::CMsgSteamDatagramConnectionQuality& stats() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_stats();
  inline ::CMsgSteamDatagramConnectionQuality* release_stats();
  inline void set_allocated_stats(::CMsgSteamDatagramConnectionQuality* stats);

  // optional uint32 flags = 3;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional fixed32 to_connection_id = 9;
  inline bool has_to_connection_id() const;
  inline void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 9;
  inline ::google::protobuf::uint32 to_connection_id() const;
  inline void set_to_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 10;
  inline bool has_from_connection_id() const;
  inline void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 10;
  inline ::google::protobuf::uint32 from_connection_id() const;
  inline void set_from_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num = 4;
  inline bool has_seq_num() const;
  inline void clear_seq_num();
  static const int kSeqNumFieldNumber = 4;
  inline ::google::protobuf::uint32 seq_num() const;
  inline void set_seq_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamSockets_UDP_Stats)
 private:
  inline void set_has_stats();
  inline void clear_has_stats();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_to_connection_id();
  inline void clear_has_to_connection_id();
  inline void set_has_from_connection_id();
  inline void clear_has_from_connection_id();
  inline void set_has_seq_num();
  inline void clear_has_seq_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramConnectionQuality* stats_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint32 seq_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fudp_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fudp_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamSockets_UDP_Stats* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgSteamSockets_UDP_ChallengeRequest

// optional fixed32 connection_id = 1;
inline bool CMsgSteamSockets_UDP_ChallengeRequest::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ChallengeRequest::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional fixed64 my_timestamp = 3;
inline bool CMsgSteamSockets_UDP_ChallengeRequest::has_my_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_has_my_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_has_my_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_my_timestamp() {
  my_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_my_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ChallengeRequest::my_timestamp() const {
  return my_timestamp_;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_my_timestamp(::google::protobuf::uint64 value) {
  set_has_my_timestamp();
  my_timestamp_ = value;
}

// optional uint32 protocol_version = 4;
inline bool CMsgSteamSockets_UDP_ChallengeRequest::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ChallengeRequest::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_ChallengeReply

// optional fixed32 connection_id = 1;
inline bool CMsgSteamSockets_UDP_ChallengeReply::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ChallengeReply::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional fixed64 challenge = 2;
inline bool CMsgSteamSockets_UDP_ChallengeReply::has_challenge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_has_challenge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_challenge() {
  challenge_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ChallengeReply::challenge() const {
  return challenge_;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_challenge(::google::protobuf::uint64 value) {
  set_has_challenge();
  challenge_ = value;
}

// optional fixed64 your_timestamp = 3;
inline bool CMsgSteamSockets_UDP_ChallengeReply::has_your_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_has_your_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_has_your_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_your_timestamp() {
  your_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_your_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ChallengeReply::your_timestamp() const {
  return your_timestamp_;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_your_timestamp(::google::protobuf::uint64 value) {
  set_has_your_timestamp();
  your_timestamp_ = value;
}

// optional uint32 protocol_version = 4;
inline bool CMsgSteamSockets_UDP_ChallengeReply::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ChallengeReply::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamSockets_UDP_ChallengeReply::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_ConnectRequest

// optional fixed32 client_connection_id = 1;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectRequest::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional fixed64 challenge = 2;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_challenge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_challenge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_challenge() {
  challenge_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectRequest::challenge() const {
  return challenge_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_challenge(::google::protobuf::uint64 value) {
  set_has_challenge();
  challenge_ = value;
}

// optional fixed64 client_steam_id = 3;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_client_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_client_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_client_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_client_steam_id() {
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectRequest::client_steam_id() const {
  return client_steam_id_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_client_steam_id(::google::protobuf::uint64 value) {
  set_has_client_steam_id();
  client_steam_id_ = value;
}

// optional fixed64 my_timestamp = 5;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_my_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_my_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_my_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_my_timestamp() {
  my_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_my_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectRequest::my_timestamp() const {
  return my_timestamp_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_my_timestamp(::google::protobuf::uint64 value) {
  set_has_my_timestamp();
  my_timestamp_ = value;
}

// optional uint32 ping_est_ms = 6;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_ping_est_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_ping_est_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_ping_est_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_ping_est_ms() {
  ping_est_ms_ = 0u;
  clear_has_ping_est_ms();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectRequest::ping_est_ms() const {
  return ping_est_ms_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_ping_est_ms(::google::protobuf::uint32 value) {
  set_has_ping_est_ms();
  ping_est_ms_ = value;
}

// optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_crypt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_crypt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_crypt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_crypt() {
  if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
  clear_has_crypt();
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamSockets_UDP_ConnectRequest::crypt() const {
  return crypt_ != NULL ? *crypt_ : *default_instance_->crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamSockets_UDP_ConnectRequest::mutable_crypt() {
  set_has_crypt();
  if (crypt_ == NULL) crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned;
  return crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamSockets_UDP_ConnectRequest::release_crypt() {
  clear_has_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = NULL;
  return temp;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  delete crypt_;
  crypt_ = crypt;
  if (crypt) {
    set_has_crypt();
  } else {
    clear_has_crypt();
  }
}

// optional .CMsgSteamDatagramCertificateSigned cert = 4;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_cert() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_cert() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_cert() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamSockets_UDP_ConnectRequest::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamSockets_UDP_ConnectRequest::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificateSigned;
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamSockets_UDP_ConnectRequest::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}

// optional uint32 protocol_version = 8;
inline bool CMsgSteamSockets_UDP_ConnectRequest::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectRequest::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamSockets_UDP_ConnectRequest::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_ConnectOK

// optional fixed32 client_connection_id = 1;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectOK::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional fixed32 server_connection_id = 5;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_server_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_server_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_server_connection_id() {
  server_connection_id_ = 0u;
  clear_has_server_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectOK::server_connection_id() const {
  return server_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_server_connection_id(::google::protobuf::uint32 value) {
  set_has_server_connection_id();
  server_connection_id_ = value;
}

// optional fixed64 server_steam_id = 2;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectOK::server_steam_id() const {
  return server_steam_id_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
}

// optional fixed64 your_timestamp = 3;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_your_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_your_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_your_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_your_timestamp() {
  your_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_your_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamSockets_UDP_ConnectOK::your_timestamp() const {
  return your_timestamp_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_your_timestamp(::google::protobuf::uint64 value) {
  set_has_your_timestamp();
  your_timestamp_ = value;
}

// optional uint32 delay_time_usec = 4;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_delay_time_usec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_delay_time_usec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_delay_time_usec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_delay_time_usec() {
  delay_time_usec_ = 0u;
  clear_has_delay_time_usec();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectOK::delay_time_usec() const {
  return delay_time_usec_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_delay_time_usec(::google::protobuf::uint32 value) {
  set_has_delay_time_usec();
  delay_time_usec_ = value;
}

// optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_crypt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_crypt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_crypt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_crypt() {
  if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
  clear_has_crypt();
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamSockets_UDP_ConnectOK::crypt() const {
  return crypt_ != NULL ? *crypt_ : *default_instance_->crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamSockets_UDP_ConnectOK::mutable_crypt() {
  set_has_crypt();
  if (crypt_ == NULL) crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned;
  return crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamSockets_UDP_ConnectOK::release_crypt() {
  clear_has_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = NULL;
  return temp;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  delete crypt_;
  crypt_ = crypt;
  if (crypt) {
    set_has_crypt();
  } else {
    clear_has_crypt();
  }
}

// optional .CMsgSteamDatagramCertificateSigned cert = 8;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_cert() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_cert() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_cert() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamSockets_UDP_ConnectOK::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamSockets_UDP_ConnectOK::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificateSigned;
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamSockets_UDP_ConnectOK::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}

// optional uint32 protocol_version = 9;
inline bool CMsgSteamSockets_UDP_ConnectOK::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamSockets_UDP_ConnectOK::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectOK::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamSockets_UDP_ConnectOK::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_ConnectionClosed

// optional fixed32 to_connection_id = 4;
inline bool CMsgSteamSockets_UDP_ConnectionClosed::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectionClosed::to_connection_id() const {
  return to_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
}

// optional fixed32 from_connection_id = 5;
inline bool CMsgSteamSockets_UDP_ConnectionClosed::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectionClosed::from_connection_id() const {
  return from_connection_id_;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
}

// optional string debug = 2;
inline bool CMsgSteamSockets_UDP_ConnectionClosed::has_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_has_debug() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_has_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_debug() {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    debug_->clear();
  }
  clear_has_debug();
}
inline const ::std::string& CMsgSteamSockets_UDP_ConnectionClosed::debug() const {
  return *debug_;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_debug(const ::std::string& value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_debug(const char* value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_debug(const char* value, size_t size) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamSockets_UDP_ConnectionClosed::mutable_debug() {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  return debug_;
}
inline ::std::string* CMsgSteamSockets_UDP_ConnectionClosed::release_debug() {
  clear_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_;
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_allocated_debug(::std::string* debug) {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (debug) {
    set_has_debug();
    debug_ = debug;
  } else {
    clear_has_debug();
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 reason_code = 3;
inline bool CMsgSteamSockets_UDP_ConnectionClosed::has_reason_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_has_reason_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::clear_reason_code() {
  reason_code_ = 0u;
  clear_has_reason_code();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_ConnectionClosed::reason_code() const {
  return reason_code_;
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::set_reason_code(::google::protobuf::uint32 value) {
  set_has_reason_code();
  reason_code_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_NoConnection

// optional fixed32 from_connection_id = 2;
inline bool CMsgSteamSockets_UDP_NoConnection::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_NoConnection::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_NoConnection::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_NoConnection::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_NoConnection::from_connection_id() const {
  return from_connection_id_;
}
inline void CMsgSteamSockets_UDP_NoConnection::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
}

// optional fixed32 to_connection_id = 3;
inline bool CMsgSteamSockets_UDP_NoConnection::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_NoConnection::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_NoConnection::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_NoConnection::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_NoConnection::to_connection_id() const {
  return to_connection_id_;
}
inline void CMsgSteamSockets_UDP_NoConnection::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamSockets_UDP_Stats

// optional .CMsgSteamDatagramConnectionQuality stats = 1;
inline bool CMsgSteamSockets_UDP_Stats::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_stats() {
  if (stats_ != NULL) stats_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_stats();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamSockets_UDP_Stats::stats() const {
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamSockets_UDP_Stats::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::CMsgSteamDatagramConnectionQuality;
  return stats_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamSockets_UDP_Stats::release_stats() {
  clear_has_stats();
  ::CMsgSteamDatagramConnectionQuality* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void CMsgSteamSockets_UDP_Stats::set_allocated_stats(::CMsgSteamDatagramConnectionQuality* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
}

// optional uint32 flags = 3;
inline bool CMsgSteamSockets_UDP_Stats::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_Stats::flags() const {
  return flags_;
}
inline void CMsgSteamSockets_UDP_Stats::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional fixed32 to_connection_id = 9;
inline bool CMsgSteamSockets_UDP_Stats::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_Stats::to_connection_id() const {
  return to_connection_id_;
}
inline void CMsgSteamSockets_UDP_Stats::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
}

// optional fixed32 from_connection_id = 10;
inline bool CMsgSteamSockets_UDP_Stats::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_Stats::from_connection_id() const {
  return from_connection_id_;
}
inline void CMsgSteamSockets_UDP_Stats::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
}

// optional uint32 seq_num = 4;
inline bool CMsgSteamSockets_UDP_Stats::has_seq_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamSockets_UDP_Stats::set_has_seq_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_has_seq_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamSockets_UDP_Stats::clear_seq_num() {
  seq_num_ = 0u;
  clear_has_seq_num();
}
inline ::google::protobuf::uint32 CMsgSteamSockets_UDP_Stats::seq_num() const {
  return seq_num_;
}
inline void CMsgSteamSockets_UDP_Stats::set_seq_num(::google::protobuf::uint32 value) {
  set_has_seq_num();
  seq_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamSockets_UDP_Stats_Flags>() {
  return ::CMsgSteamSockets_UDP_Stats_Flags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamNetworkingUDPMsgID>() {
  return ::ESteamNetworkingUDPMsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steamnetworkingsockets_5fmessages_5fudp_2eproto__INCLUDED
