// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages.proto

#ifndef PROTOBUF_steamnetworkingsockets_5fmessages_2eproto__INCLUDED
#define PROTOBUF_steamnetworkingsockets_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

class CMsgSteamDatagramRouterPingReply;
class CMsgSteamDatagramRouterPingReply_RouteException;
class CMsgSteamDatagramSessionCryptInfo;
class CMsgSteamDatagramSessionCryptInfoSigned;
class CMsgSteamDatagramDiagnostic;
class CMsgSteamDatagramLinkInstantaneousStats;
class CMsgSteamDatagramLinkLifetimeStats;
class CMsgSteamDatagramConnectionQuality;

enum CMsgSteamDatagramSessionCryptInfo_EKeyType {
  CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID = 0,
  CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519 = 1
};
bool CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(int value);
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MIN = CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX = CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519;
const int CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_ARRAYSIZE = CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
inline const ::std::string& CMsgSteamDatagramSessionCryptInfo_EKeyType_Name(CMsgSteamDatagramSessionCryptInfo_EKeyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor(), value);
}
inline bool CMsgSteamDatagramSessionCryptInfo_EKeyType_Parse(
    const ::std::string& name, CMsgSteamDatagramSessionCryptInfo_EKeyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramSessionCryptInfo_EKeyType>(
    CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor(), name, value);
}
enum ESteamDatagramMsgID {
  k_ESteamDatagramMsg_Invalid = 0,
  k_ESteamDatagramMsg_RouterPingRequest = 1,
  k_ESteamDatagramMsg_RouterPingReply = 2,
  k_ESteamDatagramMsg_GameserverPingRequest = 3,
  k_ESteamDatagramMsg_GameserverPingReply = 4,
  k_ESteamDatagramMsg_GameserverSessionRequest = 5,
  k_ESteamDatagramMsg_GameserverSessionEstablished = 6,
  k_ESteamDatagramMsg_NoSession = 7,
  k_ESteamDatagramMsg_Diagnostic = 8,
  k_ESteamDatagramMsg_DataClientToRouter = 9,
  k_ESteamDatagramMsg_DataRouterToServer = 10,
  k_ESteamDatagramMsg_DataServerToRouter = 11,
  k_ESteamDatagramMsg_DataRouterToClient = 12,
  k_ESteamDatagramMsg_Stats = 13,
  k_ESteamDatagramMsg_ClientPingSampleRequest = 14,
  k_ESteamDatagramMsg_ClientPingSampleReply = 15,
  k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary = 16,
  k_ESteamDatagramMsg_RelayHealth = 17,
  k_ESteamDatagramMsg_ConnectRequest = 18,
  k_ESteamDatagramMsg_ConnectOK = 19,
  k_ESteamDatagramMsg_ConnectionClosed = 20,
  k_ESteamDatagramMsg_NoConnection = 21,
  k_ESteamDatagramMsg_RelayToRelayPingRequest = 22,
  k_ESteamDatagramMsg_RelayToRelayPingReply = 23,
  k_ESteamDatagramMsg_P2PSessionRequest = 24,
  k_ESteamDatagramMsg_P2PSessionEstablished = 25,
  k_ESteamDatagramMsg_P2PStatsClient = 26,
  k_ESteamDatagramMsg_P2PStatsRelay = 27,
  k_ESteamDatagramMsg_P2PBadRoute = 28
};
bool ESteamDatagramMsgID_IsValid(int value);
const ESteamDatagramMsgID ESteamDatagramMsgID_MIN = k_ESteamDatagramMsg_Invalid;
const ESteamDatagramMsgID ESteamDatagramMsgID_MAX = k_ESteamDatagramMsg_P2PBadRoute;
const int ESteamDatagramMsgID_ARRAYSIZE = ESteamDatagramMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor();
inline const ::std::string& ESteamDatagramMsgID_Name(ESteamDatagramMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESteamDatagramMsgID_descriptor(), value);
}
inline bool ESteamDatagramMsgID_Parse(
    const ::std::string& name, ESteamDatagramMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESteamDatagramMsgID>(
    ESteamDatagramMsgID_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamDatagramRouterPingReply_RouteException : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramRouterPingReply_RouteException();
  virtual ~CMsgSteamDatagramRouterPingReply_RouteException();

  CMsgSteamDatagramRouterPingReply_RouteException(const CMsgSteamDatagramRouterPingReply_RouteException& from);

  inline CMsgSteamDatagramRouterPingReply_RouteException& operator=(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramRouterPingReply_RouteException& default_instance();

  void Swap(CMsgSteamDatagramRouterPingReply_RouteException* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramRouterPingReply_RouteException* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from);
  void MergeFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 data_center_id = 1;
  inline bool has_data_center_id() const;
  inline void clear_data_center_id();
  static const int kDataCenterIdFieldNumber = 1;
  inline ::google::protobuf::uint32 data_center_id() const;
  inline void set_data_center_id(::google::protobuf::uint32 value);

  // optional uint32 flags = 2;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 2;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 penalty = 3;
  inline bool has_penalty() const;
  inline void clear_penalty();
  static const int kPenaltyFieldNumber = 3;
  inline ::google::protobuf::uint32 penalty() const;
  inline void set_penalty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRouterPingReply.RouteException)
 private:
  inline void set_has_data_center_id();
  inline void clear_has_data_center_id();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_penalty();
  inline void clear_has_penalty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 data_center_id_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 penalty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramRouterPingReply_RouteException* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRouterPingReply : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramRouterPingReply();
  virtual ~CMsgSteamDatagramRouterPingReply();

  CMsgSteamDatagramRouterPingReply(const CMsgSteamDatagramRouterPingReply& from);

  inline CMsgSteamDatagramRouterPingReply& operator=(const CMsgSteamDatagramRouterPingReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramRouterPingReply& default_instance();

  void Swap(CMsgSteamDatagramRouterPingReply* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramRouterPingReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramRouterPingReply& from);
  void MergeFrom(const CMsgSteamDatagramRouterPingReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramRouterPingReply_RouteException RouteException;

  // accessors -------------------------------------------------------

  // optional fixed32 client_timestamp = 1;
  inline bool has_client_timestamp() const;
  inline void clear_client_timestamp();
  static const int kClientTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 client_timestamp() const;
  inline void set_client_timestamp(::google::protobuf::uint32 value);

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  inline int latency_datacenter_ids_size() const;
  inline void clear_latency_datacenter_ids();
  static const int kLatencyDatacenterIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 latency_datacenter_ids(int index) const;
  inline void set_latency_datacenter_ids(int index, ::google::protobuf::uint32 value);
  inline void add_latency_datacenter_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      latency_datacenter_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_latency_datacenter_ids();

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  inline int latency_ping_ms_size() const;
  inline void clear_latency_ping_ms();
  static const int kLatencyPingMsFieldNumber = 3;
  inline ::google::protobuf::uint32 latency_ping_ms(int index) const;
  inline void set_latency_ping_ms(int index, ::google::protobuf::uint32 value);
  inline void add_latency_ping_ms(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      latency_ping_ms() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_latency_ping_ms();

  // optional fixed32 your_public_ip = 4;
  inline bool has_your_public_ip() const;
  inline void clear_your_public_ip();
  static const int kYourPublicIpFieldNumber = 4;
  inline ::google::protobuf::uint32 your_public_ip() const;
  inline void set_your_public_ip(::google::protobuf::uint32 value);

  // optional fixed32 server_time = 5;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 server_time() const;
  inline void set_server_time(::google::protobuf::uint32 value);

  // optional fixed64 challenge = 6;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 6;
  inline ::google::protobuf::uint64 challenge() const;
  inline void set_challenge(::google::protobuf::uint64 value);

  // optional uint32 seconds_until_shutdown = 7;
  inline bool has_seconds_until_shutdown() const;
  inline void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 7;
  inline ::google::protobuf::uint32 seconds_until_shutdown() const;
  inline void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional fixed32 client_cookie = 8;
  inline bool has_client_cookie() const;
  inline void clear_client_cookie();
  static const int kClientCookieFieldNumber = 8;
  inline ::google::protobuf::uint32 client_cookie() const;
  inline void set_client_cookie(::google::protobuf::uint32 value);

  // optional uint32 scoring_penalty_relay_cluster = 9;
  inline bool has_scoring_penalty_relay_cluster() const;
  inline void clear_scoring_penalty_relay_cluster();
  static const int kScoringPenaltyRelayClusterFieldNumber = 9;
  inline ::google::protobuf::uint32 scoring_penalty_relay_cluster() const;
  inline void set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value);

  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  inline int route_exceptions_size() const;
  inline void clear_route_exceptions();
  static const int kRouteExceptionsFieldNumber = 10;
  inline const ::CMsgSteamDatagramRouterPingReply_RouteException& route_exceptions(int index) const;
  inline ::CMsgSteamDatagramRouterPingReply_RouteException* mutable_route_exceptions(int index);
  inline ::CMsgSteamDatagramRouterPingReply_RouteException* add_route_exceptions();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterPingReply_RouteException >&
      route_exceptions() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterPingReply_RouteException >*
      mutable_route_exceptions();

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRouterPingReply)
 private:
  inline void set_has_client_timestamp();
  inline void clear_has_client_timestamp();
  inline void set_has_your_public_ip();
  inline void clear_has_your_public_ip();
  inline void set_has_server_time();
  inline void clear_has_server_time();
  inline void set_has_challenge();
  inline void clear_has_challenge();
  inline void set_has_seconds_until_shutdown();
  inline void clear_has_seconds_until_shutdown();
  inline void set_has_client_cookie();
  inline void clear_has_client_cookie();
  inline void set_has_scoring_penalty_relay_cluster();
  inline void clear_has_scoring_penalty_relay_cluster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > latency_datacenter_ids_;
  mutable int _latency_datacenter_ids_cached_byte_size_;
  ::google::protobuf::uint32 client_timestamp_;
  ::google::protobuf::uint32 your_public_ip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > latency_ping_ms_;
  mutable int _latency_ping_ms_cached_byte_size_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 server_time_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 client_cookie_;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterPingReply_RouteException > route_exceptions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramRouterPingReply* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSessionCryptInfo : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramSessionCryptInfo();
  virtual ~CMsgSteamDatagramSessionCryptInfo();

  CMsgSteamDatagramSessionCryptInfo(const CMsgSteamDatagramSessionCryptInfo& from);

  inline CMsgSteamDatagramSessionCryptInfo& operator=(const CMsgSteamDatagramSessionCryptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramSessionCryptInfo& default_instance();

  void Swap(CMsgSteamDatagramSessionCryptInfo* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramSessionCryptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramSessionCryptInfo& from);
  void MergeFrom(const CMsgSteamDatagramSessionCryptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramSessionCryptInfo_EKeyType EKeyType;
  static const EKeyType INVALID = CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID;
  static const EKeyType CURVE25519 = CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519;
  static inline bool EKeyType_IsValid(int value) {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value);
  }
  static const EKeyType EKeyType_MIN =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MIN;
  static const EKeyType EKeyType_MAX =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX;
  static const int EKeyType_ARRAYSIZE =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EKeyType_descriptor() {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
  }
  static inline const ::std::string& EKeyType_Name(EKeyType value) {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_Name(value);
  }
  static inline bool EKeyType_Parse(const ::std::string& name,
      EKeyType* value) {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
  inline bool has_key_type() const;
  inline void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  inline ::CMsgSteamDatagramSessionCryptInfo_EKeyType key_type() const;
  inline void set_key_type(::CMsgSteamDatagramSessionCryptInfo_EKeyType value);

  // optional bytes key_data = 2;
  inline bool has_key_data() const;
  inline void clear_key_data();
  static const int kKeyDataFieldNumber = 2;
  inline const ::std::string& key_data() const;
  inline void set_key_data(const ::std::string& value);
  inline void set_key_data(const char* value);
  inline void set_key_data(const void* value, size_t size);
  inline ::std::string* mutable_key_data();
  inline ::std::string* release_key_data();
  inline void set_allocated_key_data(::std::string* key_data);

  // optional fixed64 nonce = 3;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 3;
  inline ::google::protobuf::uint64 nonce() const;
  inline void set_nonce(::google::protobuf::uint64 value);

  // optional bool is_snp = 4;
  inline bool has_is_snp() const;
  inline void clear_is_snp();
  static const int kIsSnpFieldNumber = 4;
  inline bool is_snp() const;
  inline void set_is_snp(bool value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSessionCryptInfo)
 private:
  inline void set_has_key_type();
  inline void clear_has_key_type();
  inline void set_has_key_data();
  inline void clear_has_key_data();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_is_snp();
  inline void clear_has_is_snp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_data_;
  int key_type_;
  bool is_snp_;
  ::google::protobuf::uint64 nonce_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramSessionCryptInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSessionCryptInfoSigned : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramSessionCryptInfoSigned();
  virtual ~CMsgSteamDatagramSessionCryptInfoSigned();

  CMsgSteamDatagramSessionCryptInfoSigned(const CMsgSteamDatagramSessionCryptInfoSigned& from);

  inline CMsgSteamDatagramSessionCryptInfoSigned& operator=(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramSessionCryptInfoSigned& default_instance();

  void Swap(CMsgSteamDatagramSessionCryptInfoSigned* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramSessionCryptInfoSigned* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from);
  void MergeFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const void* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional bytes signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSessionCryptInfoSigned)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* info_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramSessionCryptInfoSigned* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDiagnostic : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramDiagnostic();
  virtual ~CMsgSteamDatagramDiagnostic();

  CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from);

  inline CMsgSteamDatagramDiagnostic& operator=(const CMsgSteamDatagramDiagnostic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramDiagnostic& default_instance();

  void Swap(CMsgSteamDatagramDiagnostic* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramDiagnostic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramDiagnostic& from);
  void MergeFrom(const CMsgSteamDatagramDiagnostic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 severity = 1;
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 1;
  inline ::google::protobuf::uint32 severity() const;
  inline void set_severity(::google::protobuf::uint32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramDiagnostic)
 private:
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::google::protobuf::uint32 severity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramDiagnostic* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramLinkInstantaneousStats : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramLinkInstantaneousStats();
  virtual ~CMsgSteamDatagramLinkInstantaneousStats();

  CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from);

  inline CMsgSteamDatagramLinkInstantaneousStats& operator=(const CMsgSteamDatagramLinkInstantaneousStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramLinkInstantaneousStats& default_instance();

  void Swap(CMsgSteamDatagramLinkInstantaneousStats* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramLinkInstantaneousStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from);
  void MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 out_packets_per_sec_x10 = 1;
  inline bool has_out_packets_per_sec_x10() const;
  inline void clear_out_packets_per_sec_x10();
  static const int kOutPacketsPerSecX10FieldNumber = 1;
  inline ::google::protobuf::uint32 out_packets_per_sec_x10() const;
  inline void set_out_packets_per_sec_x10(::google::protobuf::uint32 value);

  // optional uint32 out_bytes_per_sec = 2;
  inline bool has_out_bytes_per_sec() const;
  inline void clear_out_bytes_per_sec();
  static const int kOutBytesPerSecFieldNumber = 2;
  inline ::google::protobuf::uint32 out_bytes_per_sec() const;
  inline void set_out_bytes_per_sec(::google::protobuf::uint32 value);

  // optional uint32 in_packets_per_sec_x10 = 3;
  inline bool has_in_packets_per_sec_x10() const;
  inline void clear_in_packets_per_sec_x10();
  static const int kInPacketsPerSecX10FieldNumber = 3;
  inline ::google::protobuf::uint32 in_packets_per_sec_x10() const;
  inline void set_in_packets_per_sec_x10(::google::protobuf::uint32 value);

  // optional uint32 in_bytes_per_sec = 4;
  inline bool has_in_bytes_per_sec() const;
  inline void clear_in_bytes_per_sec();
  static const int kInBytesPerSecFieldNumber = 4;
  inline ::google::protobuf::uint32 in_bytes_per_sec() const;
  inline void set_in_bytes_per_sec(::google::protobuf::uint32 value);

  // optional uint32 ping_ms = 5;
  inline bool has_ping_ms() const;
  inline void clear_ping_ms();
  static const int kPingMsFieldNumber = 5;
  inline ::google::protobuf::uint32 ping_ms() const;
  inline void set_ping_ms(::google::protobuf::uint32 value);

  // optional uint32 packets_dropped_pct = 6;
  inline bool has_packets_dropped_pct() const;
  inline void clear_packets_dropped_pct();
  static const int kPacketsDroppedPctFieldNumber = 6;
  inline ::google::protobuf::uint32 packets_dropped_pct() const;
  inline void set_packets_dropped_pct(::google::protobuf::uint32 value);

  // optional uint32 packets_weird_sequence_pct = 7;
  inline bool has_packets_weird_sequence_pct() const;
  inline void clear_packets_weird_sequence_pct();
  static const int kPacketsWeirdSequencePctFieldNumber = 7;
  inline ::google::protobuf::uint32 packets_weird_sequence_pct() const;
  inline void set_packets_weird_sequence_pct(::google::protobuf::uint32 value);

  // optional uint32 peak_jitter_usec = 8;
  inline bool has_peak_jitter_usec() const;
  inline void clear_peak_jitter_usec();
  static const int kPeakJitterUsecFieldNumber = 8;
  inline ::google::protobuf::uint32 peak_jitter_usec() const;
  inline void set_peak_jitter_usec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramLinkInstantaneousStats)
 private:
  inline void set_has_out_packets_per_sec_x10();
  inline void clear_has_out_packets_per_sec_x10();
  inline void set_has_out_bytes_per_sec();
  inline void clear_has_out_bytes_per_sec();
  inline void set_has_in_packets_per_sec_x10();
  inline void clear_has_in_packets_per_sec_x10();
  inline void set_has_in_bytes_per_sec();
  inline void clear_has_in_bytes_per_sec();
  inline void set_has_ping_ms();
  inline void clear_has_ping_ms();
  inline void set_has_packets_dropped_pct();
  inline void clear_has_packets_dropped_pct();
  inline void set_has_packets_weird_sequence_pct();
  inline void clear_has_packets_weird_sequence_pct();
  inline void set_has_peak_jitter_usec();
  inline void clear_has_peak_jitter_usec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 out_packets_per_sec_x10_;
  ::google::protobuf::uint32 out_bytes_per_sec_;
  ::google::protobuf::uint32 in_packets_per_sec_x10_;
  ::google::protobuf::uint32 in_bytes_per_sec_;
  ::google::protobuf::uint32 ping_ms_;
  ::google::protobuf::uint32 packets_dropped_pct_;
  ::google::protobuf::uint32 packets_weird_sequence_pct_;
  ::google::protobuf::uint32 peak_jitter_usec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramLinkInstantaneousStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramLinkLifetimeStats : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramLinkLifetimeStats();
  virtual ~CMsgSteamDatagramLinkLifetimeStats();

  CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from);

  inline CMsgSteamDatagramLinkLifetimeStats& operator=(const CMsgSteamDatagramLinkLifetimeStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramLinkLifetimeStats& default_instance();

  void Swap(CMsgSteamDatagramLinkLifetimeStats* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramLinkLifetimeStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from);
  void MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 packets_sent = 3;
  inline bool has_packets_sent() const;
  inline void clear_packets_sent();
  static const int kPacketsSentFieldNumber = 3;
  inline ::google::protobuf::uint64 packets_sent() const;
  inline void set_packets_sent(::google::protobuf::uint64 value);

  // optional uint64 kb_sent = 4;
  inline bool has_kb_sent() const;
  inline void clear_kb_sent();
  static const int kKbSentFieldNumber = 4;
  inline ::google::protobuf::uint64 kb_sent() const;
  inline void set_kb_sent(::google::protobuf::uint64 value);

  // optional uint64 packets_recv = 5;
  inline bool has_packets_recv() const;
  inline void clear_packets_recv();
  static const int kPacketsRecvFieldNumber = 5;
  inline ::google::protobuf::uint64 packets_recv() const;
  inline void set_packets_recv(::google::protobuf::uint64 value);

  // optional uint64 kb_recv = 6;
  inline bool has_kb_recv() const;
  inline void clear_kb_recv();
  static const int kKbRecvFieldNumber = 6;
  inline ::google::protobuf::uint64 kb_recv() const;
  inline void set_kb_recv(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_sequenced = 7;
  inline bool has_packets_recv_sequenced() const;
  inline void clear_packets_recv_sequenced();
  static const int kPacketsRecvSequencedFieldNumber = 7;
  inline ::google::protobuf::uint64 packets_recv_sequenced() const;
  inline void set_packets_recv_sequenced(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_dropped = 8;
  inline bool has_packets_recv_dropped() const;
  inline void clear_packets_recv_dropped();
  static const int kPacketsRecvDroppedFieldNumber = 8;
  inline ::google::protobuf::uint64 packets_recv_dropped() const;
  inline void set_packets_recv_dropped(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_out_of_order = 9;
  inline bool has_packets_recv_out_of_order() const;
  inline void clear_packets_recv_out_of_order();
  static const int kPacketsRecvOutOfOrderFieldNumber = 9;
  inline ::google::protobuf::uint64 packets_recv_out_of_order() const;
  inline void set_packets_recv_out_of_order(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_duplicate = 10;
  inline bool has_packets_recv_duplicate() const;
  inline void clear_packets_recv_duplicate();
  static const int kPacketsRecvDuplicateFieldNumber = 10;
  inline ::google::protobuf::uint64 packets_recv_duplicate() const;
  inline void set_packets_recv_duplicate(::google::protobuf::uint64 value);

  // optional uint64 packets_recv_lurch = 11;
  inline bool has_packets_recv_lurch() const;
  inline void clear_packets_recv_lurch();
  static const int kPacketsRecvLurchFieldNumber = 11;
  inline ::google::protobuf::uint64 packets_recv_lurch() const;
  inline void set_packets_recv_lurch(::google::protobuf::uint64 value);

  // optional uint32 quality_histogram_100 = 21;
  inline bool has_quality_histogram_100() const;
  inline void clear_quality_histogram_100();
  static const int kQualityHistogram100FieldNumber = 21;
  inline ::google::protobuf::uint32 quality_histogram_100() const;
  inline void set_quality_histogram_100(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_99 = 22;
  inline bool has_quality_histogram_99() const;
  inline void clear_quality_histogram_99();
  static const int kQualityHistogram99FieldNumber = 22;
  inline ::google::protobuf::uint32 quality_histogram_99() const;
  inline void set_quality_histogram_99(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_97 = 23;
  inline bool has_quality_histogram_97() const;
  inline void clear_quality_histogram_97();
  static const int kQualityHistogram97FieldNumber = 23;
  inline ::google::protobuf::uint32 quality_histogram_97() const;
  inline void set_quality_histogram_97(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_95 = 24;
  inline bool has_quality_histogram_95() const;
  inline void clear_quality_histogram_95();
  static const int kQualityHistogram95FieldNumber = 24;
  inline ::google::protobuf::uint32 quality_histogram_95() const;
  inline void set_quality_histogram_95(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_90 = 25;
  inline bool has_quality_histogram_90() const;
  inline void clear_quality_histogram_90();
  static const int kQualityHistogram90FieldNumber = 25;
  inline ::google::protobuf::uint32 quality_histogram_90() const;
  inline void set_quality_histogram_90(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_75 = 26;
  inline bool has_quality_histogram_75() const;
  inline void clear_quality_histogram_75();
  static const int kQualityHistogram75FieldNumber = 26;
  inline ::google::protobuf::uint32 quality_histogram_75() const;
  inline void set_quality_histogram_75(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_50 = 27;
  inline bool has_quality_histogram_50() const;
  inline void clear_quality_histogram_50();
  static const int kQualityHistogram50FieldNumber = 27;
  inline ::google::protobuf::uint32 quality_histogram_50() const;
  inline void set_quality_histogram_50(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_1 = 28;
  inline bool has_quality_histogram_1() const;
  inline void clear_quality_histogram_1();
  static const int kQualityHistogram1FieldNumber = 28;
  inline ::google::protobuf::uint32 quality_histogram_1() const;
  inline void set_quality_histogram_1(::google::protobuf::uint32 value);

  // optional uint32 quality_histogram_dead = 29;
  inline bool has_quality_histogram_dead() const;
  inline void clear_quality_histogram_dead();
  static const int kQualityHistogramDeadFieldNumber = 29;
  inline ::google::protobuf::uint32 quality_histogram_dead() const;
  inline void set_quality_histogram_dead(::google::protobuf::uint32 value);

  // optional uint32 quality_ntile_2nd = 30;
  inline bool has_quality_ntile_2nd() const;
  inline void clear_quality_ntile_2nd();
  static const int kQualityNtile2NdFieldNumber = 30;
  inline ::google::protobuf::uint32 quality_ntile_2nd() const;
  inline void set_quality_ntile_2nd(::google::protobuf::uint32 value);

  // optional uint32 quality_ntile_5th = 31;
  inline bool has_quality_ntile_5th() const;
  inline void clear_quality_ntile_5th();
  static const int kQualityNtile5ThFieldNumber = 31;
  inline ::google::protobuf::uint32 quality_ntile_5th() const;
  inline void set_quality_ntile_5th(::google::protobuf::uint32 value);

  // optional uint32 quality_ntile_25th = 32;
  inline bool has_quality_ntile_25th() const;
  inline void clear_quality_ntile_25th();
  static const int kQualityNtile25ThFieldNumber = 32;
  inline ::google::protobuf::uint32 quality_ntile_25th() const;
  inline void set_quality_ntile_25th(::google::protobuf::uint32 value);

  // optional uint32 quality_ntile_50th = 33;
  inline bool has_quality_ntile_50th() const;
  inline void clear_quality_ntile_50th();
  static const int kQualityNtile50ThFieldNumber = 33;
  inline ::google::protobuf::uint32 quality_ntile_50th() const;
  inline void set_quality_ntile_50th(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_25 = 41;
  inline bool has_ping_histogram_25() const;
  inline void clear_ping_histogram_25();
  static const int kPingHistogram25FieldNumber = 41;
  inline ::google::protobuf::uint32 ping_histogram_25() const;
  inline void set_ping_histogram_25(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_50 = 42;
  inline bool has_ping_histogram_50() const;
  inline void clear_ping_histogram_50();
  static const int kPingHistogram50FieldNumber = 42;
  inline ::google::protobuf::uint32 ping_histogram_50() const;
  inline void set_ping_histogram_50(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_75 = 43;
  inline bool has_ping_histogram_75() const;
  inline void clear_ping_histogram_75();
  static const int kPingHistogram75FieldNumber = 43;
  inline ::google::protobuf::uint32 ping_histogram_75() const;
  inline void set_ping_histogram_75(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_100 = 44;
  inline bool has_ping_histogram_100() const;
  inline void clear_ping_histogram_100();
  static const int kPingHistogram100FieldNumber = 44;
  inline ::google::protobuf::uint32 ping_histogram_100() const;
  inline void set_ping_histogram_100(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_125 = 45;
  inline bool has_ping_histogram_125() const;
  inline void clear_ping_histogram_125();
  static const int kPingHistogram125FieldNumber = 45;
  inline ::google::protobuf::uint32 ping_histogram_125() const;
  inline void set_ping_histogram_125(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_150 = 46;
  inline bool has_ping_histogram_150() const;
  inline void clear_ping_histogram_150();
  static const int kPingHistogram150FieldNumber = 46;
  inline ::google::protobuf::uint32 ping_histogram_150() const;
  inline void set_ping_histogram_150(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_200 = 47;
  inline bool has_ping_histogram_200() const;
  inline void clear_ping_histogram_200();
  static const int kPingHistogram200FieldNumber = 47;
  inline ::google::protobuf::uint32 ping_histogram_200() const;
  inline void set_ping_histogram_200(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_300 = 48;
  inline bool has_ping_histogram_300() const;
  inline void clear_ping_histogram_300();
  static const int kPingHistogram300FieldNumber = 48;
  inline ::google::protobuf::uint32 ping_histogram_300() const;
  inline void set_ping_histogram_300(::google::protobuf::uint32 value);

  // optional uint32 ping_histogram_max = 49;
  inline bool has_ping_histogram_max() const;
  inline void clear_ping_histogram_max();
  static const int kPingHistogramMaxFieldNumber = 49;
  inline ::google::protobuf::uint32 ping_histogram_max() const;
  inline void set_ping_histogram_max(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_5th = 50;
  inline bool has_ping_ntile_5th() const;
  inline void clear_ping_ntile_5th();
  static const int kPingNtile5ThFieldNumber = 50;
  inline ::google::protobuf::uint32 ping_ntile_5th() const;
  inline void set_ping_ntile_5th(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_50th = 51;
  inline bool has_ping_ntile_50th() const;
  inline void clear_ping_ntile_50th();
  static const int kPingNtile50ThFieldNumber = 51;
  inline ::google::protobuf::uint32 ping_ntile_50th() const;
  inline void set_ping_ntile_50th(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_75th = 52;
  inline bool has_ping_ntile_75th() const;
  inline void clear_ping_ntile_75th();
  static const int kPingNtile75ThFieldNumber = 52;
  inline ::google::protobuf::uint32 ping_ntile_75th() const;
  inline void set_ping_ntile_75th(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_95th = 53;
  inline bool has_ping_ntile_95th() const;
  inline void clear_ping_ntile_95th();
  static const int kPingNtile95ThFieldNumber = 53;
  inline ::google::protobuf::uint32 ping_ntile_95th() const;
  inline void set_ping_ntile_95th(::google::protobuf::uint32 value);

  // optional uint32 ping_ntile_98th = 54;
  inline bool has_ping_ntile_98th() const;
  inline void clear_ping_ntile_98th();
  static const int kPingNtile98ThFieldNumber = 54;
  inline ::google::protobuf::uint32 ping_ntile_98th() const;
  inline void set_ping_ntile_98th(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_negligible = 61;
  inline bool has_jitter_histogram_negligible() const;
  inline void clear_jitter_histogram_negligible();
  static const int kJitterHistogramNegligibleFieldNumber = 61;
  inline ::google::protobuf::uint32 jitter_histogram_negligible() const;
  inline void set_jitter_histogram_negligible(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_1 = 62;
  inline bool has_jitter_histogram_1() const;
  inline void clear_jitter_histogram_1();
  static const int kJitterHistogram1FieldNumber = 62;
  inline ::google::protobuf::uint32 jitter_histogram_1() const;
  inline void set_jitter_histogram_1(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_2 = 63;
  inline bool has_jitter_histogram_2() const;
  inline void clear_jitter_histogram_2();
  static const int kJitterHistogram2FieldNumber = 63;
  inline ::google::protobuf::uint32 jitter_histogram_2() const;
  inline void set_jitter_histogram_2(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_5 = 64;
  inline bool has_jitter_histogram_5() const;
  inline void clear_jitter_histogram_5();
  static const int kJitterHistogram5FieldNumber = 64;
  inline ::google::protobuf::uint32 jitter_histogram_5() const;
  inline void set_jitter_histogram_5(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_10 = 65;
  inline bool has_jitter_histogram_10() const;
  inline void clear_jitter_histogram_10();
  static const int kJitterHistogram10FieldNumber = 65;
  inline ::google::protobuf::uint32 jitter_histogram_10() const;
  inline void set_jitter_histogram_10(::google::protobuf::uint32 value);

  // optional uint32 jitter_histogram_20 = 66;
  inline bool has_jitter_histogram_20() const;
  inline void clear_jitter_histogram_20();
  static const int kJitterHistogram20FieldNumber = 66;
  inline ::google::protobuf::uint32 jitter_histogram_20() const;
  inline void set_jitter_histogram_20(::google::protobuf::uint32 value);

  // optional uint32 txspeed_max = 67;
  inline bool has_txspeed_max() const;
  inline void clear_txspeed_max();
  static const int kTxspeedMaxFieldNumber = 67;
  inline ::google::protobuf::uint32 txspeed_max() const;
  inline void set_txspeed_max(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_16 = 68;
  inline bool has_txspeed_histogram_16() const;
  inline void clear_txspeed_histogram_16();
  static const int kTxspeedHistogram16FieldNumber = 68;
  inline ::google::protobuf::uint32 txspeed_histogram_16() const;
  inline void set_txspeed_histogram_16(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_32 = 69;
  inline bool has_txspeed_histogram_32() const;
  inline void clear_txspeed_histogram_32();
  static const int kTxspeedHistogram32FieldNumber = 69;
  inline ::google::protobuf::uint32 txspeed_histogram_32() const;
  inline void set_txspeed_histogram_32(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_64 = 70;
  inline bool has_txspeed_histogram_64() const;
  inline void clear_txspeed_histogram_64();
  static const int kTxspeedHistogram64FieldNumber = 70;
  inline ::google::protobuf::uint32 txspeed_histogram_64() const;
  inline void set_txspeed_histogram_64(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_128 = 71;
  inline bool has_txspeed_histogram_128() const;
  inline void clear_txspeed_histogram_128();
  static const int kTxspeedHistogram128FieldNumber = 71;
  inline ::google::protobuf::uint32 txspeed_histogram_128() const;
  inline void set_txspeed_histogram_128(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_256 = 72;
  inline bool has_txspeed_histogram_256() const;
  inline void clear_txspeed_histogram_256();
  static const int kTxspeedHistogram256FieldNumber = 72;
  inline ::google::protobuf::uint32 txspeed_histogram_256() const;
  inline void set_txspeed_histogram_256(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_512 = 73;
  inline bool has_txspeed_histogram_512() const;
  inline void clear_txspeed_histogram_512();
  static const int kTxspeedHistogram512FieldNumber = 73;
  inline ::google::protobuf::uint32 txspeed_histogram_512() const;
  inline void set_txspeed_histogram_512(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_1024 = 74;
  inline bool has_txspeed_histogram_1024() const;
  inline void clear_txspeed_histogram_1024();
  static const int kTxspeedHistogram1024FieldNumber = 74;
  inline ::google::protobuf::uint32 txspeed_histogram_1024() const;
  inline void set_txspeed_histogram_1024(::google::protobuf::uint32 value);

  // optional uint32 txspeed_histogram_max = 75;
  inline bool has_txspeed_histogram_max() const;
  inline void clear_txspeed_histogram_max();
  static const int kTxspeedHistogramMaxFieldNumber = 75;
  inline ::google::protobuf::uint32 txspeed_histogram_max() const;
  inline void set_txspeed_histogram_max(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_5th = 76;
  inline bool has_txspeed_ntile_5th() const;
  inline void clear_txspeed_ntile_5th();
  static const int kTxspeedNtile5ThFieldNumber = 76;
  inline ::google::protobuf::uint32 txspeed_ntile_5th() const;
  inline void set_txspeed_ntile_5th(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_50th = 77;
  inline bool has_txspeed_ntile_50th() const;
  inline void clear_txspeed_ntile_50th();
  static const int kTxspeedNtile50ThFieldNumber = 77;
  inline ::google::protobuf::uint32 txspeed_ntile_50th() const;
  inline void set_txspeed_ntile_50th(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_75th = 78;
  inline bool has_txspeed_ntile_75th() const;
  inline void clear_txspeed_ntile_75th();
  static const int kTxspeedNtile75ThFieldNumber = 78;
  inline ::google::protobuf::uint32 txspeed_ntile_75th() const;
  inline void set_txspeed_ntile_75th(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_95th = 79;
  inline bool has_txspeed_ntile_95th() const;
  inline void clear_txspeed_ntile_95th();
  static const int kTxspeedNtile95ThFieldNumber = 79;
  inline ::google::protobuf::uint32 txspeed_ntile_95th() const;
  inline void set_txspeed_ntile_95th(::google::protobuf::uint32 value);

  // optional uint32 txspeed_ntile_98th = 80;
  inline bool has_txspeed_ntile_98th() const;
  inline void clear_txspeed_ntile_98th();
  static const int kTxspeedNtile98ThFieldNumber = 80;
  inline ::google::protobuf::uint32 txspeed_ntile_98th() const;
  inline void set_txspeed_ntile_98th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_max = 81;
  inline bool has_rxspeed_max() const;
  inline void clear_rxspeed_max();
  static const int kRxspeedMaxFieldNumber = 81;
  inline ::google::protobuf::uint32 rxspeed_max() const;
  inline void set_rxspeed_max(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_16 = 82;
  inline bool has_rxspeed_histogram_16() const;
  inline void clear_rxspeed_histogram_16();
  static const int kRxspeedHistogram16FieldNumber = 82;
  inline ::google::protobuf::uint32 rxspeed_histogram_16() const;
  inline void set_rxspeed_histogram_16(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_32 = 83;
  inline bool has_rxspeed_histogram_32() const;
  inline void clear_rxspeed_histogram_32();
  static const int kRxspeedHistogram32FieldNumber = 83;
  inline ::google::protobuf::uint32 rxspeed_histogram_32() const;
  inline void set_rxspeed_histogram_32(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_64 = 84;
  inline bool has_rxspeed_histogram_64() const;
  inline void clear_rxspeed_histogram_64();
  static const int kRxspeedHistogram64FieldNumber = 84;
  inline ::google::protobuf::uint32 rxspeed_histogram_64() const;
  inline void set_rxspeed_histogram_64(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_128 = 85;
  inline bool has_rxspeed_histogram_128() const;
  inline void clear_rxspeed_histogram_128();
  static const int kRxspeedHistogram128FieldNumber = 85;
  inline ::google::protobuf::uint32 rxspeed_histogram_128() const;
  inline void set_rxspeed_histogram_128(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_256 = 86;
  inline bool has_rxspeed_histogram_256() const;
  inline void clear_rxspeed_histogram_256();
  static const int kRxspeedHistogram256FieldNumber = 86;
  inline ::google::protobuf::uint32 rxspeed_histogram_256() const;
  inline void set_rxspeed_histogram_256(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_512 = 87;
  inline bool has_rxspeed_histogram_512() const;
  inline void clear_rxspeed_histogram_512();
  static const int kRxspeedHistogram512FieldNumber = 87;
  inline ::google::protobuf::uint32 rxspeed_histogram_512() const;
  inline void set_rxspeed_histogram_512(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_1024 = 88;
  inline bool has_rxspeed_histogram_1024() const;
  inline void clear_rxspeed_histogram_1024();
  static const int kRxspeedHistogram1024FieldNumber = 88;
  inline ::google::protobuf::uint32 rxspeed_histogram_1024() const;
  inline void set_rxspeed_histogram_1024(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_histogram_max = 89;
  inline bool has_rxspeed_histogram_max() const;
  inline void clear_rxspeed_histogram_max();
  static const int kRxspeedHistogramMaxFieldNumber = 89;
  inline ::google::protobuf::uint32 rxspeed_histogram_max() const;
  inline void set_rxspeed_histogram_max(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_5th = 90;
  inline bool has_rxspeed_ntile_5th() const;
  inline void clear_rxspeed_ntile_5th();
  static const int kRxspeedNtile5ThFieldNumber = 90;
  inline ::google::protobuf::uint32 rxspeed_ntile_5th() const;
  inline void set_rxspeed_ntile_5th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_50th = 91;
  inline bool has_rxspeed_ntile_50th() const;
  inline void clear_rxspeed_ntile_50th();
  static const int kRxspeedNtile50ThFieldNumber = 91;
  inline ::google::protobuf::uint32 rxspeed_ntile_50th() const;
  inline void set_rxspeed_ntile_50th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_75th = 92;
  inline bool has_rxspeed_ntile_75th() const;
  inline void clear_rxspeed_ntile_75th();
  static const int kRxspeedNtile75ThFieldNumber = 92;
  inline ::google::protobuf::uint32 rxspeed_ntile_75th() const;
  inline void set_rxspeed_ntile_75th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_95th = 93;
  inline bool has_rxspeed_ntile_95th() const;
  inline void clear_rxspeed_ntile_95th();
  static const int kRxspeedNtile95ThFieldNumber = 93;
  inline ::google::protobuf::uint32 rxspeed_ntile_95th() const;
  inline void set_rxspeed_ntile_95th(::google::protobuf::uint32 value);

  // optional uint32 rxspeed_ntile_98th = 94;
  inline bool has_rxspeed_ntile_98th() const;
  inline void clear_rxspeed_ntile_98th();
  static const int kRxspeedNtile98ThFieldNumber = 94;
  inline ::google::protobuf::uint32 rxspeed_ntile_98th() const;
  inline void set_rxspeed_ntile_98th(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramLinkLifetimeStats)
 private:
  inline void set_has_packets_sent();
  inline void clear_has_packets_sent();
  inline void set_has_kb_sent();
  inline void clear_has_kb_sent();
  inline void set_has_packets_recv();
  inline void clear_has_packets_recv();
  inline void set_has_kb_recv();
  inline void clear_has_kb_recv();
  inline void set_has_packets_recv_sequenced();
  inline void clear_has_packets_recv_sequenced();
  inline void set_has_packets_recv_dropped();
  inline void clear_has_packets_recv_dropped();
  inline void set_has_packets_recv_out_of_order();
  inline void clear_has_packets_recv_out_of_order();
  inline void set_has_packets_recv_duplicate();
  inline void clear_has_packets_recv_duplicate();
  inline void set_has_packets_recv_lurch();
  inline void clear_has_packets_recv_lurch();
  inline void set_has_quality_histogram_100();
  inline void clear_has_quality_histogram_100();
  inline void set_has_quality_histogram_99();
  inline void clear_has_quality_histogram_99();
  inline void set_has_quality_histogram_97();
  inline void clear_has_quality_histogram_97();
  inline void set_has_quality_histogram_95();
  inline void clear_has_quality_histogram_95();
  inline void set_has_quality_histogram_90();
  inline void clear_has_quality_histogram_90();
  inline void set_has_quality_histogram_75();
  inline void clear_has_quality_histogram_75();
  inline void set_has_quality_histogram_50();
  inline void clear_has_quality_histogram_50();
  inline void set_has_quality_histogram_1();
  inline void clear_has_quality_histogram_1();
  inline void set_has_quality_histogram_dead();
  inline void clear_has_quality_histogram_dead();
  inline void set_has_quality_ntile_2nd();
  inline void clear_has_quality_ntile_2nd();
  inline void set_has_quality_ntile_5th();
  inline void clear_has_quality_ntile_5th();
  inline void set_has_quality_ntile_25th();
  inline void clear_has_quality_ntile_25th();
  inline void set_has_quality_ntile_50th();
  inline void clear_has_quality_ntile_50th();
  inline void set_has_ping_histogram_25();
  inline void clear_has_ping_histogram_25();
  inline void set_has_ping_histogram_50();
  inline void clear_has_ping_histogram_50();
  inline void set_has_ping_histogram_75();
  inline void clear_has_ping_histogram_75();
  inline void set_has_ping_histogram_100();
  inline void clear_has_ping_histogram_100();
  inline void set_has_ping_histogram_125();
  inline void clear_has_ping_histogram_125();
  inline void set_has_ping_histogram_150();
  inline void clear_has_ping_histogram_150();
  inline void set_has_ping_histogram_200();
  inline void clear_has_ping_histogram_200();
  inline void set_has_ping_histogram_300();
  inline void clear_has_ping_histogram_300();
  inline void set_has_ping_histogram_max();
  inline void clear_has_ping_histogram_max();
  inline void set_has_ping_ntile_5th();
  inline void clear_has_ping_ntile_5th();
  inline void set_has_ping_ntile_50th();
  inline void clear_has_ping_ntile_50th();
  inline void set_has_ping_ntile_75th();
  inline void clear_has_ping_ntile_75th();
  inline void set_has_ping_ntile_95th();
  inline void clear_has_ping_ntile_95th();
  inline void set_has_ping_ntile_98th();
  inline void clear_has_ping_ntile_98th();
  inline void set_has_jitter_histogram_negligible();
  inline void clear_has_jitter_histogram_negligible();
  inline void set_has_jitter_histogram_1();
  inline void clear_has_jitter_histogram_1();
  inline void set_has_jitter_histogram_2();
  inline void clear_has_jitter_histogram_2();
  inline void set_has_jitter_histogram_5();
  inline void clear_has_jitter_histogram_5();
  inline void set_has_jitter_histogram_10();
  inline void clear_has_jitter_histogram_10();
  inline void set_has_jitter_histogram_20();
  inline void clear_has_jitter_histogram_20();
  inline void set_has_txspeed_max();
  inline void clear_has_txspeed_max();
  inline void set_has_txspeed_histogram_16();
  inline void clear_has_txspeed_histogram_16();
  inline void set_has_txspeed_histogram_32();
  inline void clear_has_txspeed_histogram_32();
  inline void set_has_txspeed_histogram_64();
  inline void clear_has_txspeed_histogram_64();
  inline void set_has_txspeed_histogram_128();
  inline void clear_has_txspeed_histogram_128();
  inline void set_has_txspeed_histogram_256();
  inline void clear_has_txspeed_histogram_256();
  inline void set_has_txspeed_histogram_512();
  inline void clear_has_txspeed_histogram_512();
  inline void set_has_txspeed_histogram_1024();
  inline void clear_has_txspeed_histogram_1024();
  inline void set_has_txspeed_histogram_max();
  inline void clear_has_txspeed_histogram_max();
  inline void set_has_txspeed_ntile_5th();
  inline void clear_has_txspeed_ntile_5th();
  inline void set_has_txspeed_ntile_50th();
  inline void clear_has_txspeed_ntile_50th();
  inline void set_has_txspeed_ntile_75th();
  inline void clear_has_txspeed_ntile_75th();
  inline void set_has_txspeed_ntile_95th();
  inline void clear_has_txspeed_ntile_95th();
  inline void set_has_txspeed_ntile_98th();
  inline void clear_has_txspeed_ntile_98th();
  inline void set_has_rxspeed_max();
  inline void clear_has_rxspeed_max();
  inline void set_has_rxspeed_histogram_16();
  inline void clear_has_rxspeed_histogram_16();
  inline void set_has_rxspeed_histogram_32();
  inline void clear_has_rxspeed_histogram_32();
  inline void set_has_rxspeed_histogram_64();
  inline void clear_has_rxspeed_histogram_64();
  inline void set_has_rxspeed_histogram_128();
  inline void clear_has_rxspeed_histogram_128();
  inline void set_has_rxspeed_histogram_256();
  inline void clear_has_rxspeed_histogram_256();
  inline void set_has_rxspeed_histogram_512();
  inline void clear_has_rxspeed_histogram_512();
  inline void set_has_rxspeed_histogram_1024();
  inline void clear_has_rxspeed_histogram_1024();
  inline void set_has_rxspeed_histogram_max();
  inline void clear_has_rxspeed_histogram_max();
  inline void set_has_rxspeed_ntile_5th();
  inline void clear_has_rxspeed_ntile_5th();
  inline void set_has_rxspeed_ntile_50th();
  inline void clear_has_rxspeed_ntile_50th();
  inline void set_has_rxspeed_ntile_75th();
  inline void clear_has_rxspeed_ntile_75th();
  inline void set_has_rxspeed_ntile_95th();
  inline void clear_has_rxspeed_ntile_95th();
  inline void set_has_rxspeed_ntile_98th();
  inline void clear_has_rxspeed_ntile_98th();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 packets_sent_;
  ::google::protobuf::uint64 kb_sent_;
  ::google::protobuf::uint64 packets_recv_;
  ::google::protobuf::uint64 kb_recv_;
  ::google::protobuf::uint64 packets_recv_sequenced_;
  ::google::protobuf::uint64 packets_recv_dropped_;
  ::google::protobuf::uint64 packets_recv_out_of_order_;
  ::google::protobuf::uint64 packets_recv_duplicate_;
  ::google::protobuf::uint64 packets_recv_lurch_;
  ::google::protobuf::uint32 quality_histogram_100_;
  ::google::protobuf::uint32 quality_histogram_99_;
  ::google::protobuf::uint32 quality_histogram_97_;
  ::google::protobuf::uint32 quality_histogram_95_;
  ::google::protobuf::uint32 quality_histogram_90_;
  ::google::protobuf::uint32 quality_histogram_75_;
  ::google::protobuf::uint32 quality_histogram_50_;
  ::google::protobuf::uint32 quality_histogram_1_;
  ::google::protobuf::uint32 quality_histogram_dead_;
  ::google::protobuf::uint32 quality_ntile_2nd_;
  ::google::protobuf::uint32 quality_ntile_5th_;
  ::google::protobuf::uint32 quality_ntile_25th_;
  ::google::protobuf::uint32 quality_ntile_50th_;
  ::google::protobuf::uint32 ping_histogram_25_;
  ::google::protobuf::uint32 ping_histogram_50_;
  ::google::protobuf::uint32 ping_histogram_75_;
  ::google::protobuf::uint32 ping_histogram_100_;
  ::google::protobuf::uint32 ping_histogram_125_;
  ::google::protobuf::uint32 ping_histogram_150_;
  ::google::protobuf::uint32 ping_histogram_200_;
  ::google::protobuf::uint32 ping_histogram_300_;
  ::google::protobuf::uint32 ping_histogram_max_;
  ::google::protobuf::uint32 ping_ntile_5th_;
  ::google::protobuf::uint32 ping_ntile_50th_;
  ::google::protobuf::uint32 ping_ntile_75th_;
  ::google::protobuf::uint32 ping_ntile_95th_;
  ::google::protobuf::uint32 ping_ntile_98th_;
  ::google::protobuf::uint32 jitter_histogram_negligible_;
  ::google::protobuf::uint32 jitter_histogram_1_;
  ::google::protobuf::uint32 jitter_histogram_2_;
  ::google::protobuf::uint32 jitter_histogram_5_;
  ::google::protobuf::uint32 jitter_histogram_10_;
  ::google::protobuf::uint32 jitter_histogram_20_;
  ::google::protobuf::uint32 txspeed_max_;
  ::google::protobuf::uint32 txspeed_histogram_16_;
  ::google::protobuf::uint32 txspeed_histogram_32_;
  ::google::protobuf::uint32 txspeed_histogram_64_;
  ::google::protobuf::uint32 txspeed_histogram_128_;
  ::google::protobuf::uint32 txspeed_histogram_256_;
  ::google::protobuf::uint32 txspeed_histogram_512_;
  ::google::protobuf::uint32 txspeed_histogram_1024_;
  ::google::protobuf::uint32 txspeed_histogram_max_;
  ::google::protobuf::uint32 txspeed_ntile_5th_;
  ::google::protobuf::uint32 txspeed_ntile_50th_;
  ::google::protobuf::uint32 txspeed_ntile_75th_;
  ::google::protobuf::uint32 txspeed_ntile_95th_;
  ::google::protobuf::uint32 txspeed_ntile_98th_;
  ::google::protobuf::uint32 rxspeed_max_;
  ::google::protobuf::uint32 rxspeed_histogram_16_;
  ::google::protobuf::uint32 rxspeed_histogram_32_;
  ::google::protobuf::uint32 rxspeed_histogram_64_;
  ::google::protobuf::uint32 rxspeed_histogram_128_;
  ::google::protobuf::uint32 rxspeed_histogram_256_;
  ::google::protobuf::uint32 rxspeed_histogram_512_;
  ::google::protobuf::uint32 rxspeed_histogram_1024_;
  ::google::protobuf::uint32 rxspeed_histogram_max_;
  ::google::protobuf::uint32 rxspeed_ntile_5th_;
  ::google::protobuf::uint32 rxspeed_ntile_50th_;
  ::google::protobuf::uint32 rxspeed_ntile_75th_;
  ::google::protobuf::uint32 rxspeed_ntile_95th_;
  ::google::protobuf::uint32 rxspeed_ntile_98th_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(70 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramLinkLifetimeStats* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionQuality : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionQuality();
  virtual ~CMsgSteamDatagramConnectionQuality();

  CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from);

  inline CMsgSteamDatagramConnectionQuality& operator=(const CMsgSteamDatagramConnectionQuality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionQuality& default_instance();

  void Swap(CMsgSteamDatagramConnectionQuality* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionQuality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionQuality& from);
  void MergeFrom(const CMsgSteamDatagramConnectionQuality& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  inline bool has_instantaneous() const;
  inline void clear_instantaneous();
  static const int kInstantaneousFieldNumber = 1;
  inline const ::CMsgSteamDatagramLinkInstantaneousStats& instantaneous() const;
  inline ::CMsgSteamDatagramLinkInstantaneousStats* mutable_instantaneous();
  inline ::CMsgSteamDatagramLinkInstantaneousStats* release_instantaneous();
  inline void set_allocated_instantaneous(::CMsgSteamDatagramLinkInstantaneousStats* instantaneous);

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  inline bool has_lifetime() const;
  inline void clear_lifetime();
  static const int kLifetimeFieldNumber = 2;
  inline const ::CMsgSteamDatagramLinkLifetimeStats& lifetime() const;
  inline ::CMsgSteamDatagramLinkLifetimeStats* mutable_lifetime();
  inline ::CMsgSteamDatagramLinkLifetimeStats* release_lifetime();
  inline void set_allocated_lifetime(::CMsgSteamDatagramLinkLifetimeStats* lifetime);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionQuality)
 private:
  inline void set_has_instantaneous();
  inline void clear_has_instantaneous();
  inline void set_has_lifetime();
  inline void clear_has_lifetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramLinkInstantaneousStats* instantaneous_;
  ::CMsgSteamDatagramLinkLifetimeStats* lifetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionQuality* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgSteamDatagramRouterPingReply_RouteException

// optional fixed32 data_center_id = 1;
inline bool CMsgSteamDatagramRouterPingReply_RouteException::has_data_center_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_has_data_center_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_has_data_center_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_data_center_id() {
  data_center_id_ = 0u;
  clear_has_data_center_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply_RouteException::data_center_id() const {
  return data_center_id_;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_data_center_id(::google::protobuf::uint32 value) {
  set_has_data_center_id();
  data_center_id_ = value;
}

// optional uint32 flags = 2;
inline bool CMsgSteamDatagramRouterPingReply_RouteException::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply_RouteException::flags() const {
  return flags_;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint32 penalty = 3;
inline bool CMsgSteamDatagramRouterPingReply_RouteException::has_penalty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_has_penalty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_has_penalty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::clear_penalty() {
  penalty_ = 0u;
  clear_has_penalty();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply_RouteException::penalty() const {
  return penalty_;
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::set_penalty(::google::protobuf::uint32 value) {
  set_has_penalty();
  penalty_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRouterPingReply

// optional fixed32 client_timestamp = 1;
inline bool CMsgSteamDatagramRouterPingReply::has_client_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::set_has_client_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_has_client_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_client_timestamp() {
  client_timestamp_ = 0u;
  clear_has_client_timestamp();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::client_timestamp() const {
  return client_timestamp_;
}
inline void CMsgSteamDatagramRouterPingReply::set_client_timestamp(::google::protobuf::uint32 value) {
  set_has_client_timestamp();
  client_timestamp_ = value;
}

// repeated fixed32 latency_datacenter_ids = 2 [packed = true];
inline int CMsgSteamDatagramRouterPingReply::latency_datacenter_ids_size() const {
  return latency_datacenter_ids_.size();
}
inline void CMsgSteamDatagramRouterPingReply::clear_latency_datacenter_ids() {
  latency_datacenter_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::latency_datacenter_ids(int index) const {
  return latency_datacenter_ids_.Get(index);
}
inline void CMsgSteamDatagramRouterPingReply::set_latency_datacenter_ids(int index, ::google::protobuf::uint32 value) {
  latency_datacenter_ids_.Set(index, value);
}
inline void CMsgSteamDatagramRouterPingReply::add_latency_datacenter_ids(::google::protobuf::uint32 value) {
  latency_datacenter_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramRouterPingReply::latency_datacenter_ids() const {
  return latency_datacenter_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramRouterPingReply::mutable_latency_datacenter_ids() {
  return &latency_datacenter_ids_;
}

// repeated uint32 latency_ping_ms = 3 [packed = true];
inline int CMsgSteamDatagramRouterPingReply::latency_ping_ms_size() const {
  return latency_ping_ms_.size();
}
inline void CMsgSteamDatagramRouterPingReply::clear_latency_ping_ms() {
  latency_ping_ms_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::latency_ping_ms(int index) const {
  return latency_ping_ms_.Get(index);
}
inline void CMsgSteamDatagramRouterPingReply::set_latency_ping_ms(int index, ::google::protobuf::uint32 value) {
  latency_ping_ms_.Set(index, value);
}
inline void CMsgSteamDatagramRouterPingReply::add_latency_ping_ms(::google::protobuf::uint32 value) {
  latency_ping_ms_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramRouterPingReply::latency_ping_ms() const {
  return latency_ping_ms_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramRouterPingReply::mutable_latency_ping_ms() {
  return &latency_ping_ms_;
}

// optional fixed32 your_public_ip = 4;
inline bool CMsgSteamDatagramRouterPingReply::has_your_public_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::set_has_your_public_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_has_your_public_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_your_public_ip() {
  your_public_ip_ = 0u;
  clear_has_your_public_ip();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::your_public_ip() const {
  return your_public_ip_;
}
inline void CMsgSteamDatagramRouterPingReply::set_your_public_ip(::google::protobuf::uint32 value) {
  set_has_your_public_ip();
  your_public_ip_ = value;
}

// optional fixed32 server_time = 5;
inline bool CMsgSteamDatagramRouterPingReply::has_server_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::set_has_server_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::server_time() const {
  return server_time_;
}
inline void CMsgSteamDatagramRouterPingReply::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
}

// optional fixed64 challenge = 6;
inline bool CMsgSteamDatagramRouterPingReply::has_challenge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::set_has_challenge() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_challenge() {
  challenge_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRouterPingReply::challenge() const {
  return challenge_;
}
inline void CMsgSteamDatagramRouterPingReply::set_challenge(::google::protobuf::uint64 value) {
  set_has_challenge();
  challenge_ = value;
}

// optional uint32 seconds_until_shutdown = 7;
inline bool CMsgSteamDatagramRouterPingReply::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::set_has_seconds_until_shutdown() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_has_seconds_until_shutdown() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  clear_has_seconds_until_shutdown();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::seconds_until_shutdown() const {
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramRouterPingReply::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  set_has_seconds_until_shutdown();
  seconds_until_shutdown_ = value;
}

// optional fixed32 client_cookie = 8;
inline bool CMsgSteamDatagramRouterPingReply::has_client_cookie() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::set_has_client_cookie() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_has_client_cookie() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_client_cookie() {
  client_cookie_ = 0u;
  clear_has_client_cookie();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::client_cookie() const {
  return client_cookie_;
}
inline void CMsgSteamDatagramRouterPingReply::set_client_cookie(::google::protobuf::uint32 value) {
  set_has_client_cookie();
  client_cookie_ = value;
}

// optional uint32 scoring_penalty_relay_cluster = 9;
inline bool CMsgSteamDatagramRouterPingReply::has_scoring_penalty_relay_cluster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramRouterPingReply::set_has_scoring_penalty_relay_cluster() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_has_scoring_penalty_relay_cluster() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramRouterPingReply::clear_scoring_penalty_relay_cluster() {
  scoring_penalty_relay_cluster_ = 0u;
  clear_has_scoring_penalty_relay_cluster();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterPingReply::scoring_penalty_relay_cluster() const {
  return scoring_penalty_relay_cluster_;
}
inline void CMsgSteamDatagramRouterPingReply::set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value) {
  set_has_scoring_penalty_relay_cluster();
  scoring_penalty_relay_cluster_ = value;
}

// repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
inline int CMsgSteamDatagramRouterPingReply::route_exceptions_size() const {
  return route_exceptions_.size();
}
inline void CMsgSteamDatagramRouterPingReply::clear_route_exceptions() {
  route_exceptions_.Clear();
}
inline const ::CMsgSteamDatagramRouterPingReply_RouteException& CMsgSteamDatagramRouterPingReply::route_exceptions(int index) const {
  return route_exceptions_.Get(index);
}
inline ::CMsgSteamDatagramRouterPingReply_RouteException* CMsgSteamDatagramRouterPingReply::mutable_route_exceptions(int index) {
  return route_exceptions_.Mutable(index);
}
inline ::CMsgSteamDatagramRouterPingReply_RouteException* CMsgSteamDatagramRouterPingReply::add_route_exceptions() {
  return route_exceptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterPingReply_RouteException >&
CMsgSteamDatagramRouterPingReply::route_exceptions() const {
  return route_exceptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterPingReply_RouteException >*
CMsgSteamDatagramRouterPingReply::mutable_route_exceptions() {
  return &route_exceptions_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSessionCryptInfo

// optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
inline bool CMsgSteamDatagramSessionCryptInfo::has_key_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_has_key_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_key_type() {
  key_type_ = 0;
  clear_has_key_type();
}
inline ::CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::key_type() const {
  return static_cast< ::CMsgSteamDatagramSessionCryptInfo_EKeyType >(key_type_);
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_type(::CMsgSteamDatagramSessionCryptInfo_EKeyType value) {
  assert(::CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value));
  set_has_key_type();
  key_type_ = value;
}

// optional bytes key_data = 2;
inline bool CMsgSteamDatagramSessionCryptInfo::has_key_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_has_key_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_has_key_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_key_data() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    key_data_->clear();
  }
  clear_has_key_data();
}
inline const ::std::string& CMsgSteamDatagramSessionCryptInfo::key_data() const {
  return *key_data_;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const ::std::string& value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const char* value) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const void* value, size_t size) {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  key_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfo::mutable_key_data() {
  set_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    key_data_ = new ::std::string;
  }
  return key_data_;
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfo::release_key_data() {
  clear_has_key_data();
  if (key_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_data_;
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSessionCryptInfo::set_allocated_key_data(::std::string* key_data) {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete key_data_;
  }
  if (key_data) {
    set_has_key_data();
    key_data_ = key_data;
  } else {
    clear_has_key_data();
    key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 nonce = 3;
inline bool CMsgSteamDatagramSessionCryptInfo::has_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_has_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramSessionCryptInfo::nonce() const {
  return nonce_;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_nonce(::google::protobuf::uint64 value) {
  set_has_nonce();
  nonce_ = value;
}

// optional bool is_snp = 4;
inline bool CMsgSteamDatagramSessionCryptInfo::has_is_snp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_has_is_snp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_has_is_snp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_is_snp() {
  is_snp_ = false;
  clear_has_is_snp();
}
inline bool CMsgSteamDatagramSessionCryptInfo::is_snp() const {
  return is_snp_;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_is_snp(bool value) {
  set_has_is_snp();
  is_snp_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSessionCryptInfoSigned

// optional bytes info = 1;
inline bool CMsgSteamDatagramSessionCryptInfoSigned::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& CMsgSteamDatagramSessionCryptInfoSigned::info() const {
  return *info_;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const void* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfoSigned::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfoSigned::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes signature = 2;
inline bool CMsgSteamDatagramSessionCryptInfoSigned::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& CMsgSteamDatagramSessionCryptInfoSigned::signature() const {
  return *signature_;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfoSigned::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* CMsgSteamDatagramSessionCryptInfoSigned::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDiagnostic

// optional uint32 severity = 1;
inline bool CMsgSteamDatagramDiagnostic::has_severity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramDiagnostic::set_has_severity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramDiagnostic::clear_has_severity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramDiagnostic::clear_severity() {
  severity_ = 0u;
  clear_has_severity();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramDiagnostic::severity() const {
  return severity_;
}
inline void CMsgSteamDatagramDiagnostic::set_severity(::google::protobuf::uint32 value) {
  set_has_severity();
  severity_ = value;
}

// optional string text = 2;
inline bool CMsgSteamDatagramDiagnostic::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramDiagnostic::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramDiagnostic::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramDiagnostic::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& CMsgSteamDatagramDiagnostic::text() const {
  return *text_;
}
inline void CMsgSteamDatagramDiagnostic::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgSteamDatagramDiagnostic::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgSteamDatagramDiagnostic::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramDiagnostic::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* CMsgSteamDatagramDiagnostic::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramDiagnostic::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramLinkInstantaneousStats

// optional uint32 out_packets_per_sec_x10 = 1;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_out_packets_per_sec_x10() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_out_packets_per_sec_x10() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_out_packets_per_sec_x10() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_out_packets_per_sec_x10() {
  out_packets_per_sec_x10_ = 0u;
  clear_has_out_packets_per_sec_x10();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::out_packets_per_sec_x10() const {
  return out_packets_per_sec_x10_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_out_packets_per_sec_x10(::google::protobuf::uint32 value) {
  set_has_out_packets_per_sec_x10();
  out_packets_per_sec_x10_ = value;
}

// optional uint32 out_bytes_per_sec = 2;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_out_bytes_per_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_out_bytes_per_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_out_bytes_per_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_out_bytes_per_sec() {
  out_bytes_per_sec_ = 0u;
  clear_has_out_bytes_per_sec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::out_bytes_per_sec() const {
  return out_bytes_per_sec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_out_bytes_per_sec(::google::protobuf::uint32 value) {
  set_has_out_bytes_per_sec();
  out_bytes_per_sec_ = value;
}

// optional uint32 in_packets_per_sec_x10 = 3;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_in_packets_per_sec_x10() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_in_packets_per_sec_x10() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_in_packets_per_sec_x10() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_in_packets_per_sec_x10() {
  in_packets_per_sec_x10_ = 0u;
  clear_has_in_packets_per_sec_x10();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::in_packets_per_sec_x10() const {
  return in_packets_per_sec_x10_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_in_packets_per_sec_x10(::google::protobuf::uint32 value) {
  set_has_in_packets_per_sec_x10();
  in_packets_per_sec_x10_ = value;
}

// optional uint32 in_bytes_per_sec = 4;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_in_bytes_per_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_in_bytes_per_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_in_bytes_per_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_in_bytes_per_sec() {
  in_bytes_per_sec_ = 0u;
  clear_has_in_bytes_per_sec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::in_bytes_per_sec() const {
  return in_bytes_per_sec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_in_bytes_per_sec(::google::protobuf::uint32 value) {
  set_has_in_bytes_per_sec();
  in_bytes_per_sec_ = value;
}

// optional uint32 ping_ms = 5;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_ping_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_ping_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_ping_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_ping_ms() {
  ping_ms_ = 0u;
  clear_has_ping_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::ping_ms() const {
  return ping_ms_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_ping_ms(::google::protobuf::uint32 value) {
  set_has_ping_ms();
  ping_ms_ = value;
}

// optional uint32 packets_dropped_pct = 6;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_packets_dropped_pct() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_packets_dropped_pct() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_packets_dropped_pct() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_packets_dropped_pct() {
  packets_dropped_pct_ = 0u;
  clear_has_packets_dropped_pct();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::packets_dropped_pct() const {
  return packets_dropped_pct_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_packets_dropped_pct(::google::protobuf::uint32 value) {
  set_has_packets_dropped_pct();
  packets_dropped_pct_ = value;
}

// optional uint32 packets_weird_sequence_pct = 7;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_packets_weird_sequence_pct() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_packets_weird_sequence_pct() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_packets_weird_sequence_pct() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_packets_weird_sequence_pct() {
  packets_weird_sequence_pct_ = 0u;
  clear_has_packets_weird_sequence_pct();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::packets_weird_sequence_pct() const {
  return packets_weird_sequence_pct_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_packets_weird_sequence_pct(::google::protobuf::uint32 value) {
  set_has_packets_weird_sequence_pct();
  packets_weird_sequence_pct_ = value;
}

// optional uint32 peak_jitter_usec = 8;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_peak_jitter_usec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_has_peak_jitter_usec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_has_peak_jitter_usec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_peak_jitter_usec() {
  peak_jitter_usec_ = 0u;
  clear_has_peak_jitter_usec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkInstantaneousStats::peak_jitter_usec() const {
  return peak_jitter_usec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_peak_jitter_usec(::google::protobuf::uint32 value) {
  set_has_peak_jitter_usec();
  peak_jitter_usec_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramLinkLifetimeStats

// optional uint64 packets_sent = 3;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_sent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_sent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_sent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_sent() {
  packets_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_sent();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_sent() const {
  return packets_sent_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_sent(::google::protobuf::uint64 value) {
  set_has_packets_sent();
  packets_sent_ = value;
}

// optional uint64 kb_sent = 4;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_kb_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_kb_sent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_kb_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_kb_sent() {
  kb_sent_ = GOOGLE_ULONGLONG(0);
  clear_has_kb_sent();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::kb_sent() const {
  return kb_sent_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_kb_sent(::google::protobuf::uint64 value) {
  set_has_kb_sent();
  kb_sent_ = value;
}

// optional uint64 packets_recv = 5;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv() {
  packets_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv() const {
  return packets_recv_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv(::google::protobuf::uint64 value) {
  set_has_packets_recv();
  packets_recv_ = value;
}

// optional uint64 kb_recv = 6;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_kb_recv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_kb_recv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_kb_recv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_kb_recv() {
  kb_recv_ = GOOGLE_ULONGLONG(0);
  clear_has_kb_recv();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::kb_recv() const {
  return kb_recv_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_kb_recv(::google::protobuf::uint64 value) {
  set_has_kb_recv();
  kb_recv_ = value;
}

// optional uint64 packets_recv_sequenced = 7;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_sequenced() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_sequenced() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_sequenced() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_sequenced() {
  packets_recv_sequenced_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_sequenced();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_sequenced() const {
  return packets_recv_sequenced_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_sequenced(::google::protobuf::uint64 value) {
  set_has_packets_recv_sequenced();
  packets_recv_sequenced_ = value;
}

// optional uint64 packets_recv_dropped = 8;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_dropped() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_dropped() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_dropped() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_dropped() {
  packets_recv_dropped_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_dropped();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_dropped() const {
  return packets_recv_dropped_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_dropped(::google::protobuf::uint64 value) {
  set_has_packets_recv_dropped();
  packets_recv_dropped_ = value;
}

// optional uint64 packets_recv_out_of_order = 9;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_out_of_order() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_out_of_order() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_out_of_order() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_out_of_order() {
  packets_recv_out_of_order_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_out_of_order();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_out_of_order() const {
  return packets_recv_out_of_order_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_out_of_order(::google::protobuf::uint64 value) {
  set_has_packets_recv_out_of_order();
  packets_recv_out_of_order_ = value;
}

// optional uint64 packets_recv_duplicate = 10;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_duplicate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_duplicate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_duplicate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_duplicate() {
  packets_recv_duplicate_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_duplicate();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_duplicate() const {
  return packets_recv_duplicate_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_duplicate(::google::protobuf::uint64 value) {
  set_has_packets_recv_duplicate();
  packets_recv_duplicate_ = value;
}

// optional uint64 packets_recv_lurch = 11;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_lurch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_packets_recv_lurch() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_packets_recv_lurch() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_lurch() {
  packets_recv_lurch_ = GOOGLE_ULONGLONG(0);
  clear_has_packets_recv_lurch();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_lurch() const {
  return packets_recv_lurch_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_lurch(::google::protobuf::uint64 value) {
  set_has_packets_recv_lurch();
  packets_recv_lurch_ = value;
}

// optional uint32 quality_histogram_100 = 21;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_100() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_100() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_100() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_100() {
  quality_histogram_100_ = 0u;
  clear_has_quality_histogram_100();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_100() const {
  return quality_histogram_100_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_100(::google::protobuf::uint32 value) {
  set_has_quality_histogram_100();
  quality_histogram_100_ = value;
}

// optional uint32 quality_histogram_99 = 22;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_99() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_99() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_99() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_99() {
  quality_histogram_99_ = 0u;
  clear_has_quality_histogram_99();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_99() const {
  return quality_histogram_99_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_99(::google::protobuf::uint32 value) {
  set_has_quality_histogram_99();
  quality_histogram_99_ = value;
}

// optional uint32 quality_histogram_97 = 23;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_97() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_97() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_97() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_97() {
  quality_histogram_97_ = 0u;
  clear_has_quality_histogram_97();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_97() const {
  return quality_histogram_97_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_97(::google::protobuf::uint32 value) {
  set_has_quality_histogram_97();
  quality_histogram_97_ = value;
}

// optional uint32 quality_histogram_95 = 24;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_95() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_95() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_95() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_95() {
  quality_histogram_95_ = 0u;
  clear_has_quality_histogram_95();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_95() const {
  return quality_histogram_95_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_95(::google::protobuf::uint32 value) {
  set_has_quality_histogram_95();
  quality_histogram_95_ = value;
}

// optional uint32 quality_histogram_90 = 25;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_90() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_90() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_90() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_90() {
  quality_histogram_90_ = 0u;
  clear_has_quality_histogram_90();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_90() const {
  return quality_histogram_90_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_90(::google::protobuf::uint32 value) {
  set_has_quality_histogram_90();
  quality_histogram_90_ = value;
}

// optional uint32 quality_histogram_75 = 26;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_75() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_75() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_75() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_75() {
  quality_histogram_75_ = 0u;
  clear_has_quality_histogram_75();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_75() const {
  return quality_histogram_75_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_75(::google::protobuf::uint32 value) {
  set_has_quality_histogram_75();
  quality_histogram_75_ = value;
}

// optional uint32 quality_histogram_50 = 27;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_50() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_50() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_50() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_50() {
  quality_histogram_50_ = 0u;
  clear_has_quality_histogram_50();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_50() const {
  return quality_histogram_50_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_50(::google::protobuf::uint32 value) {
  set_has_quality_histogram_50();
  quality_histogram_50_ = value;
}

// optional uint32 quality_histogram_1 = 28;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_1() {
  quality_histogram_1_ = 0u;
  clear_has_quality_histogram_1();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_1() const {
  return quality_histogram_1_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_1(::google::protobuf::uint32 value) {
  set_has_quality_histogram_1();
  quality_histogram_1_ = value;
}

// optional uint32 quality_histogram_dead = 29;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_dead() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_histogram_dead() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_histogram_dead() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_dead() {
  quality_histogram_dead_ = 0u;
  clear_has_quality_histogram_dead();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_dead() const {
  return quality_histogram_dead_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_dead(::google::protobuf::uint32 value) {
  set_has_quality_histogram_dead();
  quality_histogram_dead_ = value;
}

// optional uint32 quality_ntile_2nd = 30;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_2nd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_ntile_2nd() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_ntile_2nd() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_2nd() {
  quality_ntile_2nd_ = 0u;
  clear_has_quality_ntile_2nd();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_2nd() const {
  return quality_ntile_2nd_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_2nd(::google::protobuf::uint32 value) {
  set_has_quality_ntile_2nd();
  quality_ntile_2nd_ = value;
}

// optional uint32 quality_ntile_5th = 31;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_5th() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_ntile_5th() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_ntile_5th() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_5th() {
  quality_ntile_5th_ = 0u;
  clear_has_quality_ntile_5th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_5th() const {
  return quality_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_5th(::google::protobuf::uint32 value) {
  set_has_quality_ntile_5th();
  quality_ntile_5th_ = value;
}

// optional uint32 quality_ntile_25th = 32;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_25th() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_ntile_25th() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_ntile_25th() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_25th() {
  quality_ntile_25th_ = 0u;
  clear_has_quality_ntile_25th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_25th() const {
  return quality_ntile_25th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_25th(::google::protobuf::uint32 value) {
  set_has_quality_ntile_25th();
  quality_ntile_25th_ = value;
}

// optional uint32 quality_ntile_50th = 33;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_50th() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_quality_ntile_50th() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_quality_ntile_50th() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_50th() {
  quality_ntile_50th_ = 0u;
  clear_has_quality_ntile_50th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_50th() const {
  return quality_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_50th(::google::protobuf::uint32 value) {
  set_has_quality_ntile_50th();
  quality_ntile_50th_ = value;
}

// optional uint32 ping_histogram_25 = 41;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_25() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_25() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_25() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_25() {
  ping_histogram_25_ = 0u;
  clear_has_ping_histogram_25();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_25() const {
  return ping_histogram_25_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_25(::google::protobuf::uint32 value) {
  set_has_ping_histogram_25();
  ping_histogram_25_ = value;
}

// optional uint32 ping_histogram_50 = 42;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_50() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_50() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_50() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_50() {
  ping_histogram_50_ = 0u;
  clear_has_ping_histogram_50();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_50() const {
  return ping_histogram_50_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_50(::google::protobuf::uint32 value) {
  set_has_ping_histogram_50();
  ping_histogram_50_ = value;
}

// optional uint32 ping_histogram_75 = 43;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_75() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_75() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_75() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_75() {
  ping_histogram_75_ = 0u;
  clear_has_ping_histogram_75();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_75() const {
  return ping_histogram_75_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_75(::google::protobuf::uint32 value) {
  set_has_ping_histogram_75();
  ping_histogram_75_ = value;
}

// optional uint32 ping_histogram_100 = 44;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_100() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_100() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_100() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_100() {
  ping_histogram_100_ = 0u;
  clear_has_ping_histogram_100();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_100() const {
  return ping_histogram_100_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_100(::google::protobuf::uint32 value) {
  set_has_ping_histogram_100();
  ping_histogram_100_ = value;
}

// optional uint32 ping_histogram_125 = 45;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_125() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_125() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_125() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_125() {
  ping_histogram_125_ = 0u;
  clear_has_ping_histogram_125();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_125() const {
  return ping_histogram_125_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_125(::google::protobuf::uint32 value) {
  set_has_ping_histogram_125();
  ping_histogram_125_ = value;
}

// optional uint32 ping_histogram_150 = 46;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_150() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_150() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_150() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_150() {
  ping_histogram_150_ = 0u;
  clear_has_ping_histogram_150();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_150() const {
  return ping_histogram_150_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_150(::google::protobuf::uint32 value) {
  set_has_ping_histogram_150();
  ping_histogram_150_ = value;
}

// optional uint32 ping_histogram_200 = 47;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_200() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_200() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_200() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_200() {
  ping_histogram_200_ = 0u;
  clear_has_ping_histogram_200();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_200() const {
  return ping_histogram_200_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_200(::google::protobuf::uint32 value) {
  set_has_ping_histogram_200();
  ping_histogram_200_ = value;
}

// optional uint32 ping_histogram_300 = 48;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_300() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_300() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_300() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_300() {
  ping_histogram_300_ = 0u;
  clear_has_ping_histogram_300();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_300() const {
  return ping_histogram_300_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_300(::google::protobuf::uint32 value) {
  set_has_ping_histogram_300();
  ping_histogram_300_ = value;
}

// optional uint32 ping_histogram_max = 49;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_max() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_histogram_max() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_histogram_max() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_max() {
  ping_histogram_max_ = 0u;
  clear_has_ping_histogram_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_max() const {
  return ping_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_max(::google::protobuf::uint32 value) {
  set_has_ping_histogram_max();
  ping_histogram_max_ = value;
}

// optional uint32 ping_ntile_5th = 50;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_5th() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_5th() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_5th() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_5th() {
  ping_ntile_5th_ = 0u;
  clear_has_ping_ntile_5th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_5th() const {
  return ping_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_5th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_5th();
  ping_ntile_5th_ = value;
}

// optional uint32 ping_ntile_50th = 51;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_50th() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_50th() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_50th() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_50th() {
  ping_ntile_50th_ = 0u;
  clear_has_ping_ntile_50th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_50th() const {
  return ping_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_50th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_50th();
  ping_ntile_50th_ = value;
}

// optional uint32 ping_ntile_75th = 52;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_75th() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_75th() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_75th() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_75th() {
  ping_ntile_75th_ = 0u;
  clear_has_ping_ntile_75th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_75th() const {
  return ping_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_75th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_75th();
  ping_ntile_75th_ = value;
}

// optional uint32 ping_ntile_95th = 53;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_95th() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_95th() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_95th() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_95th() {
  ping_ntile_95th_ = 0u;
  clear_has_ping_ntile_95th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_95th() const {
  return ping_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_95th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_95th();
  ping_ntile_95th_ = value;
}

// optional uint32 ping_ntile_98th = 54;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_98th() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_ping_ntile_98th() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_ping_ntile_98th() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_98th() {
  ping_ntile_98th_ = 0u;
  clear_has_ping_ntile_98th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_98th() const {
  return ping_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_98th(::google::protobuf::uint32 value) {
  set_has_ping_ntile_98th();
  ping_ntile_98th_ = value;
}

// optional uint32 jitter_histogram_negligible = 61;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_negligible() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_negligible() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_negligible() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_negligible() {
  jitter_histogram_negligible_ = 0u;
  clear_has_jitter_histogram_negligible();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_negligible() const {
  return jitter_histogram_negligible_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_negligible(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_negligible();
  jitter_histogram_negligible_ = value;
}

// optional uint32 jitter_histogram_1 = 62;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_1() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_1() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_1() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_1() {
  jitter_histogram_1_ = 0u;
  clear_has_jitter_histogram_1();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_1() const {
  return jitter_histogram_1_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_1(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_1();
  jitter_histogram_1_ = value;
}

// optional uint32 jitter_histogram_2 = 63;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_2() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_2() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_2() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_2() {
  jitter_histogram_2_ = 0u;
  clear_has_jitter_histogram_2();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_2() const {
  return jitter_histogram_2_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_2(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_2();
  jitter_histogram_2_ = value;
}

// optional uint32 jitter_histogram_5 = 64;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_5() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_5() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_5() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_5() {
  jitter_histogram_5_ = 0u;
  clear_has_jitter_histogram_5();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_5() const {
  return jitter_histogram_5_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_5(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_5();
  jitter_histogram_5_ = value;
}

// optional uint32 jitter_histogram_10 = 65;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_10() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_10() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_10() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_10() {
  jitter_histogram_10_ = 0u;
  clear_has_jitter_histogram_10();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_10() const {
  return jitter_histogram_10_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_10(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_10();
  jitter_histogram_10_ = value;
}

// optional uint32 jitter_histogram_20 = 66;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_20() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_jitter_histogram_20() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_jitter_histogram_20() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_20() {
  jitter_histogram_20_ = 0u;
  clear_has_jitter_histogram_20();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_20() const {
  return jitter_histogram_20_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_20(::google::protobuf::uint32 value) {
  set_has_jitter_histogram_20();
  jitter_histogram_20_ = value;
}

// optional uint32 txspeed_max = 67;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_max() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_max() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_max() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_max() {
  txspeed_max_ = 0u;
  clear_has_txspeed_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_max() const {
  return txspeed_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_max(::google::protobuf::uint32 value) {
  set_has_txspeed_max();
  txspeed_max_ = value;
}

// optional uint32 txspeed_histogram_16 = 68;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_16() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_16() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_16() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_16() {
  txspeed_histogram_16_ = 0u;
  clear_has_txspeed_histogram_16();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_16() const {
  return txspeed_histogram_16_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_16(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_16();
  txspeed_histogram_16_ = value;
}

// optional uint32 txspeed_histogram_32 = 69;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_32() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_32() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_32() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_32() {
  txspeed_histogram_32_ = 0u;
  clear_has_txspeed_histogram_32();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_32() const {
  return txspeed_histogram_32_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_32(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_32();
  txspeed_histogram_32_ = value;
}

// optional uint32 txspeed_histogram_64 = 70;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_64() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_64() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_64() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_64() {
  txspeed_histogram_64_ = 0u;
  clear_has_txspeed_histogram_64();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_64() const {
  return txspeed_histogram_64_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_64(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_64();
  txspeed_histogram_64_ = value;
}

// optional uint32 txspeed_histogram_128 = 71;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_128() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_128() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_128() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_128() {
  txspeed_histogram_128_ = 0u;
  clear_has_txspeed_histogram_128();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_128() const {
  return txspeed_histogram_128_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_128(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_128();
  txspeed_histogram_128_ = value;
}

// optional uint32 txspeed_histogram_256 = 72;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_256() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_256() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_256() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_256() {
  txspeed_histogram_256_ = 0u;
  clear_has_txspeed_histogram_256();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_256() const {
  return txspeed_histogram_256_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_256(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_256();
  txspeed_histogram_256_ = value;
}

// optional uint32 txspeed_histogram_512 = 73;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_512() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_512() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_512() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_512() {
  txspeed_histogram_512_ = 0u;
  clear_has_txspeed_histogram_512();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_512() const {
  return txspeed_histogram_512_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_512(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_512();
  txspeed_histogram_512_ = value;
}

// optional uint32 txspeed_histogram_1024 = 74;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_1024() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_1024() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_1024() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_1024() {
  txspeed_histogram_1024_ = 0u;
  clear_has_txspeed_histogram_1024();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_1024() const {
  return txspeed_histogram_1024_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_1024(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_1024();
  txspeed_histogram_1024_ = value;
}

// optional uint32 txspeed_histogram_max = 75;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_max() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_histogram_max() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_histogram_max() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_max() {
  txspeed_histogram_max_ = 0u;
  clear_has_txspeed_histogram_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_max() const {
  return txspeed_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_max(::google::protobuf::uint32 value) {
  set_has_txspeed_histogram_max();
  txspeed_histogram_max_ = value;
}

// optional uint32 txspeed_ntile_5th = 76;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_5th() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_5th() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_5th() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_5th() {
  txspeed_ntile_5th_ = 0u;
  clear_has_txspeed_ntile_5th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_5th() const {
  return txspeed_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_5th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_5th();
  txspeed_ntile_5th_ = value;
}

// optional uint32 txspeed_ntile_50th = 77;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_50th() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_50th() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_50th() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_50th() {
  txspeed_ntile_50th_ = 0u;
  clear_has_txspeed_ntile_50th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_50th() const {
  return txspeed_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_50th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_50th();
  txspeed_ntile_50th_ = value;
}

// optional uint32 txspeed_ntile_75th = 78;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_75th() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_75th() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_75th() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_75th() {
  txspeed_ntile_75th_ = 0u;
  clear_has_txspeed_ntile_75th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_75th() const {
  return txspeed_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_75th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_75th();
  txspeed_ntile_75th_ = value;
}

// optional uint32 txspeed_ntile_95th = 79;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_95th() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_95th() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_95th() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_95th() {
  txspeed_ntile_95th_ = 0u;
  clear_has_txspeed_ntile_95th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_95th() const {
  return txspeed_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_95th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_95th();
  txspeed_ntile_95th_ = value;
}

// optional uint32 txspeed_ntile_98th = 80;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_98th() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_txspeed_ntile_98th() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_txspeed_ntile_98th() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_98th() {
  txspeed_ntile_98th_ = 0u;
  clear_has_txspeed_ntile_98th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_98th() const {
  return txspeed_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_98th(::google::protobuf::uint32 value) {
  set_has_txspeed_ntile_98th();
  txspeed_ntile_98th_ = value;
}

// optional uint32 rxspeed_max = 81;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_max() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_max() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_max() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_max() {
  rxspeed_max_ = 0u;
  clear_has_rxspeed_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_max() const {
  return rxspeed_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_max(::google::protobuf::uint32 value) {
  set_has_rxspeed_max();
  rxspeed_max_ = value;
}

// optional uint32 rxspeed_histogram_16 = 82;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_16() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_16() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_16() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_16() {
  rxspeed_histogram_16_ = 0u;
  clear_has_rxspeed_histogram_16();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_16() const {
  return rxspeed_histogram_16_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_16(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_16();
  rxspeed_histogram_16_ = value;
}

// optional uint32 rxspeed_histogram_32 = 83;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_32() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_32() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_32() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_32() {
  rxspeed_histogram_32_ = 0u;
  clear_has_rxspeed_histogram_32();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_32() const {
  return rxspeed_histogram_32_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_32(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_32();
  rxspeed_histogram_32_ = value;
}

// optional uint32 rxspeed_histogram_64 = 84;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_64() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_64() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_64() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_64() {
  rxspeed_histogram_64_ = 0u;
  clear_has_rxspeed_histogram_64();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_64() const {
  return rxspeed_histogram_64_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_64(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_64();
  rxspeed_histogram_64_ = value;
}

// optional uint32 rxspeed_histogram_128 = 85;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_128() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_128() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_128() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_128() {
  rxspeed_histogram_128_ = 0u;
  clear_has_rxspeed_histogram_128();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_128() const {
  return rxspeed_histogram_128_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_128(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_128();
  rxspeed_histogram_128_ = value;
}

// optional uint32 rxspeed_histogram_256 = 86;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_256() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_256() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_256() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_256() {
  rxspeed_histogram_256_ = 0u;
  clear_has_rxspeed_histogram_256();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_256() const {
  return rxspeed_histogram_256_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_256(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_256();
  rxspeed_histogram_256_ = value;
}

// optional uint32 rxspeed_histogram_512 = 87;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_512() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_512() {
  _has_bits_[1] |= 0x40000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_512() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_512() {
  rxspeed_histogram_512_ = 0u;
  clear_has_rxspeed_histogram_512();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_512() const {
  return rxspeed_histogram_512_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_512(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_512();
  rxspeed_histogram_512_ = value;
}

// optional uint32 rxspeed_histogram_1024 = 88;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_1024() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_1024() {
  _has_bits_[1] |= 0x80000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_1024() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_1024() {
  rxspeed_histogram_1024_ = 0u;
  clear_has_rxspeed_histogram_1024();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_1024() const {
  return rxspeed_histogram_1024_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_1024(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_1024();
  rxspeed_histogram_1024_ = value;
}

// optional uint32 rxspeed_histogram_max = 89;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_max() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_histogram_max() {
  _has_bits_[2] |= 0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_histogram_max() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_max() {
  rxspeed_histogram_max_ = 0u;
  clear_has_rxspeed_histogram_max();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_max() const {
  return rxspeed_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_max(::google::protobuf::uint32 value) {
  set_has_rxspeed_histogram_max();
  rxspeed_histogram_max_ = value;
}

// optional uint32 rxspeed_ntile_5th = 90;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_5th() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_5th() {
  _has_bits_[2] |= 0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_5th() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_5th() {
  rxspeed_ntile_5th_ = 0u;
  clear_has_rxspeed_ntile_5th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_5th() const {
  return rxspeed_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_5th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_5th();
  rxspeed_ntile_5th_ = value;
}

// optional uint32 rxspeed_ntile_50th = 91;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_50th() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_50th() {
  _has_bits_[2] |= 0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_50th() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_50th() {
  rxspeed_ntile_50th_ = 0u;
  clear_has_rxspeed_ntile_50th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_50th() const {
  return rxspeed_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_50th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_50th();
  rxspeed_ntile_50th_ = value;
}

// optional uint32 rxspeed_ntile_75th = 92;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_75th() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_75th() {
  _has_bits_[2] |= 0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_75th() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_75th() {
  rxspeed_ntile_75th_ = 0u;
  clear_has_rxspeed_ntile_75th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_75th() const {
  return rxspeed_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_75th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_75th();
  rxspeed_ntile_75th_ = value;
}

// optional uint32 rxspeed_ntile_95th = 93;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_95th() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_95th() {
  _has_bits_[2] |= 0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_95th() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_95th() {
  rxspeed_ntile_95th_ = 0u;
  clear_has_rxspeed_ntile_95th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_95th() const {
  return rxspeed_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_95th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_95th();
  rxspeed_ntile_95th_ = value;
}

// optional uint32 rxspeed_ntile_98th = 94;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_98th() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_has_rxspeed_ntile_98th() {
  _has_bits_[2] |= 0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_has_rxspeed_ntile_98th() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_98th() {
  rxspeed_ntile_98th_ = 0u;
  clear_has_rxspeed_ntile_98th();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_98th() const {
  return rxspeed_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_98th(::google::protobuf::uint32 value) {
  set_has_rxspeed_ntile_98th();
  rxspeed_ntile_98th_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionQuality

// optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
inline bool CMsgSteamDatagramConnectionQuality::has_instantaneous() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionQuality::set_has_instantaneous() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionQuality::clear_has_instantaneous() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionQuality::clear_instantaneous() {
  if (instantaneous_ != NULL) instantaneous_->::CMsgSteamDatagramLinkInstantaneousStats::Clear();
  clear_has_instantaneous();
}
inline const ::CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramConnectionQuality::instantaneous() const {
  return instantaneous_ != NULL ? *instantaneous_ : *default_instance_->instantaneous_;
}
inline ::CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramConnectionQuality::mutable_instantaneous() {
  set_has_instantaneous();
  if (instantaneous_ == NULL) instantaneous_ = new ::CMsgSteamDatagramLinkInstantaneousStats;
  return instantaneous_;
}
inline ::CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramConnectionQuality::release_instantaneous() {
  clear_has_instantaneous();
  ::CMsgSteamDatagramLinkInstantaneousStats* temp = instantaneous_;
  instantaneous_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionQuality::set_allocated_instantaneous(::CMsgSteamDatagramLinkInstantaneousStats* instantaneous) {
  delete instantaneous_;
  instantaneous_ = instantaneous;
  if (instantaneous) {
    set_has_instantaneous();
  } else {
    clear_has_instantaneous();
  }
}

// optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
inline bool CMsgSteamDatagramConnectionQuality::has_lifetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionQuality::set_has_lifetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionQuality::clear_has_lifetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionQuality::clear_lifetime() {
  if (lifetime_ != NULL) lifetime_->::CMsgSteamDatagramLinkLifetimeStats::Clear();
  clear_has_lifetime();
}
inline const ::CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramConnectionQuality::lifetime() const {
  return lifetime_ != NULL ? *lifetime_ : *default_instance_->lifetime_;
}
inline ::CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramConnectionQuality::mutable_lifetime() {
  set_has_lifetime();
  if (lifetime_ == NULL) lifetime_ = new ::CMsgSteamDatagramLinkLifetimeStats;
  return lifetime_;
}
inline ::CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramConnectionQuality::release_lifetime() {
  clear_has_lifetime();
  ::CMsgSteamDatagramLinkLifetimeStats* temp = lifetime_;
  lifetime_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionQuality::set_allocated_lifetime(::CMsgSteamDatagramLinkLifetimeStats* lifetime) {
  delete lifetime_;
  lifetime_ = lifetime;
  if (lifetime) {
    set_has_lifetime();
  } else {
    clear_has_lifetime();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramSessionCryptInfo_EKeyType>() {
  return ::CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESteamDatagramMsgID>() {
  return ::ESteamDatagramMsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steamnetworkingsockets_5fmessages_2eproto__INCLUDED
