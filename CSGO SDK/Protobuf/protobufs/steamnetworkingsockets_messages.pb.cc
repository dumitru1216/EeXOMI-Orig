// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steamnetworkingsockets_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterPingReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRouterPingReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterPingReply_RouteException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRouterPingReply_RouteException_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramSessionCryptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramSessionCryptInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramSessionCryptInfoSigned_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramSessionCryptInfoSigned_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramDiagnostic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramDiagnostic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkInstantaneousStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramLinkInstantaneousStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkLifetimeStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramLinkLifetimeStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionQuality_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto() {
  protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steamnetworkingsockets_messages.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSteamDatagramRouterPingReply_descriptor_ = file->message_type(0);
  static const int CMsgSteamDatagramRouterPingReply_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, client_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, latency_datacenter_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, latency_ping_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, your_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, client_cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, scoring_penalty_relay_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, route_exceptions_),
  };
  CMsgSteamDatagramRouterPingReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRouterPingReply_descriptor_,
      CMsgSteamDatagramRouterPingReply::default_instance_,
      CMsgSteamDatagramRouterPingReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRouterPingReply));
  CMsgSteamDatagramRouterPingReply_RouteException_descriptor_ = CMsgSteamDatagramRouterPingReply_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramRouterPingReply_RouteException_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, data_center_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, penalty_),
  };
  CMsgSteamDatagramRouterPingReply_RouteException_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRouterPingReply_RouteException_descriptor_,
      CMsgSteamDatagramRouterPingReply_RouteException::default_instance_,
      CMsgSteamDatagramRouterPingReply_RouteException_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRouterPingReply_RouteException));
  CMsgSteamDatagramSessionCryptInfo_descriptor_ = file->message_type(1);
  static const int CMsgSteamDatagramSessionCryptInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfo, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfo, key_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfo, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfo, is_snp_),
  };
  CMsgSteamDatagramSessionCryptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramSessionCryptInfo_descriptor_,
      CMsgSteamDatagramSessionCryptInfo::default_instance_,
      CMsgSteamDatagramSessionCryptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramSessionCryptInfo));
  CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor_ = CMsgSteamDatagramSessionCryptInfo_descriptor_->enum_type(0);
  CMsgSteamDatagramSessionCryptInfoSigned_descriptor_ = file->message_type(2);
  static const int CMsgSteamDatagramSessionCryptInfoSigned_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfoSigned, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfoSigned, signature_),
  };
  CMsgSteamDatagramSessionCryptInfoSigned_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramSessionCryptInfoSigned_descriptor_,
      CMsgSteamDatagramSessionCryptInfoSigned::default_instance_,
      CMsgSteamDatagramSessionCryptInfoSigned_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfoSigned, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramSessionCryptInfoSigned, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramSessionCryptInfoSigned));
  CMsgSteamDatagramDiagnostic_descriptor_ = file->message_type(3);
  static const int CMsgSteamDatagramDiagnostic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDiagnostic, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDiagnostic, text_),
  };
  CMsgSteamDatagramDiagnostic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramDiagnostic_descriptor_,
      CMsgSteamDatagramDiagnostic::default_instance_,
      CMsgSteamDatagramDiagnostic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDiagnostic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDiagnostic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramDiagnostic));
  CMsgSteamDatagramLinkInstantaneousStats_descriptor_ = file->message_type(4);
  static const int CMsgSteamDatagramLinkInstantaneousStats_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, out_packets_per_sec_x10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, out_bytes_per_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, in_packets_per_sec_x10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, in_bytes_per_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, ping_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, packets_dropped_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, packets_weird_sequence_pct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, peak_jitter_usec_),
  };
  CMsgSteamDatagramLinkInstantaneousStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramLinkInstantaneousStats_descriptor_,
      CMsgSteamDatagramLinkInstantaneousStats::default_instance_,
      CMsgSteamDatagramLinkInstantaneousStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkInstantaneousStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramLinkInstantaneousStats));
  CMsgSteamDatagramLinkLifetimeStats_descriptor_ = file->message_type(5);
  static const int CMsgSteamDatagramLinkLifetimeStats_offsets_[70] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, kb_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, kb_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_sequenced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_out_of_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_duplicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, packets_recv_lurch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_99_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_97_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_95_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_90_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_75_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_histogram_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_ntile_2nd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_ntile_5th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_ntile_25th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, quality_ntile_50th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_25_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_75_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_125_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_150_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_200_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_300_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_histogram_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_5th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_50th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_75th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_95th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, ping_ntile_98th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_negligible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_128_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_256_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_512_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_1024_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_histogram_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_5th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_50th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_75th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_95th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, txspeed_ntile_98th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_128_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_256_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_512_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_1024_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_histogram_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_5th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_50th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_75th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_95th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, rxspeed_ntile_98th_),
  };
  CMsgSteamDatagramLinkLifetimeStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramLinkLifetimeStats_descriptor_,
      CMsgSteamDatagramLinkLifetimeStats::default_instance_,
      CMsgSteamDatagramLinkLifetimeStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramLinkLifetimeStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramLinkLifetimeStats));
  CMsgSteamDatagramConnectionQuality_descriptor_ = file->message_type(6);
  static const int CMsgSteamDatagramConnectionQuality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, instantaneous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, lifetime_),
  };
  CMsgSteamDatagramConnectionQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionQuality_descriptor_,
      CMsgSteamDatagramConnectionQuality::default_instance_,
      CMsgSteamDatagramConnectionQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionQuality));
  ESteamDatagramMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steamnetworkingsockets_5fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRouterPingReply_descriptor_, &CMsgSteamDatagramRouterPingReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRouterPingReply_RouteException_descriptor_, &CMsgSteamDatagramRouterPingReply_RouteException::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramSessionCryptInfo_descriptor_, &CMsgSteamDatagramSessionCryptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramSessionCryptInfoSigned_descriptor_, &CMsgSteamDatagramSessionCryptInfoSigned::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramDiagnostic_descriptor_, &CMsgSteamDatagramDiagnostic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramLinkInstantaneousStats_descriptor_, &CMsgSteamDatagramLinkInstantaneousStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramLinkLifetimeStats_descriptor_, &CMsgSteamDatagramLinkLifetimeStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionQuality_descriptor_, &CMsgSteamDatagramConnectionQuality::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto() {
  delete CMsgSteamDatagramRouterPingReply::default_instance_;
  delete CMsgSteamDatagramRouterPingReply_reflection_;
  delete CMsgSteamDatagramRouterPingReply_RouteException::default_instance_;
  delete CMsgSteamDatagramRouterPingReply_RouteException_reflection_;
  delete CMsgSteamDatagramSessionCryptInfo::default_instance_;
  delete CMsgSteamDatagramSessionCryptInfo_reflection_;
  delete CMsgSteamDatagramSessionCryptInfoSigned::default_instance_;
  delete CMsgSteamDatagramSessionCryptInfoSigned_reflection_;
  delete CMsgSteamDatagramDiagnostic::default_instance_;
  delete CMsgSteamDatagramDiagnostic_reflection_;
  delete CMsgSteamDatagramLinkInstantaneousStats::default_instance_;
  delete CMsgSteamDatagramLinkInstantaneousStats_reflection_;
  delete CMsgSteamDatagramLinkLifetimeStats::default_instance_;
  delete CMsgSteamDatagramLinkLifetimeStats_reflection_;
  delete CMsgSteamDatagramConnectionQuality::default_instance_;
  delete CMsgSteamDatagramConnectionQuality_reflection_;
}

void protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%steamnetworkingsockets_messages.proto\""
    "\261\003\n CMsgSteamDatagramRouterPingReply\022\030\n\020"
    "client_timestamp\030\001 \001(\007\022\"\n\026latency_datace"
    "nter_ids\030\002 \003(\007B\002\020\001\022\033\n\017latency_ping_ms\030\003 "
    "\003(\rB\002\020\001\022\026\n\016your_public_ip\030\004 \001(\007\022\023\n\013serve"
    "r_time\030\005 \001(\007\022\021\n\tchallenge\030\006 \001(\006\022\036\n\026secon"
    "ds_until_shutdown\030\007 \001(\r\022\025\n\rclient_cookie"
    "\030\010 \001(\007\022%\n\035scoring_penalty_relay_cluster\030"
    "\t \001(\r\022J\n\020route_exceptions\030\n \003(\01320.CMsgSt"
    "eamDatagramRouterPingReply.RouteExceptio"
    "n\032H\n\016RouteException\022\026\n\016data_center_id\030\001 "
    "\001(\007\022\r\n\005flags\030\002 \001(\r\022\017\n\007penalty\030\003 \001(\r\"\305\001\n!"
    "CMsgSteamDatagramSessionCryptInfo\022F\n\010key"
    "_type\030\001 \001(\0162+.CMsgSteamDatagramSessionCr"
    "yptInfo.EKeyType:\007INVALID\022\020\n\010key_data\030\002 "
    "\001(\014\022\r\n\005nonce\030\003 \001(\006\022\016\n\006is_snp\030\004 \001(\010\"\'\n\010EK"
    "eyType\022\013\n\007INVALID\020\000\022\016\n\nCURVE25519\020\001\"J\n\'C"
    "MsgSteamDatagramSessionCryptInfoSigned\022\014"
    "\n\004info\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\014\"=\n\033CMsgS"
    "teamDatagramDiagnostic\022\020\n\010severity\030\001 \001(\r"
    "\022\014\n\004text\030\002 \001(\t\"\213\002\n\'CMsgSteamDatagramLink"
    "InstantaneousStats\022\037\n\027out_packets_per_se"
    "c_x10\030\001 \001(\r\022\031\n\021out_bytes_per_sec\030\002 \001(\r\022\036"
    "\n\026in_packets_per_sec_x10\030\003 \001(\r\022\030\n\020in_byt"
    "es_per_sec\030\004 \001(\r\022\017\n\007ping_ms\030\005 \001(\r\022\033\n\023pac"
    "kets_dropped_pct\030\006 \001(\r\022\"\n\032packets_weird_"
    "sequence_pct\030\007 \001(\r\022\030\n\020peak_jitter_usec\030\010"
    " \001(\r\"\341\017\n\"CMsgSteamDatagramLinkLifetimeSt"
    "ats\022\024\n\014packets_sent\030\003 \001(\004\022\017\n\007kb_sent\030\004 \001"
    "(\004\022\024\n\014packets_recv\030\005 \001(\004\022\017\n\007kb_recv\030\006 \001("
    "\004\022\036\n\026packets_recv_sequenced\030\007 \001(\004\022\034\n\024pac"
    "kets_recv_dropped\030\010 \001(\004\022!\n\031packets_recv_"
    "out_of_order\030\t \001(\004\022\036\n\026packets_recv_dupli"
    "cate\030\n \001(\004\022\032\n\022packets_recv_lurch\030\013 \001(\004\022\035"
    "\n\025quality_histogram_100\030\025 \001(\r\022\034\n\024quality"
    "_histogram_99\030\026 \001(\r\022\034\n\024quality_histogram"
    "_97\030\027 \001(\r\022\034\n\024quality_histogram_95\030\030 \001(\r\022"
    "\034\n\024quality_histogram_90\030\031 \001(\r\022\034\n\024quality"
    "_histogram_75\030\032 \001(\r\022\034\n\024quality_histogram"
    "_50\030\033 \001(\r\022\033\n\023quality_histogram_1\030\034 \001(\r\022\036"
    "\n\026quality_histogram_dead\030\035 \001(\r\022\031\n\021qualit"
    "y_ntile_2nd\030\036 \001(\r\022\031\n\021quality_ntile_5th\030\037"
    " \001(\r\022\032\n\022quality_ntile_25th\030  \001(\r\022\032\n\022qual"
    "ity_ntile_50th\030! \001(\r\022\031\n\021ping_histogram_2"
    "5\030) \001(\r\022\031\n\021ping_histogram_50\030* \001(\r\022\031\n\021pi"
    "ng_histogram_75\030+ \001(\r\022\032\n\022ping_histogram_"
    "100\030, \001(\r\022\032\n\022ping_histogram_125\030- \001(\r\022\032\n"
    "\022ping_histogram_150\030. \001(\r\022\032\n\022ping_histog"
    "ram_200\030/ \001(\r\022\032\n\022ping_histogram_300\0300 \001("
    "\r\022\032\n\022ping_histogram_max\0301 \001(\r\022\026\n\016ping_nt"
    "ile_5th\0302 \001(\r\022\027\n\017ping_ntile_50th\0303 \001(\r\022\027"
    "\n\017ping_ntile_75th\0304 \001(\r\022\027\n\017ping_ntile_95"
    "th\0305 \001(\r\022\027\n\017ping_ntile_98th\0306 \001(\r\022#\n\033jit"
    "ter_histogram_negligible\030= \001(\r\022\032\n\022jitter"
    "_histogram_1\030> \001(\r\022\032\n\022jitter_histogram_2"
    "\030\? \001(\r\022\032\n\022jitter_histogram_5\030@ \001(\r\022\033\n\023ji"
    "tter_histogram_10\030A \001(\r\022\033\n\023jitter_histog"
    "ram_20\030B \001(\r\022\023\n\013txspeed_max\030C \001(\r\022\034\n\024txs"
    "peed_histogram_16\030D \001(\r\022\034\n\024txspeed_histo"
    "gram_32\030E \001(\r\022\034\n\024txspeed_histogram_64\030F "
    "\001(\r\022\035\n\025txspeed_histogram_128\030G \001(\r\022\035\n\025tx"
    "speed_histogram_256\030H \001(\r\022\035\n\025txspeed_his"
    "togram_512\030I \001(\r\022\036\n\026txspeed_histogram_10"
    "24\030J \001(\r\022\035\n\025txspeed_histogram_max\030K \001(\r\022"
    "\031\n\021txspeed_ntile_5th\030L \001(\r\022\032\n\022txspeed_nt"
    "ile_50th\030M \001(\r\022\032\n\022txspeed_ntile_75th\030N \001"
    "(\r\022\032\n\022txspeed_ntile_95th\030O \001(\r\022\032\n\022txspee"
    "d_ntile_98th\030P \001(\r\022\023\n\013rxspeed_max\030Q \001(\r\022"
    "\034\n\024rxspeed_histogram_16\030R \001(\r\022\034\n\024rxspeed"
    "_histogram_32\030S \001(\r\022\034\n\024rxspeed_histogram"
    "_64\030T \001(\r\022\035\n\025rxspeed_histogram_128\030U \001(\r"
    "\022\035\n\025rxspeed_histogram_256\030V \001(\r\022\035\n\025rxspe"
    "ed_histogram_512\030W \001(\r\022\036\n\026rxspeed_histog"
    "ram_1024\030X \001(\r\022\035\n\025rxspeed_histogram_max\030"
    "Y \001(\r\022\031\n\021rxspeed_ntile_5th\030Z \001(\r\022\032\n\022rxsp"
    "eed_ntile_50th\030[ \001(\r\022\032\n\022rxspeed_ntile_75"
    "th\030\\ \001(\r\022\032\n\022rxspeed_ntile_95th\030] \001(\r\022\032\n\022"
    "rxspeed_ntile_98th\030^ \001(\r\"\234\001\n\"CMsgSteamDa"
    "tagramConnectionQuality\022\?\n\rinstantaneous"
    "\030\001 \001(\0132(.CMsgSteamDatagramLinkInstantane"
    "ousStats\0225\n\010lifetime\030\002 \001(\0132#.CMsgSteamDa"
    "tagramLinkLifetimeStats*\351\t\n\023ESteamDatagr"
    "amMsgID\022\037\n\033k_ESteamDatagramMsg_Invalid\020\000"
    "\022)\n%k_ESteamDatagramMsg_RouterPingReques"
    "t\020\001\022\'\n#k_ESteamDatagramMsg_RouterPingRep"
    "ly\020\002\022-\n)k_ESteamDatagramMsg_GameserverPi"
    "ngRequest\020\003\022+\n\'k_ESteamDatagramMsg_Games"
    "erverPingReply\020\004\0220\n,k_ESteamDatagramMsg_"
    "GameserverSessionRequest\020\005\0224\n0k_ESteamDa"
    "tagramMsg_GameserverSessionEstablished\020\006"
    "\022!\n\035k_ESteamDatagramMsg_NoSession\020\007\022\"\n\036k"
    "_ESteamDatagramMsg_Diagnostic\020\010\022*\n&k_ESt"
    "eamDatagramMsg_DataClientToRouter\020\t\022*\n&k"
    "_ESteamDatagramMsg_DataRouterToServer\020\n\022"
    "*\n&k_ESteamDatagramMsg_DataServerToRoute"
    "r\020\013\022*\n&k_ESteamDatagramMsg_DataRouterToC"
    "lient\020\014\022\035\n\031k_ESteamDatagramMsg_Stats\020\r\022/"
    "\n+k_ESteamDatagramMsg_ClientPingSampleRe"
    "quest\020\016\022-\n)k_ESteamDatagramMsg_ClientPin"
    "gSampleReply\020\017\0225\n1k_ESteamDatagramMsg_Cl"
    "ientToRouterSwitchedPrimary\020\020\022#\n\037k_EStea"
    "mDatagramMsg_RelayHealth\020\021\022&\n\"k_ESteamDa"
    "tagramMsg_ConnectRequest\020\022\022!\n\035k_ESteamDa"
    "tagramMsg_ConnectOK\020\023\022(\n$k_ESteamDatagra"
    "mMsg_ConnectionClosed\020\024\022$\n k_ESteamDatag"
    "ramMsg_NoConnection\020\025\022/\n+k_ESteamDatagra"
    "mMsg_RelayToRelayPingRequest\020\026\022-\n)k_ESte"
    "amDatagramMsg_RelayToRelayPingReply\020\027\022)\n"
    "%k_ESteamDatagramMsg_P2PSessionRequest\020\030"
    "\022-\n)k_ESteamDatagramMsg_P2PSessionEstabl"
    "ished\020\031\022&\n\"k_ESteamDatagramMsg_P2PStatsC"
    "lient\020\032\022%\n!k_ESteamDatagramMsg_P2PStatsR"
    "elay\020\033\022#\n\037k_ESteamDatagramMsg_P2PBadRout"
    "e\020\034B\003\200\001\000", 4528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamnetworkingsockets_messages.proto", &protobuf_RegisterTypes);
  CMsgSteamDatagramRouterPingReply::default_instance_ = new CMsgSteamDatagramRouterPingReply();
  CMsgSteamDatagramRouterPingReply_RouteException::default_instance_ = new CMsgSteamDatagramRouterPingReply_RouteException();
  CMsgSteamDatagramSessionCryptInfo::default_instance_ = new CMsgSteamDatagramSessionCryptInfo();
  CMsgSteamDatagramSessionCryptInfoSigned::default_instance_ = new CMsgSteamDatagramSessionCryptInfoSigned();
  CMsgSteamDatagramDiagnostic::default_instance_ = new CMsgSteamDatagramDiagnostic();
  CMsgSteamDatagramLinkInstantaneousStats::default_instance_ = new CMsgSteamDatagramLinkInstantaneousStats();
  CMsgSteamDatagramLinkLifetimeStats::default_instance_ = new CMsgSteamDatagramLinkLifetimeStats();
  CMsgSteamDatagramConnectionQuality::default_instance_ = new CMsgSteamDatagramConnectionQuality();
  CMsgSteamDatagramRouterPingReply::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramRouterPingReply_RouteException::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramSessionCryptInfo::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramSessionCryptInfoSigned::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramDiagnostic::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramLinkInstantaneousStats::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramLinkLifetimeStats::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionQuality::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steamnetworkingsockets_5fmessages_2eproto {
  StaticDescriptorInitializer_steamnetworkingsockets_5fmessages_2eproto() {
    protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  }
} static_descriptor_initializer_steamnetworkingsockets_5fmessages_2eproto_;
const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESteamDatagramMsgID_descriptor_;
}
bool ESteamDatagramMsgID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramRouterPingReply_RouteException::kDataCenterIdFieldNumber;
const int CMsgSteamDatagramRouterPingReply_RouteException::kFlagsFieldNumber;
const int CMsgSteamDatagramRouterPingReply_RouteException::kPenaltyFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRouterPingReply_RouteException::InitAsDefaultInstance() {
}

CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(const CMsgSteamDatagramRouterPingReply_RouteException& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply_RouteException::SharedCtor() {
  _cached_size_ = 0;
  data_center_id_ = 0u;
  flags_ = 0u;
  penalty_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRouterPingReply_RouteException::~CMsgSteamDatagramRouterPingReply_RouteException() {
  SharedDtor();
}

void CMsgSteamDatagramRouterPingReply_RouteException::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRouterPingReply_RouteException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterPingReply_RouteException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRouterPingReply_RouteException_descriptor_;
}

const CMsgSteamDatagramRouterPingReply_RouteException& CMsgSteamDatagramRouterPingReply_RouteException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRouterPingReply_RouteException* CMsgSteamDatagramRouterPingReply_RouteException::default_instance_ = NULL;

CMsgSteamDatagramRouterPingReply_RouteException* CMsgSteamDatagramRouterPingReply_RouteException::New() const {
  return new CMsgSteamDatagramRouterPingReply_RouteException;
}

void CMsgSteamDatagramRouterPingReply_RouteException::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_center_id_ = 0u;
    flags_ = 0u;
    penalty_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRouterPingReply_RouteException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_center_id_)));
          set_has_data_center_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_penalty;
        break;
      }

      // optional uint32 penalty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_)));
          set_has_penalty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRouterPingReply_RouteException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 data_center_id = 1;
  if (has_data_center_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->data_center_id(), output);
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional uint32 penalty = 3;
  if (has_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->penalty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRouterPingReply_RouteException::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 data_center_id = 1;
  if (has_data_center_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->data_center_id(), target);
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional uint32 penalty = 3;
  if (has_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->penalty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRouterPingReply_RouteException::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 data_center_id = 1;
    if (has_data_center_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 penalty = 3;
    if (has_penalty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterPingReply_RouteException::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply_RouteException* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRouterPingReply_RouteException*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply_RouteException::MergeFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_center_id()) {
      set_data_center_id(from.data_center_id());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_penalty()) {
      set_penalty(from.penalty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRouterPingReply_RouteException::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply_RouteException::CopyFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply_RouteException::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRouterPingReply_RouteException::Swap(CMsgSteamDatagramRouterPingReply_RouteException* other) {
  if (other != this) {
    std::swap(data_center_id_, other->data_center_id_);
    std::swap(flags_, other->flags_);
    std::swap(penalty_, other->penalty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply_RouteException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRouterPingReply_RouteException_descriptor_;
  metadata.reflection = CMsgSteamDatagramRouterPingReply_RouteException_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramRouterPingReply::kClientTimestampFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kLatencyDatacenterIdsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kLatencyPingMsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kYourPublicIpFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kServerTimeFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kChallengeFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kClientCookieFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kRouteExceptionsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRouterPingReply::InitAsDefaultInstance() {
}

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(const CMsgSteamDatagramRouterPingReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply::SharedCtor() {
  _cached_size_ = 0;
  client_timestamp_ = 0u;
  your_public_ip_ = 0u;
  server_time_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  seconds_until_shutdown_ = 0u;
  client_cookie_ = 0u;
  scoring_penalty_relay_cluster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRouterPingReply::~CMsgSteamDatagramRouterPingReply() {
  SharedDtor();
}

void CMsgSteamDatagramRouterPingReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRouterPingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterPingReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRouterPingReply_descriptor_;
}

const CMsgSteamDatagramRouterPingReply& CMsgSteamDatagramRouterPingReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRouterPingReply* CMsgSteamDatagramRouterPingReply::default_instance_ = NULL;

CMsgSteamDatagramRouterPingReply* CMsgSteamDatagramRouterPingReply::New() const {
  return new CMsgSteamDatagramRouterPingReply;
}

void CMsgSteamDatagramRouterPingReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_timestamp_ = 0u;
    your_public_ip_ = 0u;
    server_time_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    seconds_until_shutdown_ = 0u;
    client_cookie_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scoring_penalty_relay_cluster_ = 0u;
  }
  latency_datacenter_ids_.Clear();
  latency_ping_ms_.Clear();
  route_exceptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRouterPingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
          set_has_client_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_latency_datacenter_ids;
        break;
      }

      // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latency_datacenter_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_latency_datacenter_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 18, input, this->mutable_latency_datacenter_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_latency_ping_ms;
        break;
      }

      // repeated uint32 latency_ping_ms = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latency_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_latency_ping_ms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_latency_ping_ms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_your_public_ip;
        break;
      }

      // optional fixed32 your_public_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_your_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_public_ip_)));
          set_has_your_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_server_time;
        break;
      }

      // optional fixed32 server_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_client_cookie;
        break;
      }

      // optional fixed32 client_cookie = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
          set_has_client_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_scoring_penalty_relay_cluster;
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoring_penalty_relay_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
          set_has_scoring_penalty_relay_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_route_exceptions;
        break;
      }

      // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_exceptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_route_exceptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_route_exceptions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRouterPingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_timestamp = 1;
  if (has_client_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_timestamp(), output);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->latency_datacenter_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latency_datacenter_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->latency_datacenter_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32NoTag(
      this->latency_datacenter_ids(i), output);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  if (this->latency_ping_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latency_ping_ms_cached_byte_size_);
  }
  for (int i = 0; i < this->latency_ping_ms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->latency_ping_ms(i), output);
  }

  // optional fixed32 your_public_ip = 4;
  if (has_your_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->your_public_ip(), output);
  }

  // optional fixed32 server_time = 5;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->server_time(), output);
  }

  // optional fixed64 challenge = 6;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->challenge(), output);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_cookie = 8;
  if (has_client_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->client_cookie(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (has_scoring_penalty_relay_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scoring_penalty_relay_cluster(), output);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  for (int i = 0; i < this->route_exceptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->route_exceptions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRouterPingReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_timestamp = 1;
  if (has_client_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_timestamp(), target);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->latency_datacenter_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _latency_datacenter_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->latency_datacenter_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->latency_datacenter_ids(i), target);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  if (this->latency_ping_ms_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _latency_ping_ms_cached_byte_size_, target);
  }
  for (int i = 0; i < this->latency_ping_ms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->latency_ping_ms(i), target);
  }

  // optional fixed32 your_public_ip = 4;
  if (has_your_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->your_public_ip(), target);
  }

  // optional fixed32 server_time = 5;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->server_time(), target);
  }

  // optional fixed64 challenge = 6;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 8;
  if (has_client_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->client_cookie(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (has_scoring_penalty_relay_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scoring_penalty_relay_cluster(), target);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  for (int i = 0; i < this->route_exceptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->route_exceptions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRouterPingReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_timestamp = 1;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_public_ip = 4;
    if (has_your_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_time = 5;
    if (has_server_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 6;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 7;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 client_cookie = 8;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 scoring_penalty_relay_cluster = 9;
    if (has_scoring_penalty_relay_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

  }
  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->latency_datacenter_ids_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latency_datacenter_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->latency_ping_ms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->latency_ping_ms(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latency_ping_ms_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  total_size += 1 * this->route_exceptions_size();
  for (int i = 0; i < this->route_exceptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->route_exceptions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRouterPingReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const CMsgSteamDatagramRouterPingReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  latency_datacenter_ids_.MergeFrom(from.latency_datacenter_ids_);
  latency_ping_ms_.MergeFrom(from.latency_ping_ms_);
  route_exceptions_.MergeFrom(from.route_exceptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_timestamp()) {
      set_client_timestamp(from.client_timestamp());
    }
    if (from.has_your_public_ip()) {
      set_your_public_ip(from.your_public_ip());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_client_cookie()) {
      set_client_cookie(from.client_cookie());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scoring_penalty_relay_cluster()) {
      set_scoring_penalty_relay_cluster(from.scoring_penalty_relay_cluster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const CMsgSteamDatagramRouterPingReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRouterPingReply::Swap(CMsgSteamDatagramRouterPingReply* other) {
  if (other != this) {
    std::swap(client_timestamp_, other->client_timestamp_);
    latency_datacenter_ids_.Swap(&other->latency_datacenter_ids_);
    latency_ping_ms_.Swap(&other->latency_ping_ms_);
    std::swap(your_public_ip_, other->your_public_ip_);
    std::swap(server_time_, other->server_time_);
    std::swap(challenge_, other->challenge_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(client_cookie_, other->client_cookie_);
    std::swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
    route_exceptions_.Swap(&other->route_exceptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRouterPingReply_descriptor_;
  metadata.reflection = CMsgSteamDatagramRouterPingReply_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor_;
}
bool CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::INVALID;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::CURVE25519;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::EKeyType_MIN;
const CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::EKeyType_MAX;
const int CMsgSteamDatagramSessionCryptInfo::EKeyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramSessionCryptInfo::kKeyTypeFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kKeyDataFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kNonceFieldNumber;
const int CMsgSteamDatagramSessionCryptInfo::kIsSnpFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramSessionCryptInfo::CMsgSteamDatagramSessionCryptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramSessionCryptInfo::InitAsDefaultInstance() {
}

CMsgSteamDatagramSessionCryptInfo::CMsgSteamDatagramSessionCryptInfo(const CMsgSteamDatagramSessionCryptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfo::SharedCtor() {
  _cached_size_ = 0;
  key_type_ = 0;
  key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nonce_ = GOOGLE_ULONGLONG(0);
  is_snp_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramSessionCryptInfo::~CMsgSteamDatagramSessionCryptInfo() {
  SharedDtor();
}

void CMsgSteamDatagramSessionCryptInfo::SharedDtor() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete key_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramSessionCryptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramSessionCryptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramSessionCryptInfo_descriptor_;
}

const CMsgSteamDatagramSessionCryptInfo& CMsgSteamDatagramSessionCryptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramSessionCryptInfo* CMsgSteamDatagramSessionCryptInfo::default_instance_ = NULL;

CMsgSteamDatagramSessionCryptInfo* CMsgSteamDatagramSessionCryptInfo::New() const {
  return new CMsgSteamDatagramSessionCryptInfo;
}

void CMsgSteamDatagramSessionCryptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_type_ = 0;
    if (has_key_data()) {
      if (key_data_ != &::google::protobuf::internal::kEmptyString) {
        key_data_->clear();
      }
    }
    nonce_ = GOOGLE_ULONGLONG(0);
    is_snp_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramSessionCryptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value)) {
            set_key_type(static_cast< ::CMsgSteamDatagramSessionCryptInfo_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key_data;
        break;
      }

      // optional bytes key_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_nonce;
        break;
      }

      // optional fixed64 nonce = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_snp;
        break;
      }

      // optional bool is_snp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_snp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_snp_)));
          set_has_is_snp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramSessionCryptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional bytes key_data = 2;
  if (has_key_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key_data(), output);
  }

  // optional fixed64 nonce = 3;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->nonce(), output);
  }

  // optional bool is_snp = 4;
  if (has_is_snp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_snp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramSessionCryptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional bytes key_data = 2;
  if (has_key_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional fixed64 nonce = 3;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->nonce(), target);
  }

  // optional bool is_snp = 4;
  if (has_is_snp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_snp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramSessionCryptInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1 [default = INVALID];
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional bytes key_data = 2;
    if (has_key_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional fixed64 nonce = 3;
    if (has_nonce()) {
      total_size += 1 + 8;
    }

    // optional bool is_snp = 4;
    if (has_is_snp()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramSessionCryptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramSessionCryptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramSessionCryptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSessionCryptInfo::MergeFrom(const CMsgSteamDatagramSessionCryptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_data()) {
      set_key_data(from.key_data());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_is_snp()) {
      set_is_snp(from.is_snp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramSessionCryptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfo::CopyFrom(const CMsgSteamDatagramSessionCryptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSessionCryptInfo::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramSessionCryptInfo::Swap(CMsgSteamDatagramSessionCryptInfo* other) {
  if (other != this) {
    std::swap(key_type_, other->key_type_);
    std::swap(key_data_, other->key_data_);
    std::swap(nonce_, other->nonce_);
    std::swap(is_snp_, other->is_snp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramSessionCryptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramSessionCryptInfo_descriptor_;
  metadata.reflection = CMsgSteamDatagramSessionCryptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramSessionCryptInfoSigned::kInfoFieldNumber;
const int CMsgSteamDatagramSessionCryptInfoSigned::kSignatureFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramSessionCryptInfoSigned::CMsgSteamDatagramSessionCryptInfoSigned()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramSessionCryptInfoSigned::InitAsDefaultInstance() {
}

CMsgSteamDatagramSessionCryptInfoSigned::CMsgSteamDatagramSessionCryptInfoSigned(const CMsgSteamDatagramSessionCryptInfoSigned& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfoSigned::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramSessionCryptInfoSigned::~CMsgSteamDatagramSessionCryptInfoSigned() {
  SharedDtor();
}

void CMsgSteamDatagramSessionCryptInfoSigned::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramSessionCryptInfoSigned::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramSessionCryptInfoSigned::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramSessionCryptInfoSigned_descriptor_;
}

const CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramSessionCryptInfoSigned::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramSessionCryptInfoSigned::default_instance_ = NULL;

CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramSessionCryptInfoSigned::New() const {
  return new CMsgSteamDatagramSessionCryptInfoSigned;
}

void CMsgSteamDatagramSessionCryptInfoSigned::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramSessionCryptInfoSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramSessionCryptInfoSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->info(), output);
  }

  // optional bytes signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramSessionCryptInfoSigned::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes info = 1;
  if (has_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->info(), target);
  }

  // optional bytes signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramSessionCryptInfoSigned::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->info());
    }

    // optional bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramSessionCryptInfoSigned* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramSessionCryptInfoSigned*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramSessionCryptInfoSigned::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramSessionCryptInfoSigned::CopyFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramSessionCryptInfoSigned::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramSessionCryptInfoSigned::Swap(CMsgSteamDatagramSessionCryptInfoSigned* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramSessionCryptInfoSigned::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramSessionCryptInfoSigned_descriptor_;
  metadata.reflection = CMsgSteamDatagramSessionCryptInfoSigned_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramDiagnostic::kSeverityFieldNumber;
const int CMsgSteamDatagramDiagnostic::kTextFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramDiagnostic::InitAsDefaultInstance() {
}

CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramDiagnostic::SharedCtor() {
  _cached_size_ = 0;
  severity_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramDiagnostic::~CMsgSteamDatagramDiagnostic() {
  SharedDtor();
}

void CMsgSteamDatagramDiagnostic::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramDiagnostic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDiagnostic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramDiagnostic_descriptor_;
}

const CMsgSteamDatagramDiagnostic& CMsgSteamDatagramDiagnostic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramDiagnostic* CMsgSteamDatagramDiagnostic::default_instance_ = NULL;

CMsgSteamDatagramDiagnostic* CMsgSteamDatagramDiagnostic::New() const {
  return new CMsgSteamDatagramDiagnostic;
}

void CMsgSteamDatagramDiagnostic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    severity_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramDiagnostic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 severity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramDiagnostic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 severity = 1;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->severity(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramDiagnostic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 severity = 1;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->severity(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramDiagnostic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 severity = 1;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramDiagnostic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramDiagnostic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const CMsgSteamDatagramDiagnostic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const CMsgSteamDatagramDiagnostic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDiagnostic::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramDiagnostic::Swap(CMsgSteamDatagramDiagnostic* other) {
  if (other != this) {
    std::swap(severity_, other->severity_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramDiagnostic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramDiagnostic_descriptor_;
  metadata.reflection = CMsgSteamDatagramDiagnostic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramLinkInstantaneousStats::kOutPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kOutBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPingMsFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsDroppedPctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsWeirdSequencePctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPeakJitterUsecFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance() {
}

CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedCtor() {
  _cached_size_ = 0;
  out_packets_per_sec_x10_ = 0u;
  out_bytes_per_sec_ = 0u;
  in_packets_per_sec_x10_ = 0u;
  in_bytes_per_sec_ = 0u;
  ping_ms_ = 0u;
  packets_dropped_pct_ = 0u;
  packets_weird_sequence_pct_ = 0u;
  peak_jitter_usec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramLinkInstantaneousStats::~CMsgSteamDatagramLinkInstantaneousStats() {
  SharedDtor();
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkInstantaneousStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramLinkInstantaneousStats_descriptor_;
}

const CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramLinkInstantaneousStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramLinkInstantaneousStats::default_instance_ = NULL;

CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramLinkInstantaneousStats::New() const {
  return new CMsgSteamDatagramLinkInstantaneousStats;
}

void CMsgSteamDatagramLinkInstantaneousStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    out_packets_per_sec_x10_ = 0u;
    out_bytes_per_sec_ = 0u;
    in_packets_per_sec_x10_ = 0u;
    in_bytes_per_sec_ = 0u;
    ping_ms_ = 0u;
    packets_dropped_pct_ = 0u;
    packets_weird_sequence_pct_ = 0u;
    peak_jitter_usec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramLinkInstantaneousStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 out_packets_per_sec_x10 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_packets_per_sec_x10_)));
          set_has_out_packets_per_sec_x10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_bytes_per_sec;
        break;
      }

      // optional uint32 out_bytes_per_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_bytes_per_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_per_sec_)));
          set_has_out_bytes_per_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_in_packets_per_sec_x10;
        break;
      }

      // optional uint32 in_packets_per_sec_x10 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_packets_per_sec_x10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_packets_per_sec_x10_)));
          set_has_in_packets_per_sec_x10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_in_bytes_per_sec;
        break;
      }

      // optional uint32 in_bytes_per_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_bytes_per_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_per_sec_)));
          set_has_in_bytes_per_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ping_ms;
        break;
      }

      // optional uint32 ping_ms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
          set_has_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_packets_dropped_pct;
        break;
      }

      // optional uint32 packets_dropped_pct = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_dropped_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_dropped_pct_)));
          set_has_packets_dropped_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_packets_weird_sequence_pct;
        break;
      }

      // optional uint32 packets_weird_sequence_pct = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_weird_sequence_pct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_weird_sequence_pct_)));
          set_has_packets_weird_sequence_pct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_peak_jitter_usec;
        break;
      }

      // optional uint32 peak_jitter_usec = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peak_jitter_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peak_jitter_usec_)));
          set_has_peak_jitter_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramLinkInstantaneousStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (has_out_packets_per_sec_x10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->out_packets_per_sec_x10(), output);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (has_out_bytes_per_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_bytes_per_sec(), output);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (has_in_packets_per_sec_x10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_packets_per_sec_x10(), output);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (has_in_bytes_per_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_bytes_per_sec(), output);
  }

  // optional uint32 ping_ms = 5;
  if (has_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping_ms(), output);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (has_packets_dropped_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->packets_dropped_pct(), output);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (has_packets_weird_sequence_pct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packets_weird_sequence_pct(), output);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (has_peak_jitter_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->peak_jitter_usec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramLinkInstantaneousStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (has_out_packets_per_sec_x10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->out_packets_per_sec_x10(), target);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (has_out_bytes_per_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_bytes_per_sec(), target);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (has_in_packets_per_sec_x10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_packets_per_sec_x10(), target);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (has_in_bytes_per_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_bytes_per_sec(), target);
  }

  // optional uint32 ping_ms = 5;
  if (has_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping_ms(), target);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (has_packets_dropped_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->packets_dropped_pct(), target);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (has_packets_weird_sequence_pct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packets_weird_sequence_pct(), target);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (has_peak_jitter_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->peak_jitter_usec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramLinkInstantaneousStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 out_packets_per_sec_x10 = 1;
    if (has_out_packets_per_sec_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_packets_per_sec_x10());
    }

    // optional uint32 out_bytes_per_sec = 2;
    if (has_out_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_per_sec());
    }

    // optional uint32 in_packets_per_sec_x10 = 3;
    if (has_in_packets_per_sec_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_packets_per_sec_x10());
    }

    // optional uint32 in_bytes_per_sec = 4;
    if (has_in_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_per_sec());
    }

    // optional uint32 ping_ms = 5;
    if (has_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

    // optional uint32 packets_dropped_pct = 6;
    if (has_packets_dropped_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_dropped_pct());
    }

    // optional uint32 packets_weird_sequence_pct = 7;
    if (has_packets_weird_sequence_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_weird_sequence_pct());
    }

    // optional uint32 peak_jitter_usec = 8;
    if (has_peak_jitter_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peak_jitter_usec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramLinkInstantaneousStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramLinkInstantaneousStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_packets_per_sec_x10()) {
      set_out_packets_per_sec_x10(from.out_packets_per_sec_x10());
    }
    if (from.has_out_bytes_per_sec()) {
      set_out_bytes_per_sec(from.out_bytes_per_sec());
    }
    if (from.has_in_packets_per_sec_x10()) {
      set_in_packets_per_sec_x10(from.in_packets_per_sec_x10());
    }
    if (from.has_in_bytes_per_sec()) {
      set_in_bytes_per_sec(from.in_bytes_per_sec());
    }
    if (from.has_ping_ms()) {
      set_ping_ms(from.ping_ms());
    }
    if (from.has_packets_dropped_pct()) {
      set_packets_dropped_pct(from.packets_dropped_pct());
    }
    if (from.has_packets_weird_sequence_pct()) {
      set_packets_weird_sequence_pct(from.packets_weird_sequence_pct());
    }
    if (from.has_peak_jitter_usec()) {
      set_peak_jitter_usec(from.peak_jitter_usec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkInstantaneousStats::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramLinkInstantaneousStats::Swap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  if (other != this) {
    std::swap(out_packets_per_sec_x10_, other->out_packets_per_sec_x10_);
    std::swap(out_bytes_per_sec_, other->out_bytes_per_sec_);
    std::swap(in_packets_per_sec_x10_, other->in_packets_per_sec_x10_);
    std::swap(in_bytes_per_sec_, other->in_bytes_per_sec_);
    std::swap(ping_ms_, other->ping_ms_);
    std::swap(packets_dropped_pct_, other->packets_dropped_pct_);
    std::swap(packets_weird_sequence_pct_, other->packets_weird_sequence_pct_);
    std::swap(peak_jitter_usec_, other->peak_jitter_usec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramLinkInstantaneousStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramLinkInstantaneousStats_descriptor_;
  metadata.reflection = CMsgSteamDatagramLinkInstantaneousStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvSequencedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDroppedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvOutOfOrderFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDuplicateFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvLurchFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram99FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram97FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram95FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram90FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogramDeadFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile2NdFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile25ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram25FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram125FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram150FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram200FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram300FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile98ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogramNegligibleFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram2FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram5FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram10FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram20FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram16FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram32FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram64FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram128FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram256FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram512FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogram1024FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kTxspeedNtile98ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram16FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram32FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram64FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram128FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram256FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram512FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogram1024FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kRxspeedNtile98ThFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance() {
}

CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkLifetimeStats::SharedCtor() {
  _cached_size_ = 0;
  packets_sent_ = GOOGLE_ULONGLONG(0);
  kb_sent_ = GOOGLE_ULONGLONG(0);
  packets_recv_ = GOOGLE_ULONGLONG(0);
  kb_recv_ = GOOGLE_ULONGLONG(0);
  packets_recv_sequenced_ = GOOGLE_ULONGLONG(0);
  packets_recv_dropped_ = GOOGLE_ULONGLONG(0);
  packets_recv_out_of_order_ = GOOGLE_ULONGLONG(0);
  packets_recv_duplicate_ = GOOGLE_ULONGLONG(0);
  packets_recv_lurch_ = GOOGLE_ULONGLONG(0);
  quality_histogram_100_ = 0u;
  quality_histogram_99_ = 0u;
  quality_histogram_97_ = 0u;
  quality_histogram_95_ = 0u;
  quality_histogram_90_ = 0u;
  quality_histogram_75_ = 0u;
  quality_histogram_50_ = 0u;
  quality_histogram_1_ = 0u;
  quality_histogram_dead_ = 0u;
  quality_ntile_2nd_ = 0u;
  quality_ntile_5th_ = 0u;
  quality_ntile_25th_ = 0u;
  quality_ntile_50th_ = 0u;
  ping_histogram_25_ = 0u;
  ping_histogram_50_ = 0u;
  ping_histogram_75_ = 0u;
  ping_histogram_100_ = 0u;
  ping_histogram_125_ = 0u;
  ping_histogram_150_ = 0u;
  ping_histogram_200_ = 0u;
  ping_histogram_300_ = 0u;
  ping_histogram_max_ = 0u;
  ping_ntile_5th_ = 0u;
  ping_ntile_50th_ = 0u;
  ping_ntile_75th_ = 0u;
  ping_ntile_95th_ = 0u;
  ping_ntile_98th_ = 0u;
  jitter_histogram_negligible_ = 0u;
  jitter_histogram_1_ = 0u;
  jitter_histogram_2_ = 0u;
  jitter_histogram_5_ = 0u;
  jitter_histogram_10_ = 0u;
  jitter_histogram_20_ = 0u;
  txspeed_max_ = 0u;
  txspeed_histogram_16_ = 0u;
  txspeed_histogram_32_ = 0u;
  txspeed_histogram_64_ = 0u;
  txspeed_histogram_128_ = 0u;
  txspeed_histogram_256_ = 0u;
  txspeed_histogram_512_ = 0u;
  txspeed_histogram_1024_ = 0u;
  txspeed_histogram_max_ = 0u;
  txspeed_ntile_5th_ = 0u;
  txspeed_ntile_50th_ = 0u;
  txspeed_ntile_75th_ = 0u;
  txspeed_ntile_95th_ = 0u;
  txspeed_ntile_98th_ = 0u;
  rxspeed_max_ = 0u;
  rxspeed_histogram_16_ = 0u;
  rxspeed_histogram_32_ = 0u;
  rxspeed_histogram_64_ = 0u;
  rxspeed_histogram_128_ = 0u;
  rxspeed_histogram_256_ = 0u;
  rxspeed_histogram_512_ = 0u;
  rxspeed_histogram_1024_ = 0u;
  rxspeed_histogram_max_ = 0u;
  rxspeed_ntile_5th_ = 0u;
  rxspeed_ntile_50th_ = 0u;
  rxspeed_ntile_75th_ = 0u;
  rxspeed_ntile_95th_ = 0u;
  rxspeed_ntile_98th_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramLinkLifetimeStats::~CMsgSteamDatagramLinkLifetimeStats() {
  SharedDtor();
}

void CMsgSteamDatagramLinkLifetimeStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramLinkLifetimeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkLifetimeStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramLinkLifetimeStats_descriptor_;
}

const CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramLinkLifetimeStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramLinkLifetimeStats::default_instance_ = NULL;

CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramLinkLifetimeStats::New() const {
  return new CMsgSteamDatagramLinkLifetimeStats;
}

void CMsgSteamDatagramLinkLifetimeStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packets_sent_ = GOOGLE_ULONGLONG(0);
    kb_sent_ = GOOGLE_ULONGLONG(0);
    packets_recv_ = GOOGLE_ULONGLONG(0);
    kb_recv_ = GOOGLE_ULONGLONG(0);
    packets_recv_sequenced_ = GOOGLE_ULONGLONG(0);
    packets_recv_dropped_ = GOOGLE_ULONGLONG(0);
    packets_recv_out_of_order_ = GOOGLE_ULONGLONG(0);
    packets_recv_duplicate_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    packets_recv_lurch_ = GOOGLE_ULONGLONG(0);
    quality_histogram_100_ = 0u;
    quality_histogram_99_ = 0u;
    quality_histogram_97_ = 0u;
    quality_histogram_95_ = 0u;
    quality_histogram_90_ = 0u;
    quality_histogram_75_ = 0u;
    quality_histogram_50_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    quality_histogram_1_ = 0u;
    quality_histogram_dead_ = 0u;
    quality_ntile_2nd_ = 0u;
    quality_ntile_5th_ = 0u;
    quality_ntile_25th_ = 0u;
    quality_ntile_50th_ = 0u;
    ping_histogram_25_ = 0u;
    ping_histogram_50_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ping_histogram_75_ = 0u;
    ping_histogram_100_ = 0u;
    ping_histogram_125_ = 0u;
    ping_histogram_150_ = 0u;
    ping_histogram_200_ = 0u;
    ping_histogram_300_ = 0u;
    ping_histogram_max_ = 0u;
    ping_ntile_5th_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    ping_ntile_50th_ = 0u;
    ping_ntile_75th_ = 0u;
    ping_ntile_95th_ = 0u;
    ping_ntile_98th_ = 0u;
    jitter_histogram_negligible_ = 0u;
    jitter_histogram_1_ = 0u;
    jitter_histogram_2_ = 0u;
    jitter_histogram_5_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    jitter_histogram_10_ = 0u;
    jitter_histogram_20_ = 0u;
    txspeed_max_ = 0u;
    txspeed_histogram_16_ = 0u;
    txspeed_histogram_32_ = 0u;
    txspeed_histogram_64_ = 0u;
    txspeed_histogram_128_ = 0u;
    txspeed_histogram_256_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    txspeed_histogram_512_ = 0u;
    txspeed_histogram_1024_ = 0u;
    txspeed_histogram_max_ = 0u;
    txspeed_ntile_5th_ = 0u;
    txspeed_ntile_50th_ = 0u;
    txspeed_ntile_75th_ = 0u;
    txspeed_ntile_95th_ = 0u;
    txspeed_ntile_98th_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    rxspeed_max_ = 0u;
    rxspeed_histogram_16_ = 0u;
    rxspeed_histogram_32_ = 0u;
    rxspeed_histogram_64_ = 0u;
    rxspeed_histogram_128_ = 0u;
    rxspeed_histogram_256_ = 0u;
    rxspeed_histogram_512_ = 0u;
    rxspeed_histogram_1024_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    rxspeed_histogram_max_ = 0u;
    rxspeed_ntile_5th_ = 0u;
    rxspeed_ntile_50th_ = 0u;
    rxspeed_ntile_75th_ = 0u;
    rxspeed_ntile_95th_ = 0u;
    rxspeed_ntile_98th_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramLinkLifetimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 packets_sent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_sent_)));
          set_has_packets_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kb_sent;
        break;
      }

      // optional uint64 kb_sent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kb_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_sent_)));
          set_has_kb_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_packets_recv;
        break;
      }

      // optional uint64 packets_recv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_)));
          set_has_packets_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_kb_recv;
        break;
      }

      // optional uint64 kb_recv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kb_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_recv_)));
          set_has_kb_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_packets_recv_sequenced;
        break;
      }

      // optional uint64 packets_recv_sequenced = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_sequenced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_sequenced_)));
          set_has_packets_recv_sequenced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_packets_recv_dropped;
        break;
      }

      // optional uint64 packets_recv_dropped = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_dropped_)));
          set_has_packets_recv_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_packets_recv_out_of_order;
        break;
      }

      // optional uint64 packets_recv_out_of_order = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_out_of_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_out_of_order_)));
          set_has_packets_recv_out_of_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_packets_recv_duplicate;
        break;
      }

      // optional uint64 packets_recv_duplicate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_duplicate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_duplicate_)));
          set_has_packets_recv_duplicate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_packets_recv_lurch;
        break;
      }

      // optional uint64 packets_recv_lurch = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets_recv_lurch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_lurch_)));
          set_has_packets_recv_lurch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_quality_histogram_100;
        break;
      }

      // optional uint32 quality_histogram_100 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_100:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_100_)));
          set_has_quality_histogram_100();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_quality_histogram_99;
        break;
      }

      // optional uint32 quality_histogram_99 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_99:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_99_)));
          set_has_quality_histogram_99();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_quality_histogram_97;
        break;
      }

      // optional uint32 quality_histogram_97 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_97:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_97_)));
          set_has_quality_histogram_97();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_quality_histogram_95;
        break;
      }

      // optional uint32 quality_histogram_95 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_95:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_95_)));
          set_has_quality_histogram_95();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_quality_histogram_90;
        break;
      }

      // optional uint32 quality_histogram_90 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_90:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_90_)));
          set_has_quality_histogram_90();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_quality_histogram_75;
        break;
      }

      // optional uint32 quality_histogram_75 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_75:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_75_)));
          set_has_quality_histogram_75();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_quality_histogram_50;
        break;
      }

      // optional uint32 quality_histogram_50 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_50:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_50_)));
          set_has_quality_histogram_50();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_quality_histogram_1;
        break;
      }

      // optional uint32 quality_histogram_1 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_1_)));
          set_has_quality_histogram_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_quality_histogram_dead;
        break;
      }

      // optional uint32 quality_histogram_dead = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_histogram_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_dead_)));
          set_has_quality_histogram_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_quality_ntile_2nd;
        break;
      }

      // optional uint32 quality_ntile_2nd = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ntile_2nd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_2nd_)));
          set_has_quality_ntile_2nd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_quality_ntile_5th;
        break;
      }

      // optional uint32 quality_ntile_5th = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ntile_5th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_5th_)));
          set_has_quality_ntile_5th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_quality_ntile_25th;
        break;
      }

      // optional uint32 quality_ntile_25th = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ntile_25th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_25th_)));
          set_has_quality_ntile_25th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_quality_ntile_50th;
        break;
      }

      // optional uint32 quality_ntile_50th = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_ntile_50th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_50th_)));
          set_has_quality_ntile_50th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_ping_histogram_25;
        break;
      }

      // optional uint32 ping_histogram_25 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_25:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_25_)));
          set_has_ping_histogram_25();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_ping_histogram_50;
        break;
      }

      // optional uint32 ping_histogram_50 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_50:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_50_)));
          set_has_ping_histogram_50();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_ping_histogram_75;
        break;
      }

      // optional uint32 ping_histogram_75 = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_75:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_75_)));
          set_has_ping_histogram_75();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_ping_histogram_100;
        break;
      }

      // optional uint32 ping_histogram_100 = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_100:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_100_)));
          set_has_ping_histogram_100();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_ping_histogram_125;
        break;
      }

      // optional uint32 ping_histogram_125 = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_125:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_125_)));
          set_has_ping_histogram_125();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_ping_histogram_150;
        break;
      }

      // optional uint32 ping_histogram_150 = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_150:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_150_)));
          set_has_ping_histogram_150();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_ping_histogram_200;
        break;
      }

      // optional uint32 ping_histogram_200 = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_200:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_200_)));
          set_has_ping_histogram_200();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_ping_histogram_300;
        break;
      }

      // optional uint32 ping_histogram_300 = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_300:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_300_)));
          set_has_ping_histogram_300();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_ping_histogram_max;
        break;
      }

      // optional uint32 ping_histogram_max = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_histogram_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_max_)));
          set_has_ping_histogram_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_ping_ntile_5th;
        break;
      }

      // optional uint32 ping_ntile_5th = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_5th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_5th_)));
          set_has_ping_ntile_5th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_ping_ntile_50th;
        break;
      }

      // optional uint32 ping_ntile_50th = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_50th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_50th_)));
          set_has_ping_ntile_50th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_ping_ntile_75th;
        break;
      }

      // optional uint32 ping_ntile_75th = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_75th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_75th_)));
          set_has_ping_ntile_75th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_ping_ntile_95th;
        break;
      }

      // optional uint32 ping_ntile_95th = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_95th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_95th_)));
          set_has_ping_ntile_95th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_ping_ntile_98th;
        break;
      }

      // optional uint32 ping_ntile_98th = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ntile_98th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_98th_)));
          set_has_ping_ntile_98th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_jitter_histogram_negligible;
        break;
      }

      // optional uint32 jitter_histogram_negligible = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_negligible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_negligible_)));
          set_has_jitter_histogram_negligible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_jitter_histogram_1;
        break;
      }

      // optional uint32 jitter_histogram_1 = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_1_)));
          set_has_jitter_histogram_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_jitter_histogram_2;
        break;
      }

      // optional uint32 jitter_histogram_2 = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_2_)));
          set_has_jitter_histogram_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_jitter_histogram_5;
        break;
      }

      // optional uint32 jitter_histogram_5 = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_5_)));
          set_has_jitter_histogram_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_jitter_histogram_10;
        break;
      }

      // optional uint32 jitter_histogram_10 = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_10_)));
          set_has_jitter_histogram_10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_jitter_histogram_20;
        break;
      }

      // optional uint32 jitter_histogram_20 = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jitter_histogram_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_20_)));
          set_has_jitter_histogram_20();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_txspeed_max;
        break;
      }

      // optional uint32 txspeed_max = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_max_)));
          set_has_txspeed_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_txspeed_histogram_16;
        break;
      }

      // optional uint32 txspeed_histogram_16 = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_histogram_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_16_)));
          set_has_txspeed_histogram_16();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_txspeed_histogram_32;
        break;
      }

      // optional uint32 txspeed_histogram_32 = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_histogram_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_32_)));
          set_has_txspeed_histogram_32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_txspeed_histogram_64;
        break;
      }

      // optional uint32 txspeed_histogram_64 = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_histogram_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_64_)));
          set_has_txspeed_histogram_64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_txspeed_histogram_128;
        break;
      }

      // optional uint32 txspeed_histogram_128 = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_histogram_128:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_128_)));
          set_has_txspeed_histogram_128();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_txspeed_histogram_256;
        break;
      }

      // optional uint32 txspeed_histogram_256 = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_histogram_256:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_256_)));
          set_has_txspeed_histogram_256();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_txspeed_histogram_512;
        break;
      }

      // optional uint32 txspeed_histogram_512 = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_histogram_512:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_512_)));
          set_has_txspeed_histogram_512();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_txspeed_histogram_1024;
        break;
      }

      // optional uint32 txspeed_histogram_1024 = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_histogram_1024:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_1024_)));
          set_has_txspeed_histogram_1024();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_txspeed_histogram_max;
        break;
      }

      // optional uint32 txspeed_histogram_max = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_histogram_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_histogram_max_)));
          set_has_txspeed_histogram_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_txspeed_ntile_5th;
        break;
      }

      // optional uint32 txspeed_ntile_5th = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_ntile_5th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_5th_)));
          set_has_txspeed_ntile_5th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_txspeed_ntile_50th;
        break;
      }

      // optional uint32 txspeed_ntile_50th = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_ntile_50th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_50th_)));
          set_has_txspeed_ntile_50th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_txspeed_ntile_75th;
        break;
      }

      // optional uint32 txspeed_ntile_75th = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_ntile_75th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_75th_)));
          set_has_txspeed_ntile_75th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_txspeed_ntile_95th;
        break;
      }

      // optional uint32 txspeed_ntile_95th = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_ntile_95th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_95th_)));
          set_has_txspeed_ntile_95th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_txspeed_ntile_98th;
        break;
      }

      // optional uint32 txspeed_ntile_98th = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txspeed_ntile_98th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txspeed_ntile_98th_)));
          set_has_txspeed_ntile_98th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_rxspeed_max;
        break;
      }

      // optional uint32 rxspeed_max = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_max_)));
          set_has_rxspeed_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_rxspeed_histogram_16;
        break;
      }

      // optional uint32 rxspeed_histogram_16 = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_histogram_16:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_16_)));
          set_has_rxspeed_histogram_16();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_rxspeed_histogram_32;
        break;
      }

      // optional uint32 rxspeed_histogram_32 = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_histogram_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_32_)));
          set_has_rxspeed_histogram_32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_rxspeed_histogram_64;
        break;
      }

      // optional uint32 rxspeed_histogram_64 = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_histogram_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_64_)));
          set_has_rxspeed_histogram_64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_rxspeed_histogram_128;
        break;
      }

      // optional uint32 rxspeed_histogram_128 = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_histogram_128:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_128_)));
          set_has_rxspeed_histogram_128();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_rxspeed_histogram_256;
        break;
      }

      // optional uint32 rxspeed_histogram_256 = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_histogram_256:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_256_)));
          set_has_rxspeed_histogram_256();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(696)) goto parse_rxspeed_histogram_512;
        break;
      }

      // optional uint32 rxspeed_histogram_512 = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_histogram_512:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_512_)));
          set_has_rxspeed_histogram_512();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_rxspeed_histogram_1024;
        break;
      }

      // optional uint32 rxspeed_histogram_1024 = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_histogram_1024:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_1024_)));
          set_has_rxspeed_histogram_1024();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(712)) goto parse_rxspeed_histogram_max;
        break;
      }

      // optional uint32 rxspeed_histogram_max = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_histogram_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_histogram_max_)));
          set_has_rxspeed_histogram_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(720)) goto parse_rxspeed_ntile_5th;
        break;
      }

      // optional uint32 rxspeed_ntile_5th = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_ntile_5th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_5th_)));
          set_has_rxspeed_ntile_5th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_rxspeed_ntile_50th;
        break;
      }

      // optional uint32 rxspeed_ntile_50th = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_ntile_50th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_50th_)));
          set_has_rxspeed_ntile_50th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_rxspeed_ntile_75th;
        break;
      }

      // optional uint32 rxspeed_ntile_75th = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_ntile_75th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_75th_)));
          set_has_rxspeed_ntile_75th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_rxspeed_ntile_95th;
        break;
      }

      // optional uint32 rxspeed_ntile_95th = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_ntile_95th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_95th_)));
          set_has_rxspeed_ntile_95th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(752)) goto parse_rxspeed_ntile_98th;
        break;
      }

      // optional uint32 rxspeed_ntile_98th = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rxspeed_ntile_98th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rxspeed_ntile_98th_)));
          set_has_rxspeed_ntile_98th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramLinkLifetimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 packets_sent = 3;
  if (has_packets_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->packets_sent(), output);
  }

  // optional uint64 kb_sent = 4;
  if (has_kb_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->kb_sent(), output);
  }

  // optional uint64 packets_recv = 5;
  if (has_packets_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->packets_recv(), output);
  }

  // optional uint64 kb_recv = 6;
  if (has_kb_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->kb_recv(), output);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (has_packets_recv_sequenced()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->packets_recv_sequenced(), output);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (has_packets_recv_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->packets_recv_dropped(), output);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (has_packets_recv_out_of_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->packets_recv_out_of_order(), output);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (has_packets_recv_duplicate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->packets_recv_duplicate(), output);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (has_packets_recv_lurch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->packets_recv_lurch(), output);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (has_quality_histogram_100()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->quality_histogram_100(), output);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (has_quality_histogram_99()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->quality_histogram_99(), output);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (has_quality_histogram_97()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->quality_histogram_97(), output);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (has_quality_histogram_95()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->quality_histogram_95(), output);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (has_quality_histogram_90()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->quality_histogram_90(), output);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (has_quality_histogram_75()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->quality_histogram_75(), output);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (has_quality_histogram_50()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->quality_histogram_50(), output);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (has_quality_histogram_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->quality_histogram_1(), output);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (has_quality_histogram_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->quality_histogram_dead(), output);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (has_quality_ntile_2nd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->quality_ntile_2nd(), output);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (has_quality_ntile_5th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->quality_ntile_5th(), output);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (has_quality_ntile_25th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->quality_ntile_25th(), output);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (has_quality_ntile_50th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->quality_ntile_50th(), output);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (has_ping_histogram_25()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ping_histogram_25(), output);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (has_ping_histogram_50()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->ping_histogram_50(), output);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (has_ping_histogram_75()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->ping_histogram_75(), output);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (has_ping_histogram_100()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->ping_histogram_100(), output);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (has_ping_histogram_125()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->ping_histogram_125(), output);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (has_ping_histogram_150()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->ping_histogram_150(), output);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (has_ping_histogram_200()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->ping_histogram_200(), output);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (has_ping_histogram_300()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->ping_histogram_300(), output);
  }

  // optional uint32 ping_histogram_max = 49;
  if (has_ping_histogram_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->ping_histogram_max(), output);
  }

  // optional uint32 ping_ntile_5th = 50;
  if (has_ping_ntile_5th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->ping_ntile_5th(), output);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (has_ping_ntile_50th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->ping_ntile_50th(), output);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (has_ping_ntile_75th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->ping_ntile_75th(), output);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (has_ping_ntile_95th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->ping_ntile_95th(), output);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (has_ping_ntile_98th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->ping_ntile_98th(), output);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (has_jitter_histogram_negligible()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->jitter_histogram_negligible(), output);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (has_jitter_histogram_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->jitter_histogram_1(), output);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (has_jitter_histogram_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->jitter_histogram_2(), output);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (has_jitter_histogram_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->jitter_histogram_5(), output);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (has_jitter_histogram_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->jitter_histogram_10(), output);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (has_jitter_histogram_20()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->jitter_histogram_20(), output);
  }

  // optional uint32 txspeed_max = 67;
  if (has_txspeed_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->txspeed_max(), output);
  }

  // optional uint32 txspeed_histogram_16 = 68;
  if (has_txspeed_histogram_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->txspeed_histogram_16(), output);
  }

  // optional uint32 txspeed_histogram_32 = 69;
  if (has_txspeed_histogram_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->txspeed_histogram_32(), output);
  }

  // optional uint32 txspeed_histogram_64 = 70;
  if (has_txspeed_histogram_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->txspeed_histogram_64(), output);
  }

  // optional uint32 txspeed_histogram_128 = 71;
  if (has_txspeed_histogram_128()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->txspeed_histogram_128(), output);
  }

  // optional uint32 txspeed_histogram_256 = 72;
  if (has_txspeed_histogram_256()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->txspeed_histogram_256(), output);
  }

  // optional uint32 txspeed_histogram_512 = 73;
  if (has_txspeed_histogram_512()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(73, this->txspeed_histogram_512(), output);
  }

  // optional uint32 txspeed_histogram_1024 = 74;
  if (has_txspeed_histogram_1024()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->txspeed_histogram_1024(), output);
  }

  // optional uint32 txspeed_histogram_max = 75;
  if (has_txspeed_histogram_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->txspeed_histogram_max(), output);
  }

  // optional uint32 txspeed_ntile_5th = 76;
  if (has_txspeed_ntile_5th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(76, this->txspeed_ntile_5th(), output);
  }

  // optional uint32 txspeed_ntile_50th = 77;
  if (has_txspeed_ntile_50th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(77, this->txspeed_ntile_50th(), output);
  }

  // optional uint32 txspeed_ntile_75th = 78;
  if (has_txspeed_ntile_75th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->txspeed_ntile_75th(), output);
  }

  // optional uint32 txspeed_ntile_95th = 79;
  if (has_txspeed_ntile_95th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->txspeed_ntile_95th(), output);
  }

  // optional uint32 txspeed_ntile_98th = 80;
  if (has_txspeed_ntile_98th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->txspeed_ntile_98th(), output);
  }

  // optional uint32 rxspeed_max = 81;
  if (has_rxspeed_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->rxspeed_max(), output);
  }

  // optional uint32 rxspeed_histogram_16 = 82;
  if (has_rxspeed_histogram_16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(82, this->rxspeed_histogram_16(), output);
  }

  // optional uint32 rxspeed_histogram_32 = 83;
  if (has_rxspeed_histogram_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(83, this->rxspeed_histogram_32(), output);
  }

  // optional uint32 rxspeed_histogram_64 = 84;
  if (has_rxspeed_histogram_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->rxspeed_histogram_64(), output);
  }

  // optional uint32 rxspeed_histogram_128 = 85;
  if (has_rxspeed_histogram_128()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->rxspeed_histogram_128(), output);
  }

  // optional uint32 rxspeed_histogram_256 = 86;
  if (has_rxspeed_histogram_256()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->rxspeed_histogram_256(), output);
  }

  // optional uint32 rxspeed_histogram_512 = 87;
  if (has_rxspeed_histogram_512()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->rxspeed_histogram_512(), output);
  }

  // optional uint32 rxspeed_histogram_1024 = 88;
  if (has_rxspeed_histogram_1024()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(88, this->rxspeed_histogram_1024(), output);
  }

  // optional uint32 rxspeed_histogram_max = 89;
  if (has_rxspeed_histogram_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->rxspeed_histogram_max(), output);
  }

  // optional uint32 rxspeed_ntile_5th = 90;
  if (has_rxspeed_ntile_5th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->rxspeed_ntile_5th(), output);
  }

  // optional uint32 rxspeed_ntile_50th = 91;
  if (has_rxspeed_ntile_50th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->rxspeed_ntile_50th(), output);
  }

  // optional uint32 rxspeed_ntile_75th = 92;
  if (has_rxspeed_ntile_75th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->rxspeed_ntile_75th(), output);
  }

  // optional uint32 rxspeed_ntile_95th = 93;
  if (has_rxspeed_ntile_95th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(93, this->rxspeed_ntile_95th(), output);
  }

  // optional uint32 rxspeed_ntile_98th = 94;
  if (has_rxspeed_ntile_98th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(94, this->rxspeed_ntile_98th(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramLinkLifetimeStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 packets_sent = 3;
  if (has_packets_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->packets_sent(), target);
  }

  // optional uint64 kb_sent = 4;
  if (has_kb_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->kb_sent(), target);
  }

  // optional uint64 packets_recv = 5;
  if (has_packets_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->packets_recv(), target);
  }

  // optional uint64 kb_recv = 6;
  if (has_kb_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->kb_recv(), target);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (has_packets_recv_sequenced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->packets_recv_sequenced(), target);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (has_packets_recv_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->packets_recv_dropped(), target);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (has_packets_recv_out_of_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->packets_recv_out_of_order(), target);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (has_packets_recv_duplicate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->packets_recv_duplicate(), target);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (has_packets_recv_lurch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->packets_recv_lurch(), target);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (has_quality_histogram_100()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->quality_histogram_100(), target);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (has_quality_histogram_99()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->quality_histogram_99(), target);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (has_quality_histogram_97()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->quality_histogram_97(), target);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (has_quality_histogram_95()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->quality_histogram_95(), target);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (has_quality_histogram_90()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->quality_histogram_90(), target);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (has_quality_histogram_75()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->quality_histogram_75(), target);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (has_quality_histogram_50()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->quality_histogram_50(), target);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (has_quality_histogram_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->quality_histogram_1(), target);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (has_quality_histogram_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->quality_histogram_dead(), target);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (has_quality_ntile_2nd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->quality_ntile_2nd(), target);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (has_quality_ntile_5th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->quality_ntile_5th(), target);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (has_quality_ntile_25th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->quality_ntile_25th(), target);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (has_quality_ntile_50th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->quality_ntile_50th(), target);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (has_ping_histogram_25()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ping_histogram_25(), target);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (has_ping_histogram_50()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->ping_histogram_50(), target);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (has_ping_histogram_75()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->ping_histogram_75(), target);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (has_ping_histogram_100()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->ping_histogram_100(), target);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (has_ping_histogram_125()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->ping_histogram_125(), target);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (has_ping_histogram_150()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->ping_histogram_150(), target);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (has_ping_histogram_200()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->ping_histogram_200(), target);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (has_ping_histogram_300()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->ping_histogram_300(), target);
  }

  // optional uint32 ping_histogram_max = 49;
  if (has_ping_histogram_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->ping_histogram_max(), target);
  }

  // optional uint32 ping_ntile_5th = 50;
  if (has_ping_ntile_5th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->ping_ntile_5th(), target);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (has_ping_ntile_50th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->ping_ntile_50th(), target);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (has_ping_ntile_75th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->ping_ntile_75th(), target);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (has_ping_ntile_95th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->ping_ntile_95th(), target);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (has_ping_ntile_98th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->ping_ntile_98th(), target);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (has_jitter_histogram_negligible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->jitter_histogram_negligible(), target);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (has_jitter_histogram_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->jitter_histogram_1(), target);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (has_jitter_histogram_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->jitter_histogram_2(), target);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (has_jitter_histogram_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->jitter_histogram_5(), target);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (has_jitter_histogram_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->jitter_histogram_10(), target);
  }

  // optional uint32 jitter_histogram_20 = 66;
  if (has_jitter_histogram_20()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->jitter_histogram_20(), target);
  }

  // optional uint32 txspeed_max = 67;
  if (has_txspeed_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->txspeed_max(), target);
  }

  // optional uint32 txspeed_histogram_16 = 68;
  if (has_txspeed_histogram_16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->txspeed_histogram_16(), target);
  }

  // optional uint32 txspeed_histogram_32 = 69;
  if (has_txspeed_histogram_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->txspeed_histogram_32(), target);
  }

  // optional uint32 txspeed_histogram_64 = 70;
  if (has_txspeed_histogram_64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->txspeed_histogram_64(), target);
  }

  // optional uint32 txspeed_histogram_128 = 71;
  if (has_txspeed_histogram_128()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->txspeed_histogram_128(), target);
  }

  // optional uint32 txspeed_histogram_256 = 72;
  if (has_txspeed_histogram_256()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->txspeed_histogram_256(), target);
  }

  // optional uint32 txspeed_histogram_512 = 73;
  if (has_txspeed_histogram_512()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(73, this->txspeed_histogram_512(), target);
  }

  // optional uint32 txspeed_histogram_1024 = 74;
  if (has_txspeed_histogram_1024()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->txspeed_histogram_1024(), target);
  }

  // optional uint32 txspeed_histogram_max = 75;
  if (has_txspeed_histogram_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->txspeed_histogram_max(), target);
  }

  // optional uint32 txspeed_ntile_5th = 76;
  if (has_txspeed_ntile_5th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(76, this->txspeed_ntile_5th(), target);
  }

  // optional uint32 txspeed_ntile_50th = 77;
  if (has_txspeed_ntile_50th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(77, this->txspeed_ntile_50th(), target);
  }

  // optional uint32 txspeed_ntile_75th = 78;
  if (has_txspeed_ntile_75th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->txspeed_ntile_75th(), target);
  }

  // optional uint32 txspeed_ntile_95th = 79;
  if (has_txspeed_ntile_95th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->txspeed_ntile_95th(), target);
  }

  // optional uint32 txspeed_ntile_98th = 80;
  if (has_txspeed_ntile_98th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->txspeed_ntile_98th(), target);
  }

  // optional uint32 rxspeed_max = 81;
  if (has_rxspeed_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->rxspeed_max(), target);
  }

  // optional uint32 rxspeed_histogram_16 = 82;
  if (has_rxspeed_histogram_16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(82, this->rxspeed_histogram_16(), target);
  }

  // optional uint32 rxspeed_histogram_32 = 83;
  if (has_rxspeed_histogram_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(83, this->rxspeed_histogram_32(), target);
  }

  // optional uint32 rxspeed_histogram_64 = 84;
  if (has_rxspeed_histogram_64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(84, this->rxspeed_histogram_64(), target);
  }

  // optional uint32 rxspeed_histogram_128 = 85;
  if (has_rxspeed_histogram_128()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(85, this->rxspeed_histogram_128(), target);
  }

  // optional uint32 rxspeed_histogram_256 = 86;
  if (has_rxspeed_histogram_256()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->rxspeed_histogram_256(), target);
  }

  // optional uint32 rxspeed_histogram_512 = 87;
  if (has_rxspeed_histogram_512()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->rxspeed_histogram_512(), target);
  }

  // optional uint32 rxspeed_histogram_1024 = 88;
  if (has_rxspeed_histogram_1024()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(88, this->rxspeed_histogram_1024(), target);
  }

  // optional uint32 rxspeed_histogram_max = 89;
  if (has_rxspeed_histogram_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->rxspeed_histogram_max(), target);
  }

  // optional uint32 rxspeed_ntile_5th = 90;
  if (has_rxspeed_ntile_5th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->rxspeed_ntile_5th(), target);
  }

  // optional uint32 rxspeed_ntile_50th = 91;
  if (has_rxspeed_ntile_50th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->rxspeed_ntile_50th(), target);
  }

  // optional uint32 rxspeed_ntile_75th = 92;
  if (has_rxspeed_ntile_75th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->rxspeed_ntile_75th(), target);
  }

  // optional uint32 rxspeed_ntile_95th = 93;
  if (has_rxspeed_ntile_95th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(93, this->rxspeed_ntile_95th(), target);
  }

  // optional uint32 rxspeed_ntile_98th = 94;
  if (has_rxspeed_ntile_98th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(94, this->rxspeed_ntile_98th(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramLinkLifetimeStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 packets_sent = 3;
    if (has_packets_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_sent());
    }

    // optional uint64 kb_sent = 4;
    if (has_kb_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_sent());
    }

    // optional uint64 packets_recv = 5;
    if (has_packets_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv());
    }

    // optional uint64 kb_recv = 6;
    if (has_kb_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_recv());
    }

    // optional uint64 packets_recv_sequenced = 7;
    if (has_packets_recv_sequenced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_sequenced());
    }

    // optional uint64 packets_recv_dropped = 8;
    if (has_packets_recv_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_dropped());
    }

    // optional uint64 packets_recv_out_of_order = 9;
    if (has_packets_recv_out_of_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_out_of_order());
    }

    // optional uint64 packets_recv_duplicate = 10;
    if (has_packets_recv_duplicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_duplicate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 packets_recv_lurch = 11;
    if (has_packets_recv_lurch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_lurch());
    }

    // optional uint32 quality_histogram_100 = 21;
    if (has_quality_histogram_100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_100());
    }

    // optional uint32 quality_histogram_99 = 22;
    if (has_quality_histogram_99()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_99());
    }

    // optional uint32 quality_histogram_97 = 23;
    if (has_quality_histogram_97()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_97());
    }

    // optional uint32 quality_histogram_95 = 24;
    if (has_quality_histogram_95()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_95());
    }

    // optional uint32 quality_histogram_90 = 25;
    if (has_quality_histogram_90()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_90());
    }

    // optional uint32 quality_histogram_75 = 26;
    if (has_quality_histogram_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_75());
    }

    // optional uint32 quality_histogram_50 = 27;
    if (has_quality_histogram_50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_50());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 quality_histogram_1 = 28;
    if (has_quality_histogram_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_1());
    }

    // optional uint32 quality_histogram_dead = 29;
    if (has_quality_histogram_dead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_dead());
    }

    // optional uint32 quality_ntile_2nd = 30;
    if (has_quality_ntile_2nd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_2nd());
    }

    // optional uint32 quality_ntile_5th = 31;
    if (has_quality_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_5th());
    }

    // optional uint32 quality_ntile_25th = 32;
    if (has_quality_ntile_25th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_25th());
    }

    // optional uint32 quality_ntile_50th = 33;
    if (has_quality_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_50th());
    }

    // optional uint32 ping_histogram_25 = 41;
    if (has_ping_histogram_25()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_25());
    }

    // optional uint32 ping_histogram_50 = 42;
    if (has_ping_histogram_50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_50());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 ping_histogram_75 = 43;
    if (has_ping_histogram_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_75());
    }

    // optional uint32 ping_histogram_100 = 44;
    if (has_ping_histogram_100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_100());
    }

    // optional uint32 ping_histogram_125 = 45;
    if (has_ping_histogram_125()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_125());
    }

    // optional uint32 ping_histogram_150 = 46;
    if (has_ping_histogram_150()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_150());
    }

    // optional uint32 ping_histogram_200 = 47;
    if (has_ping_histogram_200()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_200());
    }

    // optional uint32 ping_histogram_300 = 48;
    if (has_ping_histogram_300()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_300());
    }

    // optional uint32 ping_histogram_max = 49;
    if (has_ping_histogram_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_max());
    }

    // optional uint32 ping_ntile_5th = 50;
    if (has_ping_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_5th());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 ping_ntile_50th = 51;
    if (has_ping_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_50th());
    }

    // optional uint32 ping_ntile_75th = 52;
    if (has_ping_ntile_75th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_75th());
    }

    // optional uint32 ping_ntile_95th = 53;
    if (has_ping_ntile_95th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_95th());
    }

    // optional uint32 ping_ntile_98th = 54;
    if (has_ping_ntile_98th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_98th());
    }

    // optional uint32 jitter_histogram_negligible = 61;
    if (has_jitter_histogram_negligible()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_negligible());
    }

    // optional uint32 jitter_histogram_1 = 62;
    if (has_jitter_histogram_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_1());
    }

    // optional uint32 jitter_histogram_2 = 63;
    if (has_jitter_histogram_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_2());
    }

    // optional uint32 jitter_histogram_5 = 64;
    if (has_jitter_histogram_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_5());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 jitter_histogram_10 = 65;
    if (has_jitter_histogram_10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_10());
    }

    // optional uint32 jitter_histogram_20 = 66;
    if (has_jitter_histogram_20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_20());
    }

    // optional uint32 txspeed_max = 67;
    if (has_txspeed_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_max());
    }

    // optional uint32 txspeed_histogram_16 = 68;
    if (has_txspeed_histogram_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_16());
    }

    // optional uint32 txspeed_histogram_32 = 69;
    if (has_txspeed_histogram_32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_32());
    }

    // optional uint32 txspeed_histogram_64 = 70;
    if (has_txspeed_histogram_64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_64());
    }

    // optional uint32 txspeed_histogram_128 = 71;
    if (has_txspeed_histogram_128()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_128());
    }

    // optional uint32 txspeed_histogram_256 = 72;
    if (has_txspeed_histogram_256()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_256());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 txspeed_histogram_512 = 73;
    if (has_txspeed_histogram_512()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_512());
    }

    // optional uint32 txspeed_histogram_1024 = 74;
    if (has_txspeed_histogram_1024()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_1024());
    }

    // optional uint32 txspeed_histogram_max = 75;
    if (has_txspeed_histogram_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_histogram_max());
    }

    // optional uint32 txspeed_ntile_5th = 76;
    if (has_txspeed_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_5th());
    }

    // optional uint32 txspeed_ntile_50th = 77;
    if (has_txspeed_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_50th());
    }

    // optional uint32 txspeed_ntile_75th = 78;
    if (has_txspeed_ntile_75th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_75th());
    }

    // optional uint32 txspeed_ntile_95th = 79;
    if (has_txspeed_ntile_95th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_95th());
    }

    // optional uint32 txspeed_ntile_98th = 80;
    if (has_txspeed_ntile_98th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txspeed_ntile_98th());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 rxspeed_max = 81;
    if (has_rxspeed_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_max());
    }

    // optional uint32 rxspeed_histogram_16 = 82;
    if (has_rxspeed_histogram_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_16());
    }

    // optional uint32 rxspeed_histogram_32 = 83;
    if (has_rxspeed_histogram_32()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_32());
    }

    // optional uint32 rxspeed_histogram_64 = 84;
    if (has_rxspeed_histogram_64()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_64());
    }

    // optional uint32 rxspeed_histogram_128 = 85;
    if (has_rxspeed_histogram_128()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_128());
    }

    // optional uint32 rxspeed_histogram_256 = 86;
    if (has_rxspeed_histogram_256()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_256());
    }

    // optional uint32 rxspeed_histogram_512 = 87;
    if (has_rxspeed_histogram_512()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_512());
    }

    // optional uint32 rxspeed_histogram_1024 = 88;
    if (has_rxspeed_histogram_1024()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_1024());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 rxspeed_histogram_max = 89;
    if (has_rxspeed_histogram_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_histogram_max());
    }

    // optional uint32 rxspeed_ntile_5th = 90;
    if (has_rxspeed_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_5th());
    }

    // optional uint32 rxspeed_ntile_50th = 91;
    if (has_rxspeed_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_50th());
    }

    // optional uint32 rxspeed_ntile_75th = 92;
    if (has_rxspeed_ntile_75th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_75th());
    }

    // optional uint32 rxspeed_ntile_95th = 93;
    if (has_rxspeed_ntile_95th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_95th());
    }

    // optional uint32 rxspeed_ntile_98th = 94;
    if (has_rxspeed_ntile_98th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rxspeed_ntile_98th());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramLinkLifetimeStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramLinkLifetimeStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packets_sent()) {
      set_packets_sent(from.packets_sent());
    }
    if (from.has_kb_sent()) {
      set_kb_sent(from.kb_sent());
    }
    if (from.has_packets_recv()) {
      set_packets_recv(from.packets_recv());
    }
    if (from.has_kb_recv()) {
      set_kb_recv(from.kb_recv());
    }
    if (from.has_packets_recv_sequenced()) {
      set_packets_recv_sequenced(from.packets_recv_sequenced());
    }
    if (from.has_packets_recv_dropped()) {
      set_packets_recv_dropped(from.packets_recv_dropped());
    }
    if (from.has_packets_recv_out_of_order()) {
      set_packets_recv_out_of_order(from.packets_recv_out_of_order());
    }
    if (from.has_packets_recv_duplicate()) {
      set_packets_recv_duplicate(from.packets_recv_duplicate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_packets_recv_lurch()) {
      set_packets_recv_lurch(from.packets_recv_lurch());
    }
    if (from.has_quality_histogram_100()) {
      set_quality_histogram_100(from.quality_histogram_100());
    }
    if (from.has_quality_histogram_99()) {
      set_quality_histogram_99(from.quality_histogram_99());
    }
    if (from.has_quality_histogram_97()) {
      set_quality_histogram_97(from.quality_histogram_97());
    }
    if (from.has_quality_histogram_95()) {
      set_quality_histogram_95(from.quality_histogram_95());
    }
    if (from.has_quality_histogram_90()) {
      set_quality_histogram_90(from.quality_histogram_90());
    }
    if (from.has_quality_histogram_75()) {
      set_quality_histogram_75(from.quality_histogram_75());
    }
    if (from.has_quality_histogram_50()) {
      set_quality_histogram_50(from.quality_histogram_50());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_quality_histogram_1()) {
      set_quality_histogram_1(from.quality_histogram_1());
    }
    if (from.has_quality_histogram_dead()) {
      set_quality_histogram_dead(from.quality_histogram_dead());
    }
    if (from.has_quality_ntile_2nd()) {
      set_quality_ntile_2nd(from.quality_ntile_2nd());
    }
    if (from.has_quality_ntile_5th()) {
      set_quality_ntile_5th(from.quality_ntile_5th());
    }
    if (from.has_quality_ntile_25th()) {
      set_quality_ntile_25th(from.quality_ntile_25th());
    }
    if (from.has_quality_ntile_50th()) {
      set_quality_ntile_50th(from.quality_ntile_50th());
    }
    if (from.has_ping_histogram_25()) {
      set_ping_histogram_25(from.ping_histogram_25());
    }
    if (from.has_ping_histogram_50()) {
      set_ping_histogram_50(from.ping_histogram_50());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ping_histogram_75()) {
      set_ping_histogram_75(from.ping_histogram_75());
    }
    if (from.has_ping_histogram_100()) {
      set_ping_histogram_100(from.ping_histogram_100());
    }
    if (from.has_ping_histogram_125()) {
      set_ping_histogram_125(from.ping_histogram_125());
    }
    if (from.has_ping_histogram_150()) {
      set_ping_histogram_150(from.ping_histogram_150());
    }
    if (from.has_ping_histogram_200()) {
      set_ping_histogram_200(from.ping_histogram_200());
    }
    if (from.has_ping_histogram_300()) {
      set_ping_histogram_300(from.ping_histogram_300());
    }
    if (from.has_ping_histogram_max()) {
      set_ping_histogram_max(from.ping_histogram_max());
    }
    if (from.has_ping_ntile_5th()) {
      set_ping_ntile_5th(from.ping_ntile_5th());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ping_ntile_50th()) {
      set_ping_ntile_50th(from.ping_ntile_50th());
    }
    if (from.has_ping_ntile_75th()) {
      set_ping_ntile_75th(from.ping_ntile_75th());
    }
    if (from.has_ping_ntile_95th()) {
      set_ping_ntile_95th(from.ping_ntile_95th());
    }
    if (from.has_ping_ntile_98th()) {
      set_ping_ntile_98th(from.ping_ntile_98th());
    }
    if (from.has_jitter_histogram_negligible()) {
      set_jitter_histogram_negligible(from.jitter_histogram_negligible());
    }
    if (from.has_jitter_histogram_1()) {
      set_jitter_histogram_1(from.jitter_histogram_1());
    }
    if (from.has_jitter_histogram_2()) {
      set_jitter_histogram_2(from.jitter_histogram_2());
    }
    if (from.has_jitter_histogram_5()) {
      set_jitter_histogram_5(from.jitter_histogram_5());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_jitter_histogram_10()) {
      set_jitter_histogram_10(from.jitter_histogram_10());
    }
    if (from.has_jitter_histogram_20()) {
      set_jitter_histogram_20(from.jitter_histogram_20());
    }
    if (from.has_txspeed_max()) {
      set_txspeed_max(from.txspeed_max());
    }
    if (from.has_txspeed_histogram_16()) {
      set_txspeed_histogram_16(from.txspeed_histogram_16());
    }
    if (from.has_txspeed_histogram_32()) {
      set_txspeed_histogram_32(from.txspeed_histogram_32());
    }
    if (from.has_txspeed_histogram_64()) {
      set_txspeed_histogram_64(from.txspeed_histogram_64());
    }
    if (from.has_txspeed_histogram_128()) {
      set_txspeed_histogram_128(from.txspeed_histogram_128());
    }
    if (from.has_txspeed_histogram_256()) {
      set_txspeed_histogram_256(from.txspeed_histogram_256());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_txspeed_histogram_512()) {
      set_txspeed_histogram_512(from.txspeed_histogram_512());
    }
    if (from.has_txspeed_histogram_1024()) {
      set_txspeed_histogram_1024(from.txspeed_histogram_1024());
    }
    if (from.has_txspeed_histogram_max()) {
      set_txspeed_histogram_max(from.txspeed_histogram_max());
    }
    if (from.has_txspeed_ntile_5th()) {
      set_txspeed_ntile_5th(from.txspeed_ntile_5th());
    }
    if (from.has_txspeed_ntile_50th()) {
      set_txspeed_ntile_50th(from.txspeed_ntile_50th());
    }
    if (from.has_txspeed_ntile_75th()) {
      set_txspeed_ntile_75th(from.txspeed_ntile_75th());
    }
    if (from.has_txspeed_ntile_95th()) {
      set_txspeed_ntile_95th(from.txspeed_ntile_95th());
    }
    if (from.has_txspeed_ntile_98th()) {
      set_txspeed_ntile_98th(from.txspeed_ntile_98th());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_rxspeed_max()) {
      set_rxspeed_max(from.rxspeed_max());
    }
    if (from.has_rxspeed_histogram_16()) {
      set_rxspeed_histogram_16(from.rxspeed_histogram_16());
    }
    if (from.has_rxspeed_histogram_32()) {
      set_rxspeed_histogram_32(from.rxspeed_histogram_32());
    }
    if (from.has_rxspeed_histogram_64()) {
      set_rxspeed_histogram_64(from.rxspeed_histogram_64());
    }
    if (from.has_rxspeed_histogram_128()) {
      set_rxspeed_histogram_128(from.rxspeed_histogram_128());
    }
    if (from.has_rxspeed_histogram_256()) {
      set_rxspeed_histogram_256(from.rxspeed_histogram_256());
    }
    if (from.has_rxspeed_histogram_512()) {
      set_rxspeed_histogram_512(from.rxspeed_histogram_512());
    }
    if (from.has_rxspeed_histogram_1024()) {
      set_rxspeed_histogram_1024(from.rxspeed_histogram_1024());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_rxspeed_histogram_max()) {
      set_rxspeed_histogram_max(from.rxspeed_histogram_max());
    }
    if (from.has_rxspeed_ntile_5th()) {
      set_rxspeed_ntile_5th(from.rxspeed_ntile_5th());
    }
    if (from.has_rxspeed_ntile_50th()) {
      set_rxspeed_ntile_50th(from.rxspeed_ntile_50th());
    }
    if (from.has_rxspeed_ntile_75th()) {
      set_rxspeed_ntile_75th(from.rxspeed_ntile_75th());
    }
    if (from.has_rxspeed_ntile_95th()) {
      set_rxspeed_ntile_95th(from.rxspeed_ntile_95th());
    }
    if (from.has_rxspeed_ntile_98th()) {
      set_rxspeed_ntile_98th(from.rxspeed_ntile_98th());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkLifetimeStats::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramLinkLifetimeStats::Swap(CMsgSteamDatagramLinkLifetimeStats* other) {
  if (other != this) {
    std::swap(packets_sent_, other->packets_sent_);
    std::swap(kb_sent_, other->kb_sent_);
    std::swap(packets_recv_, other->packets_recv_);
    std::swap(kb_recv_, other->kb_recv_);
    std::swap(packets_recv_sequenced_, other->packets_recv_sequenced_);
    std::swap(packets_recv_dropped_, other->packets_recv_dropped_);
    std::swap(packets_recv_out_of_order_, other->packets_recv_out_of_order_);
    std::swap(packets_recv_duplicate_, other->packets_recv_duplicate_);
    std::swap(packets_recv_lurch_, other->packets_recv_lurch_);
    std::swap(quality_histogram_100_, other->quality_histogram_100_);
    std::swap(quality_histogram_99_, other->quality_histogram_99_);
    std::swap(quality_histogram_97_, other->quality_histogram_97_);
    std::swap(quality_histogram_95_, other->quality_histogram_95_);
    std::swap(quality_histogram_90_, other->quality_histogram_90_);
    std::swap(quality_histogram_75_, other->quality_histogram_75_);
    std::swap(quality_histogram_50_, other->quality_histogram_50_);
    std::swap(quality_histogram_1_, other->quality_histogram_1_);
    std::swap(quality_histogram_dead_, other->quality_histogram_dead_);
    std::swap(quality_ntile_2nd_, other->quality_ntile_2nd_);
    std::swap(quality_ntile_5th_, other->quality_ntile_5th_);
    std::swap(quality_ntile_25th_, other->quality_ntile_25th_);
    std::swap(quality_ntile_50th_, other->quality_ntile_50th_);
    std::swap(ping_histogram_25_, other->ping_histogram_25_);
    std::swap(ping_histogram_50_, other->ping_histogram_50_);
    std::swap(ping_histogram_75_, other->ping_histogram_75_);
    std::swap(ping_histogram_100_, other->ping_histogram_100_);
    std::swap(ping_histogram_125_, other->ping_histogram_125_);
    std::swap(ping_histogram_150_, other->ping_histogram_150_);
    std::swap(ping_histogram_200_, other->ping_histogram_200_);
    std::swap(ping_histogram_300_, other->ping_histogram_300_);
    std::swap(ping_histogram_max_, other->ping_histogram_max_);
    std::swap(ping_ntile_5th_, other->ping_ntile_5th_);
    std::swap(ping_ntile_50th_, other->ping_ntile_50th_);
    std::swap(ping_ntile_75th_, other->ping_ntile_75th_);
    std::swap(ping_ntile_95th_, other->ping_ntile_95th_);
    std::swap(ping_ntile_98th_, other->ping_ntile_98th_);
    std::swap(jitter_histogram_negligible_, other->jitter_histogram_negligible_);
    std::swap(jitter_histogram_1_, other->jitter_histogram_1_);
    std::swap(jitter_histogram_2_, other->jitter_histogram_2_);
    std::swap(jitter_histogram_5_, other->jitter_histogram_5_);
    std::swap(jitter_histogram_10_, other->jitter_histogram_10_);
    std::swap(jitter_histogram_20_, other->jitter_histogram_20_);
    std::swap(txspeed_max_, other->txspeed_max_);
    std::swap(txspeed_histogram_16_, other->txspeed_histogram_16_);
    std::swap(txspeed_histogram_32_, other->txspeed_histogram_32_);
    std::swap(txspeed_histogram_64_, other->txspeed_histogram_64_);
    std::swap(txspeed_histogram_128_, other->txspeed_histogram_128_);
    std::swap(txspeed_histogram_256_, other->txspeed_histogram_256_);
    std::swap(txspeed_histogram_512_, other->txspeed_histogram_512_);
    std::swap(txspeed_histogram_1024_, other->txspeed_histogram_1024_);
    std::swap(txspeed_histogram_max_, other->txspeed_histogram_max_);
    std::swap(txspeed_ntile_5th_, other->txspeed_ntile_5th_);
    std::swap(txspeed_ntile_50th_, other->txspeed_ntile_50th_);
    std::swap(txspeed_ntile_75th_, other->txspeed_ntile_75th_);
    std::swap(txspeed_ntile_95th_, other->txspeed_ntile_95th_);
    std::swap(txspeed_ntile_98th_, other->txspeed_ntile_98th_);
    std::swap(rxspeed_max_, other->rxspeed_max_);
    std::swap(rxspeed_histogram_16_, other->rxspeed_histogram_16_);
    std::swap(rxspeed_histogram_32_, other->rxspeed_histogram_32_);
    std::swap(rxspeed_histogram_64_, other->rxspeed_histogram_64_);
    std::swap(rxspeed_histogram_128_, other->rxspeed_histogram_128_);
    std::swap(rxspeed_histogram_256_, other->rxspeed_histogram_256_);
    std::swap(rxspeed_histogram_512_, other->rxspeed_histogram_512_);
    std::swap(rxspeed_histogram_1024_, other->rxspeed_histogram_1024_);
    std::swap(rxspeed_histogram_max_, other->rxspeed_histogram_max_);
    std::swap(rxspeed_ntile_5th_, other->rxspeed_ntile_5th_);
    std::swap(rxspeed_ntile_50th_, other->rxspeed_ntile_50th_);
    std::swap(rxspeed_ntile_75th_, other->rxspeed_ntile_75th_);
    std::swap(rxspeed_ntile_95th_, other->rxspeed_ntile_95th_);
    std::swap(rxspeed_ntile_98th_, other->rxspeed_ntile_98th_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramLinkLifetimeStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramLinkLifetimeStats_descriptor_;
  metadata.reflection = CMsgSteamDatagramLinkLifetimeStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionQuality::kInstantaneousFieldNumber;
const int CMsgSteamDatagramConnectionQuality::kLifetimeFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance() {
  instantaneous_ = const_cast< ::CMsgSteamDatagramLinkInstantaneousStats*>(&::CMsgSteamDatagramLinkInstantaneousStats::default_instance());
  lifetime_ = const_cast< ::CMsgSteamDatagramLinkLifetimeStats*>(&::CMsgSteamDatagramLinkLifetimeStats::default_instance());
}

CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionQuality::SharedCtor() {
  _cached_size_ = 0;
  instantaneous_ = NULL;
  lifetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionQuality::~CMsgSteamDatagramConnectionQuality() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionQuality::SharedDtor() {
  if (this != default_instance_) {
    delete instantaneous_;
    delete lifetime_;
  }
}

void CMsgSteamDatagramConnectionQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionQuality_descriptor_;
}

const CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionQuality::default_instance_ = NULL;

CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionQuality::New() const {
  return new CMsgSteamDatagramConnectionQuality;
}

void CMsgSteamDatagramConnectionQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instantaneous()) {
      if (instantaneous_ != NULL) instantaneous_->::CMsgSteamDatagramLinkInstantaneousStats::Clear();
    }
    if (has_lifetime()) {
      if (lifetime_ != NULL) lifetime_->::CMsgSteamDatagramLinkLifetimeStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instantaneous()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lifetime;
        break;
      }

      // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lifetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lifetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (has_instantaneous()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instantaneous(), output);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lifetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (has_instantaneous()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instantaneous(), target);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lifetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
    if (has_instantaneous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instantaneous());
    }

    // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lifetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const CMsgSteamDatagramConnectionQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instantaneous()) {
      mutable_instantaneous()->::CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(from.instantaneous());
    }
    if (from.has_lifetime()) {
      mutable_lifetime()->::CMsgSteamDatagramLinkLifetimeStats::MergeFrom(from.lifetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const CMsgSteamDatagramConnectionQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionQuality::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionQuality::Swap(CMsgSteamDatagramConnectionQuality* other) {
  if (other != this) {
    std::swap(instantaneous_, other->instantaneous_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionQuality_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionQuality_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
