// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramCertificate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificateSigned_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramCertificateSigned_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steamnetworkingsockets_messages_certs.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSteamDatagramCertificate_descriptor_ = file->message_type(0);
  static const int CMsgSteamDatagramCertificate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, key_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, gameserver_datacenter_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, time_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, time_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, app_id_),
  };
  CMsgSteamDatagramCertificate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramCertificate_descriptor_,
      CMsgSteamDatagramCertificate::default_instance_,
      CMsgSteamDatagramCertificate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramCertificate));
  CMsgSteamDatagramCertificate_EKeyType_descriptor_ = CMsgSteamDatagramCertificate_descriptor_->enum_type(0);
  CMsgSteamDatagramCertificateSigned_descriptor_ = file->message_type(1);
  static const int CMsgSteamDatagramCertificateSigned_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, ca_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, ca_signature_),
  };
  CMsgSteamDatagramCertificateSigned_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramCertificateSigned_descriptor_,
      CMsgSteamDatagramCertificateSigned::default_instance_,
      CMsgSteamDatagramCertificateSigned_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramCertificateSigned));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramCertificate_descriptor_, &CMsgSteamDatagramCertificate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramCertificateSigned_descriptor_, &CMsgSteamDatagramCertificateSigned::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  delete CMsgSteamDatagramCertificate::default_instance_;
  delete CMsgSteamDatagramCertificate_reflection_;
  delete CMsgSteamDatagramCertificateSigned::default_instance_;
  delete CMsgSteamDatagramCertificateSigned_reflection_;
}

void protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+steamnetworkingsockets_messages_certs."
    "proto\"\211\002\n\034CMsgSteamDatagramCertificate\022A"
    "\n\010key_type\030\001 \001(\0162&.CMsgSteamDatagramCert"
    "ificate.EKeyType:\007INVALID\022\020\n\010key_data\030\002 "
    "\001(\014\022\020\n\010steam_id\030\004 \001(\006\022!\n\031gameserver_data"
    "center_ids\030\005 \003(\007\022\024\n\014time_created\030\010 \001(\007\022\023"
    "\n\013time_expiry\030\t \001(\007\022\016\n\006app_id\030\n \001(\r\"$\n\010E"
    "KeyType\022\013\n\007INVALID\020\000\022\013\n\007ED25519\020\001\"[\n\"CMs"
    "gSteamDatagramCertificateSigned\022\014\n\004cert\030"
    "\004 \001(\014\022\021\n\tca_key_id\030\005 \001(\006\022\024\n\014ca_signature"
    "\030\006 \001(\014B\003\200\001\000", 411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamnetworkingsockets_messages_certs.proto", &protobuf_RegisterTypes);
  CMsgSteamDatagramCertificate::default_instance_ = new CMsgSteamDatagramCertificate();
  CMsgSteamDatagramCertificateSigned::default_instance_ = new CMsgSteamDatagramCertificateSigned();
  CMsgSteamDatagramCertificate::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramCertificateSigned::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steamnetworkingsockets_5fmessages_5fcerts_2eproto {
  StaticDescriptorInitializer_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
    protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  }
} static_descriptor_initializer_steamnetworkingsockets_5fmessages_5fcerts_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramCertificate_EKeyType_descriptor_;
}
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::INVALID;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::ED25519;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MIN;
const CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MAX;
const int CMsgSteamDatagramCertificate::EKeyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramCertificate::kKeyTypeFieldNumber;
const int CMsgSteamDatagramCertificate::kKeyDataFieldNumber;
const int CMsgSteamDatagramCertificate::kSteamIdFieldNumber;
const int CMsgSteamDatagramCertificate::kGameserverDatacenterIdsFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeCreatedFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramCertificate::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramCertificate::InitAsDefaultInstance() {
}

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificate::SharedCtor() {
  _cached_size_ = 0;
  key_type_ = 0;
  key_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steam_id_ = GOOGLE_ULONGLONG(0);
  time_created_ = 0u;
  time_expiry_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  SharedDtor();
}

void CMsgSteamDatagramCertificate::SharedDtor() {
  if (key_data_ != &::google::protobuf::internal::kEmptyString) {
    delete key_data_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramCertificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramCertificate_descriptor_;
}

const CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramCertificate* CMsgSteamDatagramCertificate::default_instance_ = NULL;

CMsgSteamDatagramCertificate* CMsgSteamDatagramCertificate::New() const {
  return new CMsgSteamDatagramCertificate;
}

void CMsgSteamDatagramCertificate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_type_ = 0;
    if (has_key_data()) {
      if (key_data_ != &::google::protobuf::internal::kEmptyString) {
        key_data_->clear();
      }
    }
    steam_id_ = GOOGLE_ULONGLONG(0);
    time_created_ = 0u;
    time_expiry_ = 0u;
    app_id_ = 0u;
  }
  gameserver_datacenter_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgSteamDatagramCertificate_EKeyType_IsValid(value)) {
            set_key_type(static_cast< ::CMsgSteamDatagramCertificate_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key_data;
        break;
      }

      // optional bytes key_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_steam_id;
        break;
      }

      // optional fixed64 steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gameserver_datacenter_ids;
        break;
      }

      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gameserver_datacenter_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45, input, this->mutable_gameserver_datacenter_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_gameserver_datacenter_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gameserver_datacenter_ids;
        if (input->ExpectTag(69)) goto parse_time_created;
        break;
      }

      // optional fixed32 time_created = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_time_expiry;
        break;
      }

      // optional fixed32 time_expiry = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
          set_has_time_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional bytes key_data = 2;
  if (has_key_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key_data(), output);
  }

  // optional fixed64 steam_id = 4;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steam_id(), output);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0; i < this->gameserver_datacenter_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      5, this->gameserver_datacenter_ids(i), output);
  }

  // optional fixed32 time_created = 8;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->time_created(), output);
  }

  // optional fixed32 time_expiry = 9;
  if (has_time_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->time_expiry(), output);
  }

  // optional uint32 app_id = 10;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->app_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramCertificate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional bytes key_data = 2;
  if (has_key_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional fixed64 steam_id = 4;
  if (has_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0; i < this->gameserver_datacenter_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(5, this->gameserver_datacenter_ids(i), target);
  }

  // optional fixed32 time_created = 8;
  if (has_time_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if (has_time_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->time_expiry(), target);
  }

  // optional uint32 app_id = 10;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->app_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramCertificate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional bytes key_data = 2;
    if (has_key_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional fixed64 steam_id = 4;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 time_created = 8;
    if (has_time_created()) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_expiry = 9;
    if (has_time_expiry()) {
      total_size += 1 + 4;
    }

    // optional uint32 app_id = 10;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  // repeated fixed32 gameserver_datacenter_ids = 5;
  {
    int data_size = 0;
    data_size = 4 * this->gameserver_datacenter_ids_size();
    total_size += 1 * this->gameserver_datacenter_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramCertificate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramCertificate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramCertificate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificate::MergeFrom(const CMsgSteamDatagramCertificate& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameserver_datacenter_ids_.MergeFrom(from.gameserver_datacenter_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_data()) {
      set_key_data(from.key_data());
    }
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_time_expiry()) {
      set_time_expiry(from.time_expiry());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramCertificate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificate::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramCertificate::Swap(CMsgSteamDatagramCertificate* other) {
  if (other != this) {
    std::swap(key_type_, other->key_type_);
    std::swap(key_data_, other->key_data_);
    std::swap(steam_id_, other->steam_id_);
    gameserver_datacenter_ids_.Swap(&other->gameserver_datacenter_ids_);
    std::swap(time_created_, other->time_created_);
    std::swap(time_expiry_, other->time_expiry_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramCertificate_descriptor_;
  metadata.reflection = CMsgSteamDatagramCertificate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramCertificateSigned::kCertFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaKeyIdFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaSignatureFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance() {
}

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateSigned::SharedCtor() {
  _cached_size_ = 0;
  cert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ca_key_id_ = GOOGLE_ULONGLONG(0);
  ca_signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  SharedDtor();
}

void CMsgSteamDatagramCertificateSigned::SharedDtor() {
  if (cert_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_;
  }
  if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
    delete ca_signature_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramCertificateSigned::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramCertificateSigned::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramCertificateSigned_descriptor_;
}

const CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramCertificateSigned::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramCertificateSigned::default_instance_ = NULL;

CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramCertificateSigned::New() const {
  return new CMsgSteamDatagramCertificateSigned;
}

void CMsgSteamDatagramCertificateSigned::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cert()) {
      if (cert_ != &::google::protobuf::internal::kEmptyString) {
        cert_->clear();
      }
    }
    ca_key_id_ = GOOGLE_ULONGLONG(0);
    if (has_ca_signature()) {
      if (ca_signature_ != &::google::protobuf::internal::kEmptyString) {
        ca_signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramCertificateSigned::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cert = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ca_key_id;
        break;
      }

      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ca_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ca_key_id_)));
          set_has_ca_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ca_signature;
        break;
      }

      // optional bytes ca_signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ca_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ca_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramCertificateSigned::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cert = 4;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->cert(), output);
  }

  // optional fixed64 ca_key_id = 5;
  if (has_ca_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ca_key_id(), output);
  }

  // optional bytes ca_signature = 6;
  if (has_ca_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->ca_signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramCertificateSigned::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cert = 4;
  if (has_cert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (has_ca_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (has_ca_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ca_signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramCertificateSigned::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cert = 4;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cert());
    }

    // optional fixed64 ca_key_id = 5;
    if (has_ca_key_id()) {
      total_size += 1 + 8;
    }

    // optional bytes ca_signature = 6;
    if (has_ca_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ca_signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramCertificateSigned* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramCertificateSigned*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const CMsgSteamDatagramCertificateSigned& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cert()) {
      set_cert(from.cert());
    }
    if (from.has_ca_key_id()) {
      set_ca_key_id(from.ca_key_id());
    }
    if (from.has_ca_signature()) {
      set_ca_signature(from.ca_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateSigned::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramCertificateSigned::Swap(CMsgSteamDatagramCertificateSigned* other) {
  if (other != this) {
    std::swap(cert_, other->cert_);
    std::swap(ca_key_id_, other->ca_key_id_);
    std::swap(ca_signature_, other->ca_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramCertificateSigned_descriptor_;
  metadata.reflection = CMsgSteamDatagramCertificateSigned_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
