// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_sdr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steamdatagram_messages_sdr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameserverPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoSessionRelayToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramNoSessionRelayToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoSessionRelayToPeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramNoSessionRelayToPeer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientPingSampleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientPingSampleReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientPingSampleReply_DataCenter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientSwitchedPrimary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionClosed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionClosed_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramNoConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameserverSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionEstablished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramGameserverSessionEstablished_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsClientToRouter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsRouterToClient_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsRouterToServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsServerToRouter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PSessionRequestBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PSessionRequestBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PSessionEstablished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PSessionEstablished_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PRoutes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PRoutes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PRoutes_RelayCluster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PRoutes_RelayCluster_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PRoutes_Route_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PRoutes_Route_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PRendezvous_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PRendezvous_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PBadRouteRouterToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PBadRouteRouterToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramRelayToRelayPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRelayToRelayPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramDataCenterState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramDataCenterState_Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_DataCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramDataCenterState_DataCenter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRouterHealth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth_DataCenter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramRouterHealth_DataCenter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsP2PRouterToRouter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PBadRouteRouterToRouter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSteamDatagramP2PBadRouteRouterToRouter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto() {
  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steamdatagram_messages_sdr.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSteamDatagramGameserverPing_descriptor_ = file->message_type(0);
  static const int CMsgSteamDatagramGameserverPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, router_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, dummy_pad_),
  };
  CMsgSteamDatagramGameserverPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameserverPing_descriptor_,
      CMsgSteamDatagramGameserverPing::default_instance_,
      CMsgSteamDatagramGameserverPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameserverPing));
  CMsgSteamDatagramNoSessionRelayToClient_descriptor_ = file->message_type(1);
  static const int CMsgSteamDatagramNoSessionRelayToClient_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, your_public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, seconds_until_shutdown_),
  };
  CMsgSteamDatagramNoSessionRelayToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramNoSessionRelayToClient_descriptor_,
      CMsgSteamDatagramNoSessionRelayToClient::default_instance_,
      CMsgSteamDatagramNoSessionRelayToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramNoSessionRelayToClient));
  CMsgSteamDatagramNoSessionRelayToPeer_descriptor_ = file->message_type(2);
  static const int CMsgSteamDatagramNoSessionRelayToPeer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, legacy_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, from_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, from_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, kludge_pad_),
  };
  CMsgSteamDatagramNoSessionRelayToPeer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramNoSessionRelayToPeer_descriptor_,
      CMsgSteamDatagramNoSessionRelayToPeer::default_instance_,
      CMsgSteamDatagramNoSessionRelayToPeer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramNoSessionRelayToPeer));
  CMsgSteamDatagramClientPingSampleRequest_descriptor_ = file->message_type(3);
  static const int CMsgSteamDatagramClientPingSampleRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, connection_id_),
  };
  CMsgSteamDatagramClientPingSampleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientPingSampleRequest_descriptor_,
      CMsgSteamDatagramClientPingSampleRequest::default_instance_,
      CMsgSteamDatagramClientPingSampleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientPingSampleRequest));
  CMsgSteamDatagramClientPingSampleReply_descriptor_ = file->message_type(4);
  static const int CMsgSteamDatagramClientPingSampleReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, routing_clusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, data_centers_),
  };
  CMsgSteamDatagramClientPingSampleReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientPingSampleReply_descriptor_,
      CMsgSteamDatagramClientPingSampleReply::default_instance_,
      CMsgSteamDatagramClientPingSampleReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientPingSampleReply));
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_ = CMsgSteamDatagramClientPingSampleReply_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, front_ping_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, e2e_ping_ms_),
  };
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_,
      CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_,
      CMsgSteamDatagramClientPingSampleReply_RoutingCluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_RoutingCluster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientPingSampleReply_RoutingCluster));
  CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_ = CMsgSteamDatagramClientPingSampleReply_descriptor_->nested_type(1);
  static const int CMsgSteamDatagramClientPingSampleReply_DataCenter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, data_center_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, via_relay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, e2e_ping_ms_),
  };
  CMsgSteamDatagramClientPingSampleReply_DataCenter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_,
      CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_,
      CMsgSteamDatagramClientPingSampleReply_DataCenter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_DataCenter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientPingSampleReply_DataCenter));
  CMsgSteamDatagramClientSwitchedPrimary_descriptor_ = file->message_type(5);
  static const int CMsgSteamDatagramClientSwitchedPrimary_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_router_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_active_packets_recv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_dropped_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, gap_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_quality_now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, to_quality_now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, from_quality_then_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, to_quality_then_),
  };
  CMsgSteamDatagramClientSwitchedPrimary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientSwitchedPrimary_descriptor_,
      CMsgSteamDatagramClientSwitchedPrimary::default_instance_,
      CMsgSteamDatagramClientSwitchedPrimary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientSwitchedPrimary));
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_ = CMsgSteamDatagramClientSwitchedPrimary_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, front_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, back_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, seconds_until_down_),
  };
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_,
      CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_,
      CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality));
  CMsgSteamDatagramConnectRequest_descriptor_ = file->message_type(6);
  static const int CMsgSteamDatagramConnectRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, my_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, ping_est_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, virtual_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, gameserver_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, crypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, protocol_version_),
  };
  CMsgSteamDatagramConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectRequest_descriptor_,
      CMsgSteamDatagramConnectRequest::default_instance_,
      CMsgSteamDatagramConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectRequest));
  CMsgSteamDatagramConnectOK_descriptor_ = file->message_type(7);
  static const int CMsgSteamDatagramConnectOK_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, server_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, your_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, delay_time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, gameserver_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, crypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, protocol_version_),
  };
  CMsgSteamDatagramConnectOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectOK_descriptor_,
      CMsgSteamDatagramConnectOK::default_instance_,
      CMsgSteamDatagramConnectOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectOK));
  CMsgSteamDatagramConnectionClosed_descriptor_ = file->message_type(8);
  static const int CMsgSteamDatagramConnectionClosed_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, to_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, from_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, from_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, legacy_gameserver_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, to_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, from_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, forward_target_relay_routing_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, forward_target_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, relay_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, reason_code_),
  };
  CMsgSteamDatagramConnectionClosed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionClosed_descriptor_,
      CMsgSteamDatagramConnectionClosed::default_instance_,
      CMsgSteamDatagramConnectionClosed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionClosed));
  CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor_ = CMsgSteamDatagramConnectionClosed_descriptor_->enum_type(0);
  CMsgSteamDatagramNoConnection_descriptor_ = file->message_type(9);
  static const int CMsgSteamDatagramNoConnection_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, to_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, from_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, legacy_gameserver_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, to_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, from_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, from_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, end_to_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, dummy_pad_),
  };
  CMsgSteamDatagramNoConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramNoConnection_descriptor_,
      CMsgSteamDatagramNoConnection::default_instance_,
      CMsgSteamDatagramNoConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramNoConnection));
  CMsgSteamDatagramGameserverSessionRequest_descriptor_ = file->message_type(10);
  static const int CMsgSteamDatagramGameserverSessionRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, server_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, network_config_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, protocol_version_),
  };
  CMsgSteamDatagramGameserverSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameserverSessionRequest_descriptor_,
      CMsgSteamDatagramGameserverSessionRequest::default_instance_,
      CMsgSteamDatagramGameserverSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameserverSessionRequest));
  CMsgSteamDatagramGameserverSessionEstablished_descriptor_ = file->message_type(11);
  static const int CMsgSteamDatagramGameserverSessionEstablished_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, gameserver_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, seq_num_r2c_),
  };
  CMsgSteamDatagramGameserverSessionEstablished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramGameserverSessionEstablished_descriptor_,
      CMsgSteamDatagramGameserverSessionEstablished::default_instance_,
      CMsgSteamDatagramGameserverSessionEstablished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramGameserverSessionEstablished));
  CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_ = file->message_type(12);
  static const int CMsgSteamDatagramConnectionStatsClientToRouter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, quality_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, quality_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, ack_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, legacy_ack_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2s_),
  };
  CMsgSteamDatagramConnectionStatsClientToRouter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_,
      CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_,
      CMsgSteamDatagramConnectionStatsClientToRouter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsClientToRouter));
  CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor_ = CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_->enum_type(0);
  CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_ = file->message_type(13);
  static const int CMsgSteamDatagramConnectionStatsRouterToClient_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, quality_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, quality_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, scoring_penalty_relay_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, ack_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, legacy_ack_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_r2c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_s2c_),
  };
  CMsgSteamDatagramConnectionStatsRouterToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_,
      CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_,
      CMsgSteamDatagramConnectionStatsRouterToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsRouterToClient));
  CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor_ = CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_->enum_type(0);
  CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_ = file->message_type(14);
  static const int CMsgSteamDatagramConnectionStatsRouterToServer_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, quality_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, quality_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, ack_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, legacy_ack_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_r2s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_c2s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, server_connection_id_),
  };
  CMsgSteamDatagramConnectionStatsRouterToServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_,
      CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_,
      CMsgSteamDatagramConnectionStatsRouterToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsRouterToServer));
  CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor_ = CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_->enum_type(0);
  CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_ = file->message_type(15);
  static const int CMsgSteamDatagramConnectionStatsServerToRouter_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, quality_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, quality_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, ack_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, legacy_ack_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, server_connection_id_),
  };
  CMsgSteamDatagramConnectionStatsServerToRouter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_,
      CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_,
      CMsgSteamDatagramConnectionStatsServerToRouter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsServerToRouter));
  CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor_ = CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_->enum_type(0);
  CMsgSteamDatagramP2PSessionRequestBody_descriptor_ = file->message_type(16);
  static const int CMsgSteamDatagramP2PSessionRequestBody_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, client_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, peer_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, peer_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, network_config_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, public_ip_),
  };
  CMsgSteamDatagramP2PSessionRequestBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PSessionRequestBody_descriptor_,
      CMsgSteamDatagramP2PSessionRequestBody::default_instance_,
      CMsgSteamDatagramP2PSessionRequestBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PSessionRequestBody));
  CMsgSteamDatagramP2PSessionRequest_descriptor_ = file->message_type(17);
  static const int CMsgSteamDatagramP2PSessionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, cert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, signature_),
  };
  CMsgSteamDatagramP2PSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PSessionRequest_descriptor_,
      CMsgSteamDatagramP2PSessionRequest::default_instance_,
      CMsgSteamDatagramP2PSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PSessionRequest));
  CMsgSteamDatagramP2PSessionEstablished_descriptor_ = file->message_type(18);
  static const int CMsgSteamDatagramP2PSessionEstablished_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, relay_routing_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, seq_num_r2c_),
  };
  CMsgSteamDatagramP2PSessionEstablished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PSessionEstablished_descriptor_,
      CMsgSteamDatagramP2PSessionEstablished::default_instance_,
      CMsgSteamDatagramP2PSessionEstablished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PSessionEstablished));
  CMsgSteamDatagramP2PRoutes_descriptor_ = file->message_type(19);
  static const int CMsgSteamDatagramP2PRoutes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, relay_clusters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, revision_),
  };
  CMsgSteamDatagramP2PRoutes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PRoutes_descriptor_,
      CMsgSteamDatagramP2PRoutes::default_instance_,
      CMsgSteamDatagramP2PRoutes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PRoutes));
  CMsgSteamDatagramP2PRoutes_RelayCluster_descriptor_ = CMsgSteamDatagramP2PRoutes_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramP2PRoutes_RelayCluster_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, pop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, ping_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, score_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, session_relay_routing_token_),
  };
  CMsgSteamDatagramP2PRoutes_RelayCluster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PRoutes_RelayCluster_descriptor_,
      CMsgSteamDatagramP2PRoutes_RelayCluster::default_instance_,
      CMsgSteamDatagramP2PRoutes_RelayCluster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PRoutes_RelayCluster));
  CMsgSteamDatagramP2PRoutes_Route_descriptor_ = CMsgSteamDatagramP2PRoutes_descriptor_->nested_type(1);
  static const int CMsgSteamDatagramP2PRoutes_Route_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, my_pop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, your_pop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, score_),
  };
  CMsgSteamDatagramP2PRoutes_Route_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PRoutes_Route_descriptor_,
      CMsgSteamDatagramP2PRoutes_Route::default_instance_,
      CMsgSteamDatagramP2PRoutes_Route_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PRoutes_Route));
  CMsgSteamDatagramP2PRendezvous_descriptor_ = file->message_type(20);
  static const int CMsgSteamDatagramP2PRendezvous_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, to_connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, ack_peer_routes_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, connect_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, connect_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, connection_closed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, failed_relay_routing_token_),
  };
  CMsgSteamDatagramP2PRendezvous_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PRendezvous_descriptor_,
      CMsgSteamDatagramP2PRendezvous::default_instance_,
      CMsgSteamDatagramP2PRendezvous_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PRendezvous, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PRendezvous));
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_descriptor_ = file->message_type(21);
  static const int CMsgSteamDatagramConnectionStatsP2PClientToRouter_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, quality_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, quality_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, ack_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, legacy_ack_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, forward_target_relay_routing_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, forward_target_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, ack_peer_routes_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, seq_num_c2r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, seq_num_e2e_),
  };
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsP2PClientToRouter_descriptor_,
      CMsgSteamDatagramConnectionStatsP2PClientToRouter::default_instance_,
      CMsgSteamDatagramConnectionStatsP2PClientToRouter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsP2PClientToRouter));
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor_ = CMsgSteamDatagramConnectionStatsP2PClientToRouter_descriptor_->enum_type(0);
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_descriptor_ = file->message_type(22);
  static const int CMsgSteamDatagramConnectionStatsP2PRouterToClient_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, quality_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, quality_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, migrate_request_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, migrate_request_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, scoring_penalty_relay_cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, legacy_ack_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_forward_target_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, ack_peer_routes_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, seq_num_r2c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, seq_num_e2e_),
  };
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsP2PRouterToClient_descriptor_,
      CMsgSteamDatagramConnectionStatsP2PRouterToClient::default_instance_,
      CMsgSteamDatagramConnectionStatsP2PRouterToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsP2PRouterToClient));
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor_ = CMsgSteamDatagramConnectionStatsP2PRouterToClient_descriptor_->enum_type(0);
  CMsgSteamDatagramP2PBadRouteRouterToClient_descriptor_ = file->message_type(23);
  static const int CMsgSteamDatagramP2PBadRouteRouterToClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, connection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, failed_relay_routing_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, ack_forward_target_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, kludge_pad_),
  };
  CMsgSteamDatagramP2PBadRouteRouterToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PBadRouteRouterToClient_descriptor_,
      CMsgSteamDatagramP2PBadRouteRouterToClient::default_instance_,
      CMsgSteamDatagramP2PBadRouteRouterToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PBadRouteRouterToClient));
  CMsgSteamDatagramRelayToRelayPing_descriptor_ = file->message_type(24);
  static const int CMsgSteamDatagramRelayToRelayPing_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayToRelayPing, request_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayToRelayPing, request_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayToRelayPing, my_pop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayToRelayPing, your_pop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayToRelayPing, checksum_),
  };
  CMsgSteamDatagramRelayToRelayPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRelayToRelayPing_descriptor_,
      CMsgSteamDatagramRelayToRelayPing::default_instance_,
      CMsgSteamDatagramRelayToRelayPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayToRelayPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRelayToRelayPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRelayToRelayPing));
  CMsgSteamDatagramDataCenterState_descriptor_ = file->message_type(25);
  static const int CMsgSteamDatagramDataCenterState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState, data_centers_),
  };
  CMsgSteamDatagramDataCenterState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramDataCenterState_descriptor_,
      CMsgSteamDatagramDataCenterState::default_instance_,
      CMsgSteamDatagramDataCenterState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramDataCenterState));
  CMsgSteamDatagramDataCenterState_Server_descriptor_ = CMsgSteamDatagramDataCenterState_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramDataCenterState_Server_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_Server, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_Server, ping_ms_),
  };
  CMsgSteamDatagramDataCenterState_Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramDataCenterState_Server_descriptor_,
      CMsgSteamDatagramDataCenterState_Server::default_instance_,
      CMsgSteamDatagramDataCenterState_Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramDataCenterState_Server));
  CMsgSteamDatagramDataCenterState_DataCenter_descriptor_ = CMsgSteamDatagramDataCenterState_descriptor_->nested_type(1);
  static const int CMsgSteamDatagramDataCenterState_DataCenter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, server_sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, relay_sample_),
  };
  CMsgSteamDatagramDataCenterState_DataCenter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramDataCenterState_DataCenter_descriptor_,
      CMsgSteamDatagramDataCenterState_DataCenter::default_instance_,
      CMsgSteamDatagramDataCenterState_DataCenter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramDataCenterState_DataCenter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramDataCenterState_DataCenter));
  CMsgSteamDatagramRouterHealth_descriptor_ = file->message_type(26);
  static const int CMsgSteamDatagramRouterHealth_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, cpu_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, active_sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, data_pkts_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, other_pkts_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, seconds_until_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, cpu_cost_per_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, cpu_cost_per_packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, data_centers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, magic_),
  };
  CMsgSteamDatagramRouterHealth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRouterHealth_descriptor_,
      CMsgSteamDatagramRouterHealth::default_instance_,
      CMsgSteamDatagramRouterHealth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRouterHealth));
  CMsgSteamDatagramRouterHealth_DataCenter_descriptor_ = CMsgSteamDatagramRouterHealth_descriptor_->nested_type(0);
  static const int CMsgSteamDatagramRouterHealth_DataCenter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth_DataCenter, datacenter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth_DataCenter, state_),
  };
  CMsgSteamDatagramRouterHealth_DataCenter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramRouterHealth_DataCenter_descriptor_,
      CMsgSteamDatagramRouterHealth_DataCenter::default_instance_,
      CMsgSteamDatagramRouterHealth_DataCenter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth_DataCenter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramRouterHealth_DataCenter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramRouterHealth_DataCenter));
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_descriptor_ = file->message_type(27);
  static const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, quality_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, quality_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, ack_relay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, legacy_ack_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, ack_forward_target_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, routes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, ack_peer_routes_revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, seq_num_r2r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, seq_num_e2e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, from_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, to_relay_session_id_),
  };
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramConnectionStatsP2PRouterToRouter_descriptor_,
      CMsgSteamDatagramConnectionStatsP2PRouterToRouter::default_instance_,
      CMsgSteamDatagramConnectionStatsP2PRouterToRouter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToRouter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramConnectionStatsP2PRouterToRouter));
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor_ = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_descriptor_->enum_type(0);
  CMsgSteamDatagramP2PBadRouteRouterToRouter_descriptor_ = file->message_type(28);
  static const int CMsgSteamDatagramP2PBadRouteRouterToRouter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToRouter, from_relay_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToRouter, kludge_pad_),
  };
  CMsgSteamDatagramP2PBadRouteRouterToRouter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSteamDatagramP2PBadRouteRouterToRouter_descriptor_,
      CMsgSteamDatagramP2PBadRouteRouterToRouter::default_instance_,
      CMsgSteamDatagramP2PBadRouteRouterToRouter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToRouter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToRouter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSteamDatagramP2PBadRouteRouterToRouter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameserverPing_descriptor_, &CMsgSteamDatagramGameserverPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramNoSessionRelayToClient_descriptor_, &CMsgSteamDatagramNoSessionRelayToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramNoSessionRelayToPeer_descriptor_, &CMsgSteamDatagramNoSessionRelayToPeer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientPingSampleRequest_descriptor_, &CMsgSteamDatagramClientPingSampleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientPingSampleReply_descriptor_, &CMsgSteamDatagramClientPingSampleReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_, &CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_, &CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientSwitchedPrimary_descriptor_, &CMsgSteamDatagramClientSwitchedPrimary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_, &CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectRequest_descriptor_, &CMsgSteamDatagramConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectOK_descriptor_, &CMsgSteamDatagramConnectOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionClosed_descriptor_, &CMsgSteamDatagramConnectionClosed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramNoConnection_descriptor_, &CMsgSteamDatagramNoConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameserverSessionRequest_descriptor_, &CMsgSteamDatagramGameserverSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramGameserverSessionEstablished_descriptor_, &CMsgSteamDatagramGameserverSessionEstablished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_, &CMsgSteamDatagramConnectionStatsClientToRouter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_, &CMsgSteamDatagramConnectionStatsRouterToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_, &CMsgSteamDatagramConnectionStatsRouterToServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_, &CMsgSteamDatagramConnectionStatsServerToRouter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PSessionRequestBody_descriptor_, &CMsgSteamDatagramP2PSessionRequestBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PSessionRequest_descriptor_, &CMsgSteamDatagramP2PSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PSessionEstablished_descriptor_, &CMsgSteamDatagramP2PSessionEstablished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PRoutes_descriptor_, &CMsgSteamDatagramP2PRoutes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PRoutes_RelayCluster_descriptor_, &CMsgSteamDatagramP2PRoutes_RelayCluster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PRoutes_Route_descriptor_, &CMsgSteamDatagramP2PRoutes_Route::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PRendezvous_descriptor_, &CMsgSteamDatagramP2PRendezvous::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_descriptor_, &CMsgSteamDatagramConnectionStatsP2PClientToRouter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_descriptor_, &CMsgSteamDatagramConnectionStatsP2PRouterToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PBadRouteRouterToClient_descriptor_, &CMsgSteamDatagramP2PBadRouteRouterToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRelayToRelayPing_descriptor_, &CMsgSteamDatagramRelayToRelayPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramDataCenterState_descriptor_, &CMsgSteamDatagramDataCenterState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramDataCenterState_Server_descriptor_, &CMsgSteamDatagramDataCenterState_Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramDataCenterState_DataCenter_descriptor_, &CMsgSteamDatagramDataCenterState_DataCenter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRouterHealth_descriptor_, &CMsgSteamDatagramRouterHealth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramRouterHealth_DataCenter_descriptor_, &CMsgSteamDatagramRouterHealth_DataCenter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_descriptor_, &CMsgSteamDatagramConnectionStatsP2PRouterToRouter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSteamDatagramP2PBadRouteRouterToRouter_descriptor_, &CMsgSteamDatagramP2PBadRouteRouterToRouter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto() {
  delete CMsgSteamDatagramGameserverPing::default_instance_;
  delete CMsgSteamDatagramGameserverPing_reflection_;
  delete CMsgSteamDatagramNoSessionRelayToClient::default_instance_;
  delete CMsgSteamDatagramNoSessionRelayToClient_reflection_;
  delete CMsgSteamDatagramNoSessionRelayToPeer::default_instance_;
  delete CMsgSteamDatagramNoSessionRelayToPeer_reflection_;
  delete CMsgSteamDatagramClientPingSampleRequest::default_instance_;
  delete CMsgSteamDatagramClientPingSampleRequest_reflection_;
  delete CMsgSteamDatagramClientPingSampleReply::default_instance_;
  delete CMsgSteamDatagramClientPingSampleReply_reflection_;
  delete CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_;
  delete CMsgSteamDatagramClientPingSampleReply_RoutingCluster_reflection_;
  delete CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_;
  delete CMsgSteamDatagramClientPingSampleReply_DataCenter_reflection_;
  delete CMsgSteamDatagramClientSwitchedPrimary::default_instance_;
  delete CMsgSteamDatagramClientSwitchedPrimary_reflection_;
  delete CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_;
  delete CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_reflection_;
  delete CMsgSteamDatagramConnectRequest::default_instance_;
  delete CMsgSteamDatagramConnectRequest_reflection_;
  delete CMsgSteamDatagramConnectOK::default_instance_;
  delete CMsgSteamDatagramConnectOK_reflection_;
  delete CMsgSteamDatagramConnectionClosed::default_instance_;
  delete CMsgSteamDatagramConnectionClosed_reflection_;
  delete CMsgSteamDatagramNoConnection::default_instance_;
  delete CMsgSteamDatagramNoConnection_reflection_;
  delete CMsgSteamDatagramGameserverSessionRequest::default_instance_;
  delete CMsgSteamDatagramGameserverSessionRequest_reflection_;
  delete CMsgSteamDatagramGameserverSessionEstablished::default_instance_;
  delete CMsgSteamDatagramGameserverSessionEstablished_reflection_;
  delete CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_;
  delete CMsgSteamDatagramConnectionStatsClientToRouter_reflection_;
  delete CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_;
  delete CMsgSteamDatagramConnectionStatsRouterToClient_reflection_;
  delete CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_;
  delete CMsgSteamDatagramConnectionStatsRouterToServer_reflection_;
  delete CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_;
  delete CMsgSteamDatagramConnectionStatsServerToRouter_reflection_;
  delete CMsgSteamDatagramP2PSessionRequestBody::default_instance_;
  delete CMsgSteamDatagramP2PSessionRequestBody_reflection_;
  delete CMsgSteamDatagramP2PSessionRequest::default_instance_;
  delete CMsgSteamDatagramP2PSessionRequest_reflection_;
  delete CMsgSteamDatagramP2PSessionEstablished::default_instance_;
  delete CMsgSteamDatagramP2PSessionEstablished_reflection_;
  delete CMsgSteamDatagramP2PRoutes::default_instance_;
  delete CMsgSteamDatagramP2PRoutes_reflection_;
  delete CMsgSteamDatagramP2PRoutes_RelayCluster::default_instance_;
  delete CMsgSteamDatagramP2PRoutes_RelayCluster_reflection_;
  delete CMsgSteamDatagramP2PRoutes_Route::default_instance_;
  delete CMsgSteamDatagramP2PRoutes_Route_reflection_;
  delete CMsgSteamDatagramP2PRendezvous::default_instance_;
  delete CMsgSteamDatagramP2PRendezvous_reflection_;
  delete CMsgSteamDatagramConnectionStatsP2PClientToRouter::default_instance_;
  delete CMsgSteamDatagramConnectionStatsP2PClientToRouter_reflection_;
  delete CMsgSteamDatagramConnectionStatsP2PRouterToClient::default_instance_;
  delete CMsgSteamDatagramConnectionStatsP2PRouterToClient_reflection_;
  delete CMsgSteamDatagramP2PBadRouteRouterToClient::default_instance_;
  delete CMsgSteamDatagramP2PBadRouteRouterToClient_reflection_;
  delete CMsgSteamDatagramRelayToRelayPing::default_instance_;
  delete CMsgSteamDatagramRelayToRelayPing_reflection_;
  delete CMsgSteamDatagramDataCenterState::default_instance_;
  delete CMsgSteamDatagramDataCenterState_reflection_;
  delete CMsgSteamDatagramDataCenterState_Server::default_instance_;
  delete CMsgSteamDatagramDataCenterState_Server_reflection_;
  delete CMsgSteamDatagramDataCenterState_DataCenter::default_instance_;
  delete CMsgSteamDatagramDataCenterState_DataCenter_reflection_;
  delete CMsgSteamDatagramRouterHealth::default_instance_;
  delete CMsgSteamDatagramRouterHealth_reflection_;
  delete CMsgSteamDatagramRouterHealth_DataCenter::default_instance_;
  delete CMsgSteamDatagramRouterHealth_DataCenter_reflection_;
  delete CMsgSteamDatagramConnectionStatsP2PRouterToRouter::default_instance_;
  delete CMsgSteamDatagramConnectionStatsP2PRouterToRouter_reflection_;
  delete CMsgSteamDatagramP2PBadRouteRouterToRouter::default_instance_;
  delete CMsgSteamDatagramP2PBadRouteRouterToRouter_reflection_;
}

void protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_steamnetworkingsockets_5fmessages_5fcerts_2eproto();
  ::protobuf_AddDesc_steamnetworkingsockets_5fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n steamdatagram_messages_sdr.proto\032+stea"
    "mnetworkingsockets_messages_certs.proto\032"
    "%steamnetworkingsockets_messages.proto\"N"
    "\n\037CMsgSteamDatagramGameserverPing\022\030\n\020rou"
    "ter_timestamp\030\004 \001(\007\022\021\n\tdummy_pad\030c \001(\006\"\240"
    "\001\n\'CMsgSteamDatagramNoSessionRelayToClie"
    "nt\022\025\n\rconnection_id\030\007 \001(\007\022\026\n\016your_public"
    "_ip\030\002 \001(\007\022\023\n\013server_time\030\003 \001(\007\022\021\n\tchalle"
    "nge\030\004 \001(\006\022\036\n\026seconds_until_shutdown\030\005 \001("
    "\r\"\227\001\n%CMsgSteamDatagramNoSessionRelayToP"
    "eer\022\037\n\027legacy_relay_session_id\030\001 \001(\r\022\035\n\025"
    "from_relay_session_id\030\002 \001(\007\022\032\n\022from_conn"
    "ection_id\030\007 \001(\007\022\022\n\nkludge_pad\030c \001(\006\"A\n(C"
    "MsgSteamDatagramClientPingSampleRequest\022"
    "\025\n\rconnection_id\030\001 \001(\007\"\366\002\n&CMsgSteamData"
    "gramClientPingSampleReply\022\025\n\rconnection_"
    "id\030\001 \001(\007\022P\n\020routing_clusters\030\002 \003(\01326.CMs"
    "gSteamDatagramClientPingSampleReply.Rout"
    "ingCluster\022H\n\014data_centers\030\003 \003(\01322.CMsgS"
    "teamDatagramClientPingSampleReply.DataCe"
    "nter\032H\n\016RoutingCluster\022\n\n\002id\030\001 \001(\007\022\025\n\rfr"
    "ont_ping_ms\030\002 \001(\r\022\023\n\013e2e_ping_ms\030\003 \001(\r\032O"
    "\n\nDataCenter\022\026\n\016data_center_id\030\001 \001(\007\022\024\n\014"
    "via_relay_id\030\002 \001(\007\022\023\n\013e2e_ping_ms\030\003 \001(\r\""
    "\216\005\n&CMsgSteamDatagramClientSwitchedPrima"
    "ry\022\025\n\rconnection_id\030\001 \001(\007\022\017\n\007from_ip\030\002 \001"
    "(\007\022\021\n\tfrom_port\030\003 \001(\r\022\033\n\023from_router_clu"
    "ster\030\004 \001(\007\022\030\n\020from_active_time\030\005 \001(\r\022 \n\030"
    "from_active_packets_recv\030\006 \001(\r\022\033\n\023from_d"
    "ropped_reason\030\007 \001(\t\022\016\n\006gap_ms\030\010 \001(\r\022O\n\020f"
    "rom_quality_now\030\t \001(\01325.CMsgSteamDatagra"
    "mClientSwitchedPrimary.RouterQuality\022M\n\016"
    "to_quality_now\030\n \001(\01325.CMsgSteamDatagram"
    "ClientSwitchedPrimary.RouterQuality\022P\n\021f"
    "rom_quality_then\030\013 \001(\01325.CMsgSteamDatagr"
    "amClientSwitchedPrimary.RouterQuality\022N\n"
    "\017to_quality_then\030\014 \001(\01325.CMsgSteamDatagr"
    "amClientSwitchedPrimary.RouterQuality\032a\n"
    "\rRouterQuality\022\r\n\005score\030\001 \001(\r\022\022\n\nfront_p"
    "ing\030\002 \001(\r\022\021\n\tback_ping\030\003 \001(\r\022\032\n\022seconds_"
    "until_down\030\004 \001(\r\"\275\002\n\037CMsgSteamDatagramCo"
    "nnectRequest\022\025\n\rconnection_id\030\001 \001(\007\022\027\n\017c"
    "lient_steam_id\030\003 \001(\006\022\024\n\014my_timestamp\030\004 \001"
    "(\006\022\023\n\013ping_est_ms\030\005 \001(\r\022\024\n\014virtual_port\030"
    "\t \001(\r\022#\n\033gameserver_relay_session_id\030\002 \001"
    "(\r\0227\n\005crypt\030\006 \001(\0132(.CMsgSteamDatagramSes"
    "sionCryptInfoSigned\0221\n\004cert\030\007 \001(\0132#.CMsg"
    "SteamDatagramCertificateSigned\022\030\n\020protoc"
    "ol_version\030\010 \001(\r\"\264\002\n\032CMsgSteamDatagramCo"
    "nnectOK\022\034\n\024client_connection_id\030\001 \001(\007\022\034\n"
    "\024server_connection_id\030\007 \001(\007\022\026\n\016your_time"
    "stamp\030\003 \001(\006\022\027\n\017delay_time_usec\030\004 \001(\r\022#\n\033"
    "gameserver_relay_session_id\030\002 \001(\r\0227\n\005cry"
    "pt\030\005 \001(\0132(.CMsgSteamDatagramSessionCrypt"
    "InfoSigned\0221\n\004cert\030\006 \001(\0132#.CMsgSteamData"
    "gramCertificateSigned\022\030\n\020protocol_versio"
    "n\030\010 \001(\r\"\312\003\n!CMsgSteamDatagramConnectionC"
    "losed\022\030\n\020to_connection_id\030\007 \001(\007\022\032\n\022from_"
    "connection_id\030\010 \001(\007\022\025\n\rfrom_steam_id\030\003 \001"
    "(\006\022*\n\"legacy_gameserver_relay_session_id"
    "\030\002 \001(\r\022\033\n\023to_relay_session_id\030\t \001(\007\022\035\n\025f"
    "rom_relay_session_id\030\n \001(\007\022*\n\"forward_ta"
    "rget_relay_routing_token\030\013 \001(\014\022\037\n\027forwar"
    "d_target_revision\030\014 \001(\r\022G\n\nrelay_mode\030\004 "
    "\001(\0162-.CMsgSteamDatagramConnectionClosed."
    "ERelayMode:\004None\022\r\n\005debug\030\005 \001(\t\022\023\n\013reaso"
    "n_code\030\006 \001(\r\"6\n\nERelayMode\022\010\n\004None\020\000\022\014\n\010"
    "EndToEnd\020\001\022\020\n\014ClosedByPeer\020\002\"\374\001\n\035CMsgSte"
    "amDatagramNoConnection\022\030\n\020to_connection_"
    "id\030\005 \001(\007\022\032\n\022from_connection_id\030\006 \001(\007\022*\n\""
    "legacy_gameserver_relay_session_id\030\002 \001(\r"
    "\022\033\n\023to_relay_session_id\030\t \001(\007\022\035\n\025from_re"
    "lay_session_id\030\n \001(\007\022\025\n\rfrom_steam_id\030\003 "
    "\001(\006\022\022\n\nend_to_end\030\004 \001(\010\022\022\n\tdummy_pad\030\377\007 "
    "\001(\007\"\334\001\n)CMsgSteamDatagramGameserverSessi"
    "onRequest\022\016\n\006ticket\030\001 \001(\014\022\026\n\016challenge_t"
    "ime\030\003 \001(\007\022\021\n\tchallenge\030\004 \001(\006\022\034\n\024client_c"
    "onnection_id\030\005 \001(\007\022\034\n\024server_connection_"
    "id\030\010 \001(\007\022\036\n\026network_config_version\030\006 \001(\r"
    "\022\030\n\020protocol_version\030\007 \001(\r\"\230\001\n-CMsgSteam"
    "DatagramGameserverSessionEstablished\022\025\n\r"
    "connection_id\030\001 \001(\007\022\033\n\023gameserver_steam_"
    "id\030\003 \001(\006\022\036\n\026seconds_until_shutdown\030\004 \001(\r"
    "\022\023\n\013seq_num_r2c\030\006 \001(\r\"\370\002\n.CMsgSteamDatag"
    "ramConnectionStatsClientToRouter\022:\n\rqual"
    "ity_relay\030\001 \001(\0132#.CMsgSteamDatagramConne"
    "ctionQuality\0228\n\013quality_e2e\030\002 \001(\0132#.CMsg"
    "SteamDatagramConnectionQuality\022\021\n\tack_re"
    "lay\030\004 \003(\007\022\026\n\016legacy_ack_e2e\030\005 \003(\007\022\r\n\005fla"
    "gs\030\006 \001(\r\022\034\n\024client_connection_id\030\010 \001(\007\022\023"
    "\n\013seq_num_c2r\030\t \001(\r\022\023\n\013seq_num_c2s\030\n \001(\r"
    "\"N\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_"
    "REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004"
    "\"\371\003\n.CMsgSteamDatagramConnectionStatsRou"
    "terToClient\022:\n\rquality_relay\030\001 \001(\0132#.CMs"
    "gSteamDatagramConnectionQuality\0228\n\013quali"
    "ty_e2e\030\002 \001(\0132#.CMsgSteamDatagramConnecti"
    "onQuality\022\036\n\026seconds_until_shutdown\030\006 \001("
    "\r\022\032\n\022migrate_request_ip\030\n \001(\007\022\034\n\024migrate"
    "_request_port\030\013 \001(\r\022%\n\035scoring_penalty_r"
    "elay_cluster\030\014 \001(\r\022\021\n\tack_relay\030\r \003(\007\022\026\n"
    "\016legacy_ack_e2e\030\016 \003(\007\022\r\n\005flags\030\017 \001(\r\022\034\n\024"
    "client_connection_id\030\007 \001(\007\022\023\n\013seq_num_r2"
    "c\030\010 \001(\r\022\023\n\013seq_num_s2c\030\t \001(\r\"N\n\005Flags\022\025\n"
    "\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020"
    "\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\"\311\003\n.CMsgSte"
    "amDatagramConnectionStatsRouterToServer\022"
    ":\n\rquality_relay\030\001 \001(\0132#.CMsgSteamDatagr"
    "amConnectionQuality\0228\n\013quality_e2e\030\002 \001(\013"
    "2#.CMsgSteamDatagramConnectionQuality\022\021\n"
    "\tack_relay\030\n \003(\007\022\026\n\016legacy_ack_e2e\030\013 \003(\007"
    "\022\r\n\005flags\030\014 \001(\r\022\023\n\013seq_num_r2s\030\005 \001(\r\022\023\n\013"
    "seq_num_c2s\030\006 \001(\r\022\027\n\017client_steam_id\030\007 \001"
    "(\006\022\030\n\020relay_session_id\030\010 \001(\r\022\034\n\024client_c"
    "onnection_id\030\t \001(\007\022\034\n\024server_connection_"
    "id\030\r \001(\007\"N\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001"
    "\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMM"
    "EDIATE\020\004\"\311\003\n.CMsgSteamDatagramConnection"
    "StatsServerToRouter\022:\n\rquality_relay\030\001 \001"
    "(\0132#.CMsgSteamDatagramConnectionQuality\022"
    "8\n\013quality_e2e\030\002 \001(\0132#.CMsgSteamDatagram"
    "ConnectionQuality\022\021\n\tack_relay\030\010 \003(\007\022\026\n\016"
    "legacy_ack_e2e\030\t \003(\007\022\r\n\005flags\030\n \001(\r\022\023\n\013s"
    "eq_num_s2r\030\003 \001(\r\022\023\n\013seq_num_s2c\030\004 \001(\r\022\027\n"
    "\017client_steam_id\030\005 \001(\006\022\030\n\020relay_session_"
    "id\030\006 \001(\r\022\034\n\024client_connection_id\030\007 \001(\007\022\034"
    "\n\024server_connection_id\030\013 \001(\007\"N\n\005Flags\022\025\n"
    "\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020"
    "\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\"\361\001\n&CMsgSte"
    "amDatagramP2PSessionRequestBody\022\026\n\016chall"
    "enge_time\030\001 \001(\007\022\021\n\tchallenge\030\002 \001(\006\022\034\n\024cl"
    "ient_connection_id\030\003 \001(\007\022\025\n\rpeer_steam_i"
    "d\030\004 \001(\006\022\032\n\022peer_connection_id\030\005 \001(\007\022\030\n\020p"
    "rotocol_version\030\010 \001(\r\022\036\n\026network_config_"
    "version\030\t \001(\r\022\021\n\tpublic_ip\030\n \001(\007\"x\n\"CMsg"
    "SteamDatagramP2PSessionRequest\0221\n\004cert\030\001"
    " \001(\0132#.CMsgSteamDatagramCertificateSigne"
    "d\022\014\n\004body\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\"\221\001\n&C"
    "MsgSteamDatagramP2PSessionEstablished\022\025\n"
    "\rconnection_id\030\001 \001(\007\022\036\n\026seconds_until_sh"
    "utdown\030\003 \001(\r\022\033\n\023relay_routing_token\030\004 \001("
    "\014\022\023\n\013seq_num_r2c\030\005 \001(\r\"\320\002\n\032CMsgSteamData"
    "gramP2PRoutes\022@\n\016relay_clusters\030\001 \003(\0132(."
    "CMsgSteamDatagramP2PRoutes.RelayCluster\022"
    "1\n\006routes\030\002 \003(\0132!.CMsgSteamDatagramP2PRo"
    "utes.Route\022\020\n\010revision\030\003 \001(\r\032k\n\014RelayClu"
    "ster\022\016\n\006pop_id\030\001 \001(\007\022\017\n\007ping_ms\030\002 \001(\r\022\025\n"
    "\rscore_penalty\030\003 \001(\r\022#\n\033session_relay_ro"
    "uting_token\030\004 \001(\014\032>\n\005Route\022\021\n\tmy_pop_id\030"
    "\001 \001(\007\022\023\n\013your_pop_id\030\002 \001(\007\022\r\n\005score\030\003 \001("
    "\r\"\330\002\n\036CMsgSteamDatagramP2PRendezvous\022\030\n\020"
    "to_connection_id\030\001 \001(\007\022+\n\006routes\030\002 \001(\0132\033"
    ".CMsgSteamDatagramP2PRoutes\022 \n\030ack_peer_"
    "routes_revision\030\003 \001(\r\0229\n\017connect_request"
    "\030\004 \001(\0132 .CMsgSteamDatagramConnectRequest"
    "\022/\n\nconnect_ok\030\005 \001(\0132\033.CMsgSteamDatagram"
    "ConnectOK\022=\n\021connection_closed\030\006 \001(\0132\".C"
    "MsgSteamDatagramConnectionClosed\022\"\n\032fail"
    "ed_relay_routing_token\030\007 \001(\014\"\363\003\n1CMsgSte"
    "amDatagramConnectionStatsP2PClientToRout"
    "er\022:\n\rquality_relay\030\001 \001(\0132#.CMsgSteamDat"
    "agramConnectionQuality\0228\n\013quality_e2e\030\002 "
    "\001(\0132#.CMsgSteamDatagramConnectionQuality"
    "\022\021\n\tack_relay\030\003 \003(\007\022\026\n\016legacy_ack_e2e\030\004 "
    "\003(\007\022\r\n\005flags\030\005 \001(\r\022*\n\"forward_target_rel"
    "ay_routing_token\030\006 \001(\014\022\037\n\027forward_target"
    "_revision\030\007 \001(\r\022\016\n\006routes\030\010 \001(\014\022 \n\030ack_p"
    "eer_routes_revision\030\t \001(\r\022\025\n\rconnection_"
    "id\030\n \001(\007\022\023\n\013seq_num_c2r\030\013 \001(\r\022\023\n\013seq_num"
    "_e2e\030\014 \001(\r\"N\n\005Flags\022\025\n\021ACK_REQUEST_RELAY"
    "\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_I"
    "MMEDIATE\020\004\"\314\004\n1CMsgSteamDatagramConnecti"
    "onStatsP2PRouterToClient\022:\n\rquality_rela"
    "y\030\001 \001(\0132#.CMsgSteamDatagramConnectionQua"
    "lity\0228\n\013quality_e2e\030\002 \001(\0132#.CMsgSteamDat"
    "agramConnectionQuality\022\036\n\026seconds_until_"
    "shutdown\030\003 \001(\r\022\032\n\022migrate_request_ip\030\004 \001"
    "(\007\022\034\n\024migrate_request_port\030\005 \001(\r\022%\n\035scor"
    "ing_penalty_relay_cluster\030\006 \001(\r\022\021\n\tack_r"
    "elay\030\007 \003(\007\022\026\n\016legacy_ack_e2e\030\010 \003(\007\022\r\n\005fl"
    "ags\030\t \001(\r\022#\n\033ack_forward_target_revision"
    "\030\n \001(\r\022\016\n\006routes\030\013 \001(\014\022 \n\030ack_peer_route"
    "s_revision\030\014 \001(\r\022\025\n\rconnection_id\030\r \001(\007\022"
    "\023\n\013seq_num_r2c\030\016 \001(\r\022\023\n\013seq_num_e2e\030\017 \001("
    "\r\"N\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK"
    "_REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020"
    "\004\"\240\001\n*CMsgSteamDatagramP2PBadRouteRouter"
    "ToClient\022\025\n\rconnection_id\030\001 \001(\007\022\"\n\032faile"
    "d_relay_routing_token\030\002 \001(\014\022#\n\033ack_forwa"
    "rd_target_revision\030\003 \001(\r\022\022\n\nkludge_pad\030c"
    " \001(\006\"\216\001\n!CMsgSteamDatagramRelayToRelayPi"
    "ng\022\031\n\021request_timestamp\030\001 \001(\007\022\024\n\014request"
    "_date\030\002 \001(\007\022\021\n\tmy_pop_id\030\003 \001(\007\022\023\n\013your_p"
    "op_id\030\004 \001(\007\022\020\n\010checksum\030\005 \001(\007\"\260\002\n CMsgSt"
    "eamDatagramDataCenterState\022B\n\014data_cente"
    "rs\030\001 \003(\0132,.CMsgSteamDatagramDataCenterSt"
    "ate.DataCenter\032*\n\006Server\022\017\n\007address\030\001 \001("
    "\t\022\017\n\007ping_ms\030\002 \001(\r\032\233\001\n\nDataCenter\022\014\n\004cod"
    "e\030\001 \001(\t\022\?\n\rserver_sample\030\002 \003(\0132(.CMsgSte"
    "amDatagramDataCenterState.Server\022>\n\014rela"
    "y_sample\030\003 \003(\0132(.CMsgSteamDatagramDataCe"
    "nterState.Server\"\325\002\n\035CMsgSteamDatagramRo"
    "uterHealth\022\020\n\010cpu_load\030\001 \001(\002\022\027\n\017active_s"
    "essions\030\002 \001(\r\022\025\n\rdata_pkts_sec\030\003 \001(\r\022\026\n\016"
    "other_pkts_sec\030\004 \001(\r\022\036\n\026seconds_until_sh"
    "utdown\030\005 \001(\r\022\031\n\021cpu_cost_per_user\030\010 \001(\002\022"
    "\033\n\023cpu_cost_per_packet\030\t \001(\002\022\?\n\014data_cen"
    "ters\030\006 \003(\0132).CMsgSteamDatagramRouterHeal"
    "th.DataCenter\022\r\n\005magic\030\007 \001(\006\0322\n\nDataCent"
    "er\022\025\n\rdatacenter_id\030\001 \001(\007\022\r\n\005state\030\002 \001(\r"
    "\"\360\003\n1CMsgSteamDatagramConnectionStatsP2P"
    "RouterToRouter\022:\n\rquality_relay\030\001 \001(\0132#."
    "CMsgSteamDatagramConnectionQuality\0228\n\013qu"
    "ality_e2e\030\002 \001(\0132#.CMsgSteamDatagramConne"
    "ctionQuality\022\021\n\tack_relay\030\003 \003(\007\022\026\n\016legac"
    "y_ack_e2e\030\004 \003(\007\022\r\n\005flags\030\005 \001(\r\022#\n\033ack_fo"
    "rward_target_revision\030\006 \001(\r\022\016\n\006routes\030\007 "
    "\001(\014\022 \n\030ack_peer_routes_revision\030\010 \001(\r\022\023\n"
    "\013seq_num_r2r\030\032 \001(\r\022\023\n\013seq_num_e2e\030\033 \001(\r\022"
    "\035\n\025from_relay_session_id\030\026 \001(\007\022\033\n\023to_rel"
    "ay_session_id\030\031 \001(\007\"N\n\005Flags\022\025\n\021ACK_REQU"
    "EST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_"
    "REQUEST_IMMEDIATE\020\004\"_\n*CMsgSteamDatagram"
    "P2PBadRouteRouterToRouter\022\035\n\025from_relay_"
    "session_id\030\001 \001(\007\022\022\n\nkludge_pad\030c \001(\006B\003\200\001"
    "\000", 9001);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamdatagram_messages_sdr.proto", &protobuf_RegisterTypes);
  CMsgSteamDatagramGameserverPing::default_instance_ = new CMsgSteamDatagramGameserverPing();
  CMsgSteamDatagramNoSessionRelayToClient::default_instance_ = new CMsgSteamDatagramNoSessionRelayToClient();
  CMsgSteamDatagramNoSessionRelayToPeer::default_instance_ = new CMsgSteamDatagramNoSessionRelayToPeer();
  CMsgSteamDatagramClientPingSampleRequest::default_instance_ = new CMsgSteamDatagramClientPingSampleRequest();
  CMsgSteamDatagramClientPingSampleReply::default_instance_ = new CMsgSteamDatagramClientPingSampleReply();
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_ = new CMsgSteamDatagramClientPingSampleReply_RoutingCluster();
  CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_ = new CMsgSteamDatagramClientPingSampleReply_DataCenter();
  CMsgSteamDatagramClientSwitchedPrimary::default_instance_ = new CMsgSteamDatagramClientSwitchedPrimary();
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_ = new CMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
  CMsgSteamDatagramConnectRequest::default_instance_ = new CMsgSteamDatagramConnectRequest();
  CMsgSteamDatagramConnectOK::default_instance_ = new CMsgSteamDatagramConnectOK();
  CMsgSteamDatagramConnectionClosed::default_instance_ = new CMsgSteamDatagramConnectionClosed();
  CMsgSteamDatagramNoConnection::default_instance_ = new CMsgSteamDatagramNoConnection();
  CMsgSteamDatagramGameserverSessionRequest::default_instance_ = new CMsgSteamDatagramGameserverSessionRequest();
  CMsgSteamDatagramGameserverSessionEstablished::default_instance_ = new CMsgSteamDatagramGameserverSessionEstablished();
  CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_ = new CMsgSteamDatagramConnectionStatsClientToRouter();
  CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_ = new CMsgSteamDatagramConnectionStatsRouterToClient();
  CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_ = new CMsgSteamDatagramConnectionStatsRouterToServer();
  CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_ = new CMsgSteamDatagramConnectionStatsServerToRouter();
  CMsgSteamDatagramP2PSessionRequestBody::default_instance_ = new CMsgSteamDatagramP2PSessionRequestBody();
  CMsgSteamDatagramP2PSessionRequest::default_instance_ = new CMsgSteamDatagramP2PSessionRequest();
  CMsgSteamDatagramP2PSessionEstablished::default_instance_ = new CMsgSteamDatagramP2PSessionEstablished();
  CMsgSteamDatagramP2PRoutes::default_instance_ = new CMsgSteamDatagramP2PRoutes();
  CMsgSteamDatagramP2PRoutes_RelayCluster::default_instance_ = new CMsgSteamDatagramP2PRoutes_RelayCluster();
  CMsgSteamDatagramP2PRoutes_Route::default_instance_ = new CMsgSteamDatagramP2PRoutes_Route();
  CMsgSteamDatagramP2PRendezvous::default_instance_ = new CMsgSteamDatagramP2PRendezvous();
  CMsgSteamDatagramConnectionStatsP2PClientToRouter::default_instance_ = new CMsgSteamDatagramConnectionStatsP2PClientToRouter();
  CMsgSteamDatagramConnectionStatsP2PRouterToClient::default_instance_ = new CMsgSteamDatagramConnectionStatsP2PRouterToClient();
  CMsgSteamDatagramP2PBadRouteRouterToClient::default_instance_ = new CMsgSteamDatagramP2PBadRouteRouterToClient();
  CMsgSteamDatagramRelayToRelayPing::default_instance_ = new CMsgSteamDatagramRelayToRelayPing();
  CMsgSteamDatagramDataCenterState::default_instance_ = new CMsgSteamDatagramDataCenterState();
  CMsgSteamDatagramDataCenterState_Server::default_instance_ = new CMsgSteamDatagramDataCenterState_Server();
  CMsgSteamDatagramDataCenterState_DataCenter::default_instance_ = new CMsgSteamDatagramDataCenterState_DataCenter();
  CMsgSteamDatagramRouterHealth::default_instance_ = new CMsgSteamDatagramRouterHealth();
  CMsgSteamDatagramRouterHealth_DataCenter::default_instance_ = new CMsgSteamDatagramRouterHealth_DataCenter();
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter::default_instance_ = new CMsgSteamDatagramConnectionStatsP2PRouterToRouter();
  CMsgSteamDatagramP2PBadRouteRouterToRouter::default_instance_ = new CMsgSteamDatagramP2PBadRouteRouterToRouter();
  CMsgSteamDatagramGameserverPing::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramNoSessionRelayToClient::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramNoSessionRelayToPeer::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientPingSampleRequest::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientPingSampleReply::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientSwitchedPrimary::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectRequest::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectOK::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionClosed::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramNoConnection::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramGameserverSessionRequest::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramGameserverSessionEstablished::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PSessionRequestBody::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PSessionRequest::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PSessionEstablished::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PRoutes::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PRoutes_RelayCluster::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PRoutes_Route::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PRendezvous::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsP2PClientToRouter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsP2PRouterToClient::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PBadRouteRouterToClient::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramRelayToRelayPing::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramDataCenterState::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramDataCenterState_Server::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramDataCenterState_DataCenter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramRouterHealth::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramRouterHealth_DataCenter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter::default_instance_->InitAsDefaultInstance();
  CMsgSteamDatagramP2PBadRouteRouterToRouter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steamdatagram_5fmessages_5fsdr_2eproto {
  StaticDescriptorInitializer_steamdatagram_5fmessages_5fsdr_2eproto() {
    protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  }
} static_descriptor_initializer_steamdatagram_5fmessages_5fsdr_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramGameserverPing::kRouterTimestampFieldNumber;
const int CMsgSteamDatagramGameserverPing::kDummyPadFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameserverPing::CMsgSteamDatagramGameserverPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameserverPing::InitAsDefaultInstance() {
}

CMsgSteamDatagramGameserverPing::CMsgSteamDatagramGameserverPing(const CMsgSteamDatagramGameserverPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPing::SharedCtor() {
  _cached_size_ = 0;
  router_timestamp_ = 0u;
  dummy_pad_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameserverPing::~CMsgSteamDatagramGameserverPing() {
  SharedDtor();
}

void CMsgSteamDatagramGameserverPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramGameserverPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameserverPing_descriptor_;
}

const CMsgSteamDatagramGameserverPing& CMsgSteamDatagramGameserverPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameserverPing* CMsgSteamDatagramGameserverPing::default_instance_ = NULL;

CMsgSteamDatagramGameserverPing* CMsgSteamDatagramGameserverPing::New() const {
  return new CMsgSteamDatagramGameserverPing;
}

void CMsgSteamDatagramGameserverPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    router_timestamp_ = 0u;
    dummy_pad_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameserverPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 router_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &router_timestamp_)));
          set_has_router_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(793)) goto parse_dummy_pad;
        break;
      }

      // optional fixed64 dummy_pad = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dummy_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dummy_pad_)));
          set_has_dummy_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameserverPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 router_timestamp = 4;
  if (has_router_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->router_timestamp(), output);
  }

  // optional fixed64 dummy_pad = 99;
  if (has_dummy_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->dummy_pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 router_timestamp = 4;
  if (has_router_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->router_timestamp(), target);
  }

  // optional fixed64 dummy_pad = 99;
  if (has_dummy_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->dummy_pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameserverPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 router_timestamp = 4;
    if (has_router_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed64 dummy_pad = 99;
    if (has_dummy_pad()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameserverPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverPing::MergeFrom(const CMsgSteamDatagramGameserverPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_router_timestamp()) {
      set_router_timestamp(from.router_timestamp());
    }
    if (from.has_dummy_pad()) {
      set_dummy_pad(from.dummy_pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameserverPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPing::CopyFrom(const CMsgSteamDatagramGameserverPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverPing::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameserverPing::Swap(CMsgSteamDatagramGameserverPing* other) {
  if (other != this) {
    std::swap(router_timestamp_, other->router_timestamp_);
    std::swap(dummy_pad_, other->dummy_pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameserverPing_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameserverPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramNoSessionRelayToClient::kConnectionIdFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToClient::kYourPublicIpFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToClient::kServerTimeFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToClient::kChallengeFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToClient::kSecondsUntilShutdownFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramNoSessionRelayToClient::InitAsDefaultInstance() {
}

CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(const CMsgSteamDatagramNoSessionRelayToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSessionRelayToClient::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  your_public_ip_ = 0u;
  server_time_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  seconds_until_shutdown_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramNoSessionRelayToClient::~CMsgSteamDatagramNoSessionRelayToClient() {
  SharedDtor();
}

void CMsgSteamDatagramNoSessionRelayToClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramNoSessionRelayToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoSessionRelayToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramNoSessionRelayToClient_descriptor_;
}

const CMsgSteamDatagramNoSessionRelayToClient& CMsgSteamDatagramNoSessionRelayToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramNoSessionRelayToClient* CMsgSteamDatagramNoSessionRelayToClient::default_instance_ = NULL;

CMsgSteamDatagramNoSessionRelayToClient* CMsgSteamDatagramNoSessionRelayToClient::New() const {
  return new CMsgSteamDatagramNoSessionRelayToClient;
}

void CMsgSteamDatagramNoSessionRelayToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
    your_public_ip_ = 0u;
    server_time_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    seconds_until_shutdown_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramNoSessionRelayToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 your_public_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_public_ip_)));
          set_has_your_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_server_time;
        break;
      }

      // optional fixed32 server_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_connection_id;
        break;
      }

      // optional fixed32 connection_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramNoSessionRelayToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 your_public_ip = 2;
  if (has_your_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->your_public_ip(), output);
  }

  // optional fixed32 server_time = 3;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->server_time(), output);
  }

  // optional fixed64 challenge = 4;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->challenge(), output);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 connection_id = 7;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->connection_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramNoSessionRelayToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 your_public_ip = 2;
  if (has_your_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->your_public_ip(), target);
  }

  // optional fixed32 server_time = 3;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->server_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 connection_id = 7;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->connection_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramNoSessionRelayToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 7;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_public_ip = 2;
    if (has_your_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_time = 3;
    if (has_server_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 4;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramNoSessionRelayToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramNoSessionRelayToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramNoSessionRelayToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoSessionRelayToClient::MergeFrom(const CMsgSteamDatagramNoSessionRelayToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_your_public_ip()) {
      set_your_public_ip(from.your_public_ip());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramNoSessionRelayToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSessionRelayToClient::CopyFrom(const CMsgSteamDatagramNoSessionRelayToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoSessionRelayToClient::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramNoSessionRelayToClient::Swap(CMsgSteamDatagramNoSessionRelayToClient* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(your_public_ip_, other->your_public_ip_);
    std::swap(server_time_, other->server_time_);
    std::swap(challenge_, other->challenge_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramNoSessionRelayToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramNoSessionRelayToClient_descriptor_;
  metadata.reflection = CMsgSteamDatagramNoSessionRelayToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramNoSessionRelayToPeer::kLegacyRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToPeer::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToPeer::kFromConnectionIdFieldNumber;
const int CMsgSteamDatagramNoSessionRelayToPeer::kKludgePadFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramNoSessionRelayToPeer::InitAsDefaultInstance() {
}

CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(const CMsgSteamDatagramNoSessionRelayToPeer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSessionRelayToPeer::SharedCtor() {
  _cached_size_ = 0;
  legacy_relay_session_id_ = 0u;
  from_relay_session_id_ = 0u;
  from_connection_id_ = 0u;
  kludge_pad_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramNoSessionRelayToPeer::~CMsgSteamDatagramNoSessionRelayToPeer() {
  SharedDtor();
}

void CMsgSteamDatagramNoSessionRelayToPeer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramNoSessionRelayToPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoSessionRelayToPeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramNoSessionRelayToPeer_descriptor_;
}

const CMsgSteamDatagramNoSessionRelayToPeer& CMsgSteamDatagramNoSessionRelayToPeer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramNoSessionRelayToPeer* CMsgSteamDatagramNoSessionRelayToPeer::default_instance_ = NULL;

CMsgSteamDatagramNoSessionRelayToPeer* CMsgSteamDatagramNoSessionRelayToPeer::New() const {
  return new CMsgSteamDatagramNoSessionRelayToPeer;
}

void CMsgSteamDatagramNoSessionRelayToPeer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    legacy_relay_session_id_ = 0u;
    from_relay_session_id_ = 0u;
    from_connection_id_ = 0u;
    kludge_pad_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramNoSessionRelayToPeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_relay_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_relay_session_id_)));
          set_has_legacy_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_from_relay_session_id;
        break;
      }

      // optional fixed32 from_relay_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
          set_has_from_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_from_connection_id;
        break;
      }

      // optional fixed32 from_connection_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
          set_has_from_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(793)) goto parse_kludge_pad;
        break;
      }

      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kludge_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &kludge_pad_)));
          set_has_kludge_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramNoSessionRelayToPeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 legacy_relay_session_id = 1;
  if (has_legacy_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_relay_session_id(), output);
  }

  // optional fixed32 from_relay_session_id = 2;
  if (has_from_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_relay_session_id(), output);
  }

  // optional fixed32 from_connection_id = 7;
  if (has_from_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->from_connection_id(), output);
  }

  // optional fixed64 kludge_pad = 99;
  if (has_kludge_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->kludge_pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramNoSessionRelayToPeer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 legacy_relay_session_id = 1;
  if (has_legacy_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 2;
  if (has_from_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_relay_session_id(), target);
  }

  // optional fixed32 from_connection_id = 7;
  if (has_from_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->from_connection_id(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (has_kludge_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->kludge_pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramNoSessionRelayToPeer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 legacy_relay_session_id = 1;
    if (has_legacy_relay_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_relay_session_id());
    }

    // optional fixed32 from_relay_session_id = 2;
    if (has_from_relay_session_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 7;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 kludge_pad = 99;
    if (has_kludge_pad()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramNoSessionRelayToPeer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramNoSessionRelayToPeer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramNoSessionRelayToPeer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoSessionRelayToPeer::MergeFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_legacy_relay_session_id()) {
      set_legacy_relay_session_id(from.legacy_relay_session_id());
    }
    if (from.has_from_relay_session_id()) {
      set_from_relay_session_id(from.from_relay_session_id());
    }
    if (from.has_from_connection_id()) {
      set_from_connection_id(from.from_connection_id());
    }
    if (from.has_kludge_pad()) {
      set_kludge_pad(from.kludge_pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramNoSessionRelayToPeer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSessionRelayToPeer::CopyFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoSessionRelayToPeer::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramNoSessionRelayToPeer::Swap(CMsgSteamDatagramNoSessionRelayToPeer* other) {
  if (other != this) {
    std::swap(legacy_relay_session_id_, other->legacy_relay_session_id_);
    std::swap(from_relay_session_id_, other->from_relay_session_id_);
    std::swap(from_connection_id_, other->from_connection_id_);
    std::swap(kludge_pad_, other->kludge_pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramNoSessionRelayToPeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramNoSessionRelayToPeer_descriptor_;
  metadata.reflection = CMsgSteamDatagramNoSessionRelayToPeer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramClientPingSampleRequest::kConnectionIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientPingSampleRequest::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(const CMsgSteamDatagramClientPingSampleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleRequest::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientPingSampleRequest::~CMsgSteamDatagramClientPingSampleRequest() {
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientPingSampleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientPingSampleRequest_descriptor_;
}

const CMsgSteamDatagramClientPingSampleRequest& CMsgSteamDatagramClientPingSampleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientPingSampleRequest* CMsgSteamDatagramClientPingSampleRequest::default_instance_ = NULL;

CMsgSteamDatagramClientPingSampleRequest* CMsgSteamDatagramClientPingSampleRequest::New() const {
  return new CMsgSteamDatagramClientPingSampleRequest;
}

void CMsgSteamDatagramClientPingSampleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientPingSampleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientPingSampleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientPingSampleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleRequest::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientPingSampleRequest::Swap(CMsgSteamDatagramClientPingSampleRequest* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientPingSampleRequest_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientPingSampleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kFrontPingMsFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kE2EPingMsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CMsgSteamDatagramClientPingSampleReply_RoutingCluster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CMsgSteamDatagramClientPingSampleReply_RoutingCluster(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  front_ping_ms_ = 0u;
  e2e_ping_ms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::~CMsgSteamDatagramClientPingSampleReply_RoutingCluster() {
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_;
}

const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance_ = NULL;

CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::New() const {
  return new CMsgSteamDatagramClientPingSampleReply_RoutingCluster;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    front_ping_ms_ = 0u;
    e2e_ping_ms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_front_ping_ms;
        break;
      }

      // optional uint32 front_ping_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_front_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_ping_ms_)));
          set_has_front_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_e2e_ping_ms;
        break;
      }

      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_e2e_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e2e_ping_ms_)));
          set_has_e2e_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // optional uint32 front_ping_ms = 2;
  if (has_front_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->front_ping_ms(), output);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (has_e2e_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e2e_ping_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // optional uint32 front_ping_ms = 2;
  if (has_front_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->front_ping_ms(), target);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (has_e2e_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e2e_ping_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 front_ping_ms = 2;
    if (has_front_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_ping_ms());
    }

    // optional uint32 e2e_ping_ms = 3;
    if (has_e2e_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e2e_ping_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_RoutingCluster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientPingSampleReply_RoutingCluster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_front_ping_ms()) {
      set_front_ping_ms(from.front_ping_ms());
    }
    if (from.has_e2e_ping_ms()) {
      set_e2e_ping_ms(from.e2e_ping_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::Swap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(front_ping_ms_, other->front_ping_ms_);
    std::swap(e2e_ping_ms_, other->e2e_ping_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_RoutingCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientPingSampleReply_RoutingCluster_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientPingSampleReply_RoutingCluster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kDataCenterIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kViaRelayIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kE2EPingMsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientPingSampleReply_DataCenter::CMsgSteamDatagramClientPingSampleReply_DataCenter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientPingSampleReply_DataCenter::CMsgSteamDatagramClientPingSampleReply_DataCenter(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  data_center_id_ = 0u;
  via_relay_id_ = 0u;
  e2e_ping_ms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientPingSampleReply_DataCenter::~CMsgSteamDatagramClientPingSampleReply_DataCenter() {
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_DataCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_;
}

const CMsgSteamDatagramClientPingSampleReply_DataCenter& CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance_ = NULL;

CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply_DataCenter::New() const {
  return new CMsgSteamDatagramClientPingSampleReply_DataCenter;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_center_id_ = 0u;
    via_relay_id_ = 0u;
    e2e_ping_ms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientPingSampleReply_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_center_id_)));
          set_has_data_center_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_via_relay_id;
        break;
      }

      // optional fixed32 via_relay_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_via_relay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &via_relay_id_)));
          set_has_via_relay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_e2e_ping_ms;
        break;
      }

      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_e2e_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e2e_ping_ms_)));
          set_has_e2e_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 data_center_id = 1;
  if (has_data_center_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->data_center_id(), output);
  }

  // optional fixed32 via_relay_id = 2;
  if (has_via_relay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->via_relay_id(), output);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (has_e2e_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e2e_ping_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply_DataCenter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 data_center_id = 1;
  if (has_data_center_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->data_center_id(), target);
  }

  // optional fixed32 via_relay_id = 2;
  if (has_via_relay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->via_relay_id(), target);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (has_e2e_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e2e_ping_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientPingSampleReply_DataCenter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 data_center_id = 1;
    if (has_data_center_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 via_relay_id = 2;
    if (has_via_relay_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 e2e_ping_ms = 3;
    if (has_e2e_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e2e_ping_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_DataCenter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientPingSampleReply_DataCenter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_center_id()) {
      set_data_center_id(from.data_center_id());
    }
    if (from.has_via_relay_id()) {
      set_via_relay_id(from.via_relay_id());
    }
    if (from.has_e2e_ping_ms()) {
      set_e2e_ping_ms(from.e2e_ping_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_DataCenter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::Swap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other) {
  if (other != this) {
    std::swap(data_center_id_, other->data_center_id_);
    std::swap(via_relay_id_, other->via_relay_id_);
    std::swap(e2e_ping_ms_, other->e2e_ping_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_DataCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientPingSampleReply_DataCenter_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientPingSampleReply_DataCenter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramClientPingSampleReply::kConnectionIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply::kRoutingClustersFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply::kDataCentersFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientPingSampleReply::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(const CMsgSteamDatagramClientPingSampleReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientPingSampleReply::~CMsgSteamDatagramClientPingSampleReply() {
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientPingSampleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientPingSampleReply_descriptor_;
}

const CMsgSteamDatagramClientPingSampleReply& CMsgSteamDatagramClientPingSampleReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientPingSampleReply* CMsgSteamDatagramClientPingSampleReply::default_instance_ = NULL;

CMsgSteamDatagramClientPingSampleReply* CMsgSteamDatagramClientPingSampleReply::New() const {
  return new CMsgSteamDatagramClientPingSampleReply;
}

void CMsgSteamDatagramClientPingSampleReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
  }
  routing_clusters_.Clear();
  data_centers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientPingSampleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_routing_clusters;
        break;
      }

      // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routing_clusters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routing_clusters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_routing_clusters;
        if (input->ExpectTag(26)) goto parse_data_centers;
        break;
      }

      // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_centers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_centers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_centers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  for (int i = 0; i < this->routing_clusters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routing_clusters(i), output);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  for (int i = 0; i < this->data_centers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_centers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  for (int i = 0; i < this->routing_clusters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->routing_clusters(i), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  for (int i = 0; i < this->data_centers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data_centers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientPingSampleReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  total_size += 1 * this->routing_clusters_size();
  for (int i = 0; i < this->routing_clusters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routing_clusters(i));
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  total_size += 1 * this->data_centers_size();
  for (int i = 0; i < this->data_centers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_centers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientPingSampleReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  routing_clusters_.MergeFrom(from.routing_clusters_);
  data_centers_.MergeFrom(from.data_centers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientPingSampleReply::Swap(CMsgSteamDatagramClientPingSampleReply* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    routing_clusters_.Swap(&other->routing_clusters_);
    data_centers_.Swap(&other->data_centers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientPingSampleReply_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientPingSampleReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kScoreFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kFrontPingFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kBackPingFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kSecondsUntilDownFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InitAsDefaultInstance() {
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  front_ping_ = 0u;
  back_ping_ = 0u;
  seconds_until_down_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
  SharedDtor();
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_;
}

const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance_ = NULL;

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::New() const {
  return new CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    front_ping_ = 0u;
    back_ping_ = 0u;
    seconds_until_down_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_front_ping;
        break;
      }

      // optional uint32 front_ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_front_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_ping_)));
          set_has_front_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_back_ping;
        break;
      }

      // optional uint32 back_ping = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_ping_)));
          set_has_back_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seconds_until_down;
        break;
      }

      // optional uint32 seconds_until_down = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_down_)));
          set_has_seconds_until_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional uint32 front_ping = 2;
  if (has_front_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->front_ping(), output);
  }

  // optional uint32 back_ping = 3;
  if (has_back_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->back_ping(), output);
  }

  // optional uint32 seconds_until_down = 4;
  if (has_seconds_until_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_until_down(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional uint32 front_ping = 2;
  if (has_front_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->front_ping(), target);
  }

  // optional uint32 back_ping = 3;
  if (has_back_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->back_ping(), target);
  }

  // optional uint32 seconds_until_down = 4;
  if (has_seconds_until_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_until_down(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 front_ping = 2;
    if (has_front_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_ping());
    }

    // optional uint32 back_ping = 3;
    if (has_back_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_ping());
    }

    // optional uint32 seconds_until_down = 4;
    if (has_seconds_until_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_down());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_front_ping()) {
      set_front_ping(from.front_ping());
    }
    if (from.has_back_ping()) {
      set_back_ping(from.back_ping());
    }
    if (from.has_seconds_until_down()) {
      set_seconds_until_down(from.seconds_until_down());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Swap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(front_ping_, other->front_ping_);
    std::swap(back_ping_, other->back_ping_);
    std::swap(seconds_until_down_, other->seconds_until_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramClientSwitchedPrimary::kConnectionIdFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromIpFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromPortFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromRouterClusterFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromActiveTimeFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromActivePacketsRecvFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromDroppedReasonFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kGapMsFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromQualityNowFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kToQualityNowFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromQualityThenFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kToQualityThenFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramClientSwitchedPrimary::InitAsDefaultInstance() {
  from_quality_now_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
  to_quality_now_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
  from_quality_then_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
  to_quality_then_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance());
}

CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(const CMsgSteamDatagramClientSwitchedPrimary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  from_ip_ = 0u;
  from_port_ = 0u;
  from_router_cluster_ = 0u;
  from_active_time_ = 0u;
  from_active_packets_recv_ = 0u;
  from_dropped_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gap_ms_ = 0u;
  from_quality_now_ = NULL;
  to_quality_now_ = NULL;
  from_quality_then_ = NULL;
  to_quality_then_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramClientSwitchedPrimary::~CMsgSteamDatagramClientSwitchedPrimary() {
  SharedDtor();
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedDtor() {
  if (from_dropped_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete from_dropped_reason_;
  }
  if (this != default_instance_) {
    delete from_quality_now_;
    delete to_quality_now_;
    delete from_quality_then_;
    delete to_quality_then_;
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramClientSwitchedPrimary_descriptor_;
}

const CMsgSteamDatagramClientSwitchedPrimary& CMsgSteamDatagramClientSwitchedPrimary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramClientSwitchedPrimary* CMsgSteamDatagramClientSwitchedPrimary::default_instance_ = NULL;

CMsgSteamDatagramClientSwitchedPrimary* CMsgSteamDatagramClientSwitchedPrimary::New() const {
  return new CMsgSteamDatagramClientSwitchedPrimary;
}

void CMsgSteamDatagramClientSwitchedPrimary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
    from_ip_ = 0u;
    from_port_ = 0u;
    from_router_cluster_ = 0u;
    from_active_time_ = 0u;
    from_active_packets_recv_ = 0u;
    if (has_from_dropped_reason()) {
      if (from_dropped_reason_ != &::google::protobuf::internal::kEmptyString) {
        from_dropped_reason_->clear();
      }
    }
    gap_ms_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_from_quality_now()) {
      if (from_quality_now_ != NULL) from_quality_now_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
    }
    if (has_to_quality_now()) {
      if (to_quality_now_ != NULL) to_quality_now_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
    }
    if (has_from_quality_then()) {
      if (from_quality_then_ != NULL) from_quality_then_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
    }
    if (has_to_quality_then()) {
      if (to_quality_then_ != NULL) to_quality_then_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramClientSwitchedPrimary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_from_ip;
        break;
      }

      // optional fixed32 from_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_ip_)));
          set_has_from_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_port;
        break;
      }

      // optional uint32 from_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_port_)));
          set_has_from_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_from_router_cluster;
        break;
      }

      // optional fixed32 from_router_cluster = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_router_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_router_cluster_)));
          set_has_from_router_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_active_time;
        break;
      }

      // optional uint32 from_active_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_active_time_)));
          set_has_from_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_from_active_packets_recv;
        break;
      }

      // optional uint32 from_active_packets_recv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_active_packets_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_active_packets_recv_)));
          set_has_from_active_packets_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_from_dropped_reason;
        break;
      }

      // optional string from_dropped_reason = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_dropped_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_dropped_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_dropped_reason().data(), this->from_dropped_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gap_ms;
        break;
      }

      // optional uint32 gap_ms = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gap_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gap_ms_)));
          set_has_gap_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_from_quality_now;
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_quality_now:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_quality_now()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_to_quality_now;
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_quality_now:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_quality_now()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_from_quality_then;
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_quality_then:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_quality_then()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_to_quality_then;
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_quality_then:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_quality_then()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramClientSwitchedPrimary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional fixed32 from_ip = 2;
  if (has_from_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_ip(), output);
  }

  // optional uint32 from_port = 3;
  if (has_from_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_port(), output);
  }

  // optional fixed32 from_router_cluster = 4;
  if (has_from_router_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->from_router_cluster(), output);
  }

  // optional uint32 from_active_time = 5;
  if (has_from_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_active_time(), output);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (has_from_active_packets_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->from_active_packets_recv(), output);
  }

  // optional string from_dropped_reason = 7;
  if (has_from_dropped_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_dropped_reason().data(), this->from_dropped_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->from_dropped_reason(), output);
  }

  // optional uint32 gap_ms = 8;
  if (has_gap_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gap_ms(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (has_from_quality_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->from_quality_now(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (has_to_quality_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->to_quality_now(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (has_from_quality_then()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->from_quality_then(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (has_to_quality_then()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->to_quality_then(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramClientSwitchedPrimary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional fixed32 from_ip = 2;
  if (has_from_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_ip(), target);
  }

  // optional uint32 from_port = 3;
  if (has_from_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_port(), target);
  }

  // optional fixed32 from_router_cluster = 4;
  if (has_from_router_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->from_router_cluster(), target);
  }

  // optional uint32 from_active_time = 5;
  if (has_from_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from_active_time(), target);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (has_from_active_packets_recv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->from_active_packets_recv(), target);
  }

  // optional string from_dropped_reason = 7;
  if (has_from_dropped_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_dropped_reason().data(), this->from_dropped_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->from_dropped_reason(), target);
  }

  // optional uint32 gap_ms = 8;
  if (has_gap_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gap_ms(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (has_from_quality_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->from_quality_now(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (has_to_quality_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->to_quality_now(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (has_from_quality_then()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->from_quality_then(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (has_to_quality_then()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->to_quality_then(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramClientSwitchedPrimary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_ip = 2;
    if (has_from_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 from_port = 3;
    if (has_from_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_port());
    }

    // optional fixed32 from_router_cluster = 4;
    if (has_from_router_cluster()) {
      total_size += 1 + 4;
    }

    // optional uint32 from_active_time = 5;
    if (has_from_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_active_time());
    }

    // optional uint32 from_active_packets_recv = 6;
    if (has_from_active_packets_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_active_packets_recv());
    }

    // optional string from_dropped_reason = 7;
    if (has_from_dropped_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_dropped_reason());
    }

    // optional uint32 gap_ms = 8;
    if (has_gap_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gap_ms());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    if (has_from_quality_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_quality_now());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    if (has_to_quality_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_quality_now());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    if (has_from_quality_then()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_quality_then());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    if (has_to_quality_then()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_quality_then());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramClientSwitchedPrimary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_from_ip()) {
      set_from_ip(from.from_ip());
    }
    if (from.has_from_port()) {
      set_from_port(from.from_port());
    }
    if (from.has_from_router_cluster()) {
      set_from_router_cluster(from.from_router_cluster());
    }
    if (from.has_from_active_time()) {
      set_from_active_time(from.from_active_time());
    }
    if (from.has_from_active_packets_recv()) {
      set_from_active_packets_recv(from.from_active_packets_recv());
    }
    if (from.has_from_dropped_reason()) {
      set_from_dropped_reason(from.from_dropped_reason());
    }
    if (from.has_gap_ms()) {
      set_gap_ms(from.gap_ms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_from_quality_now()) {
      mutable_from_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.from_quality_now());
    }
    if (from.has_to_quality_now()) {
      mutable_to_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.to_quality_now());
    }
    if (from.has_from_quality_then()) {
      mutable_from_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.from_quality_then());
    }
    if (from.has_to_quality_then()) {
      mutable_to_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.to_quality_then());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary::Swap(CMsgSteamDatagramClientSwitchedPrimary* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(from_ip_, other->from_ip_);
    std::swap(from_port_, other->from_port_);
    std::swap(from_router_cluster_, other->from_router_cluster_);
    std::swap(from_active_time_, other->from_active_time_);
    std::swap(from_active_packets_recv_, other->from_active_packets_recv_);
    std::swap(from_dropped_reason_, other->from_dropped_reason_);
    std::swap(gap_ms_, other->gap_ms_);
    std::swap(from_quality_now_, other->from_quality_now_);
    std::swap(to_quality_now_, other->to_quality_now_);
    std::swap(from_quality_then_, other->from_quality_then_);
    std::swap(to_quality_then_, other->to_quality_then_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramClientSwitchedPrimary_descriptor_;
  metadata.reflection = CMsgSteamDatagramClientSwitchedPrimary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramConnectRequest::kConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectRequest::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectRequest::kMyTimestampFieldNumber;
const int CMsgSteamDatagramConnectRequest::kPingEstMsFieldNumber;
const int CMsgSteamDatagramConnectRequest::kVirtualPortFieldNumber;
const int CMsgSteamDatagramConnectRequest::kGameserverRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectRequest::kCryptFieldNumber;
const int CMsgSteamDatagramConnectRequest::kCertFieldNumber;
const int CMsgSteamDatagramConnectRequest::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectRequest::InitAsDefaultInstance() {
  crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(&::CMsgSteamDatagramSessionCryptInfoSigned::default_instance());
  cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(&::CMsgSteamDatagramCertificateSigned::default_instance());
}

CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(const CMsgSteamDatagramConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  my_timestamp_ = GOOGLE_ULONGLONG(0);
  ping_est_ms_ = 0u;
  virtual_port_ = 0u;
  gameserver_relay_session_id_ = 0u;
  crypt_ = NULL;
  cert_ = NULL;
  protocol_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectRequest::~CMsgSteamDatagramConnectRequest() {
  SharedDtor();
}

void CMsgSteamDatagramConnectRequest::SharedDtor() {
  if (this != default_instance_) {
    delete crypt_;
    delete cert_;
  }
}

void CMsgSteamDatagramConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectRequest_descriptor_;
}

const CMsgSteamDatagramConnectRequest& CMsgSteamDatagramConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectRequest* CMsgSteamDatagramConnectRequest::default_instance_ = NULL;

CMsgSteamDatagramConnectRequest* CMsgSteamDatagramConnectRequest::New() const {
  return new CMsgSteamDatagramConnectRequest;
}

void CMsgSteamDatagramConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
    client_steam_id_ = GOOGLE_ULONGLONG(0);
    my_timestamp_ = GOOGLE_ULONGLONG(0);
    ping_est_ms_ = 0u;
    virtual_port_ = 0u;
    gameserver_relay_session_id_ = 0u;
    if (has_crypt()) {
      if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
    }
    if (has_cert()) {
      if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    protocol_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameserver_relay_session_id;
        break;
      }

      // optional uint32 gameserver_relay_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameserver_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameserver_relay_session_id_)));
          set_has_gameserver_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_client_steam_id;
        break;
      }

      // optional fixed64 client_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          set_has_client_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_my_timestamp;
        break;
      }

      // optional fixed64 my_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_my_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &my_timestamp_)));
          set_has_my_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ping_est_ms;
        break;
      }

      // optional uint32 ping_est_ms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_est_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_est_ms_)));
          set_has_ping_est_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_crypt;
        break;
      }

      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crypt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cert;
        break;
      }

      // optional .CMsgSteamDatagramCertificateSigned cert = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_virtual_port;
        break;
      }

      // optional uint32 virtual_port = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtual_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_port_)));
          set_has_virtual_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (has_gameserver_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameserver_relay_session_id(), output);
  }

  // optional fixed64 client_steam_id = 3;
  if (has_client_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->client_steam_id(), output);
  }

  // optional fixed64 my_timestamp = 4;
  if (has_my_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->my_timestamp(), output);
  }

  // optional uint32 ping_est_ms = 5;
  if (has_ping_est_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping_est_ms(), output);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (has_crypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->crypt(), output);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cert(), output);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_version(), output);
  }

  // optional uint32 virtual_port = 9;
  if (has_virtual_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->virtual_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (has_gameserver_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameserver_relay_session_id(), target);
  }

  // optional fixed64 client_steam_id = 3;
  if (has_client_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->client_steam_id(), target);
  }

  // optional fixed64 my_timestamp = 4;
  if (has_my_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 5;
  if (has_ping_est_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping_est_ms(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if (has_crypt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->crypt(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  if (has_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cert(), target);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protocol_version(), target);
  }

  // optional uint32 virtual_port = 9;
  if (has_virtual_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->virtual_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 client_steam_id = 3;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 my_timestamp = 4;
    if (has_my_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 ping_est_ms = 5;
    if (has_ping_est_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_est_ms());
    }

    // optional uint32 virtual_port = 9;
    if (has_virtual_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_port());
    }

    // optional uint32 gameserver_relay_session_id = 2;
    if (has_gameserver_relay_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameserver_relay_session_id());
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    if (has_crypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crypt());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cert());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 protocol_version = 8;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectRequest::MergeFrom(const CMsgSteamDatagramConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_client_steam_id()) {
      set_client_steam_id(from.client_steam_id());
    }
    if (from.has_my_timestamp()) {
      set_my_timestamp(from.my_timestamp());
    }
    if (from.has_ping_est_ms()) {
      set_ping_est_ms(from.ping_est_ms());
    }
    if (from.has_virtual_port()) {
      set_virtual_port(from.virtual_port());
    }
    if (from.has_gameserver_relay_session_id()) {
      set_gameserver_relay_session_id(from.gameserver_relay_session_id());
    }
    if (from.has_crypt()) {
      mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (from.has_cert()) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectRequest::CopyFrom(const CMsgSteamDatagramConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectRequest::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectRequest::Swap(CMsgSteamDatagramConnectRequest* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(my_timestamp_, other->my_timestamp_);
    std::swap(ping_est_ms_, other->ping_est_ms_);
    std::swap(virtual_port_, other->virtual_port_);
    std::swap(gameserver_relay_session_id_, other->gameserver_relay_session_id_);
    std::swap(crypt_, other->crypt_);
    std::swap(cert_, other->cert_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectRequest_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramConnectOK::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectOK::kServerConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectOK::kYourTimestampFieldNumber;
const int CMsgSteamDatagramConnectOK::kDelayTimeUsecFieldNumber;
const int CMsgSteamDatagramConnectOK::kGameserverRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectOK::kCryptFieldNumber;
const int CMsgSteamDatagramConnectOK::kCertFieldNumber;
const int CMsgSteamDatagramConnectOK::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectOK::InitAsDefaultInstance() {
  crypt_ = const_cast< ::CMsgSteamDatagramSessionCryptInfoSigned*>(&::CMsgSteamDatagramSessionCryptInfoSigned::default_instance());
  cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(&::CMsgSteamDatagramCertificateSigned::default_instance());
}

CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(const CMsgSteamDatagramConnectOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectOK::SharedCtor() {
  _cached_size_ = 0;
  client_connection_id_ = 0u;
  server_connection_id_ = 0u;
  your_timestamp_ = GOOGLE_ULONGLONG(0);
  delay_time_usec_ = 0u;
  gameserver_relay_session_id_ = 0u;
  crypt_ = NULL;
  cert_ = NULL;
  protocol_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectOK::~CMsgSteamDatagramConnectOK() {
  SharedDtor();
}

void CMsgSteamDatagramConnectOK::SharedDtor() {
  if (this != default_instance_) {
    delete crypt_;
    delete cert_;
  }
}

void CMsgSteamDatagramConnectOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectOK_descriptor_;
}

const CMsgSteamDatagramConnectOK& CMsgSteamDatagramConnectOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectOK* CMsgSteamDatagramConnectOK::default_instance_ = NULL;

CMsgSteamDatagramConnectOK* CMsgSteamDatagramConnectOK::New() const {
  return new CMsgSteamDatagramConnectOK;
}

void CMsgSteamDatagramConnectOK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_connection_id_ = 0u;
    server_connection_id_ = 0u;
    your_timestamp_ = GOOGLE_ULONGLONG(0);
    delay_time_usec_ = 0u;
    gameserver_relay_session_id_ = 0u;
    if (has_crypt()) {
      if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
    }
    if (has_cert()) {
      if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
    }
    protocol_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameserver_relay_session_id;
        break;
      }

      // optional uint32 gameserver_relay_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameserver_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameserver_relay_session_id_)));
          set_has_gameserver_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_your_timestamp;
        break;
      }

      // optional fixed64 your_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_your_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &your_timestamp_)));
          set_has_your_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delay_time_usec;
        break;
      }

      // optional uint32 delay_time_usec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay_time_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_time_usec_)));
          set_has_delay_time_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_crypt;
        break;
      }

      // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crypt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cert;
        break;
      }

      // optional .CMsgSteamDatagramCertificateSigned cert = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_server_connection_id;
        break;
      }

      // optional fixed32 server_connection_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
          set_has_server_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 client_connection_id = 1;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_connection_id(), output);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (has_gameserver_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameserver_relay_session_id(), output);
  }

  // optional fixed64 your_timestamp = 3;
  if (has_your_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->your_timestamp(), output);
  }

  // optional uint32 delay_time_usec = 4;
  if (has_delay_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delay_time_usec(), output);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (has_crypt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->crypt(), output);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cert(), output);
  }

  // optional fixed32 server_connection_id = 7;
  if (has_server_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->server_connection_id(), output);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 client_connection_id = 1;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if (has_gameserver_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameserver_relay_session_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if (has_your_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if (has_delay_time_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delay_time_usec(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if (has_crypt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->crypt(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if (has_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cert(), target);
  }

  // optional fixed32 server_connection_id = 7;
  if (has_server_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->server_connection_id(), target);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protocol_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 client_connection_id = 1;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_connection_id = 7;
    if (has_server_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 your_timestamp = 3;
    if (has_your_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 delay_time_usec = 4;
    if (has_delay_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_time_usec());
    }

    // optional uint32 gameserver_relay_session_id = 2;
    if (has_gameserver_relay_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameserver_relay_session_id());
    }

    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    if (has_crypt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crypt());
    }

    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cert());
    }

    // optional uint32 protocol_version = 8;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectOK::MergeFrom(const CMsgSteamDatagramConnectOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_server_connection_id()) {
      set_server_connection_id(from.server_connection_id());
    }
    if (from.has_your_timestamp()) {
      set_your_timestamp(from.your_timestamp());
    }
    if (from.has_delay_time_usec()) {
      set_delay_time_usec(from.delay_time_usec());
    }
    if (from.has_gameserver_relay_session_id()) {
      set_gameserver_relay_session_id(from.gameserver_relay_session_id());
    }
    if (from.has_crypt()) {
      mutable_crypt()->::CMsgSteamDatagramSessionCryptInfoSigned::MergeFrom(from.crypt());
    }
    if (from.has_cert()) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectOK::CopyFrom(const CMsgSteamDatagramConnectOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectOK::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectOK::Swap(CMsgSteamDatagramConnectOK* other) {
  if (other != this) {
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(server_connection_id_, other->server_connection_id_);
    std::swap(your_timestamp_, other->your_timestamp_);
    std::swap(delay_time_usec_, other->delay_time_usec_);
    std::swap(gameserver_relay_session_id_, other->gameserver_relay_session_id_);
    std::swap(crypt_, other->crypt_);
    std::swap(cert_, other->cert_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectOK_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectOK_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor_;
}
bool CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::None;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::EndToEnd;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ClosedByPeer;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ERelayMode_MIN;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::ERelayMode_MAX;
const int CMsgSteamDatagramConnectionClosed::ERelayMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionClosed::kToConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kFromConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kFromSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kLegacyGameserverRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kToRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kForwardTargetRelayRoutingTokenFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kRelayModeFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kDebugFieldNumber;
const int CMsgSteamDatagramConnectionClosed::kReasonCodeFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionClosed::InitAsDefaultInstance() {
}

CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(const CMsgSteamDatagramConnectionClosed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionClosed::SharedCtor() {
  _cached_size_ = 0;
  to_connection_id_ = 0u;
  from_connection_id_ = 0u;
  from_steam_id_ = GOOGLE_ULONGLONG(0);
  legacy_gameserver_relay_session_id_ = 0u;
  to_relay_session_id_ = 0u;
  from_relay_session_id_ = 0u;
  forward_target_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  forward_target_revision_ = 0u;
  relay_mode_ = 0;
  debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionClosed::~CMsgSteamDatagramConnectionClosed() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionClosed::SharedDtor() {
  if (forward_target_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete forward_target_relay_routing_token_;
  }
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramConnectionClosed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionClosed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionClosed_descriptor_;
}

const CMsgSteamDatagramConnectionClosed& CMsgSteamDatagramConnectionClosed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionClosed* CMsgSteamDatagramConnectionClosed::default_instance_ = NULL;

CMsgSteamDatagramConnectionClosed* CMsgSteamDatagramConnectionClosed::New() const {
  return new CMsgSteamDatagramConnectionClosed;
}

void CMsgSteamDatagramConnectionClosed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_connection_id_ = 0u;
    from_connection_id_ = 0u;
    from_steam_id_ = GOOGLE_ULONGLONG(0);
    legacy_gameserver_relay_session_id_ = 0u;
    to_relay_session_id_ = 0u;
    from_relay_session_id_ = 0u;
    if (has_forward_target_relay_routing_token()) {
      if (forward_target_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
        forward_target_relay_routing_token_->clear();
      }
    }
    forward_target_revision_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    relay_mode_ = 0;
    if (has_debug()) {
      if (debug_ != &::google::protobuf::internal::kEmptyString) {
        debug_->clear();
      }
    }
    reason_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionClosed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_gameserver_relay_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_gameserver_relay_session_id_)));
          set_has_legacy_gameserver_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_from_steam_id;
        break;
      }

      // optional fixed64 from_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_from_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &from_steam_id_)));
          set_has_from_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_relay_mode;
        break;
      }

      // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relay_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(value)) {
            set_relay_mode(static_cast< ::CMsgSteamDatagramConnectionClosed_ERelayMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_debug;
        break;
      }

      // optional string debug = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug().data(), this->debug().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reason_code;
        break;
      }

      // optional uint32 reason_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_code_)));
          set_has_reason_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_to_connection_id;
        break;
      }

      // optional fixed32 to_connection_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
          set_has_to_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_from_connection_id;
        break;
      }

      // optional fixed32 from_connection_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
          set_has_from_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_to_relay_session_id;
        break;
      }

      // optional fixed32 to_relay_session_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_relay_session_id_)));
          set_has_to_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_from_relay_session_id;
        break;
      }

      // optional fixed32 from_relay_session_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
          set_has_from_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_forward_target_relay_routing_token;
        break;
      }

      // optional bytes forward_target_relay_routing_token = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forward_target_relay_routing_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forward_target_relay_routing_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_forward_target_revision;
        break;
      }

      // optional uint32 forward_target_revision = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forward_target_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_target_revision_)));
          set_has_forward_target_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionClosed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (has_legacy_gameserver_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->legacy_gameserver_relay_session_id(), output);
  }

  // optional fixed64 from_steam_id = 3;
  if (has_from_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->from_steam_id(), output);
  }

  // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  if (has_relay_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->relay_mode(), output);
  }

  // optional string debug = 5;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debug(), output);
  }

  // optional uint32 reason_code = 6;
  if (has_reason_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reason_code(), output);
  }

  // optional fixed32 to_connection_id = 7;
  if (has_to_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->to_connection_id(), output);
  }

  // optional fixed32 from_connection_id = 8;
  if (has_from_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->from_connection_id(), output);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (has_to_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->to_relay_session_id(), output);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (has_from_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->from_relay_session_id(), output);
  }

  // optional bytes forward_target_relay_routing_token = 11;
  if (has_forward_target_relay_routing_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->forward_target_relay_routing_token(), output);
  }

  // optional uint32 forward_target_revision = 12;
  if (has_forward_target_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->forward_target_revision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionClosed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (has_legacy_gameserver_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 from_steam_id = 3;
  if (has_from_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->from_steam_id(), target);
  }

  // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  if (has_relay_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->relay_mode(), target);
  }

  // optional string debug = 5;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug().data(), this->debug().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->debug(), target);
  }

  // optional uint32 reason_code = 6;
  if (has_reason_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reason_code(), target);
  }

  // optional fixed32 to_connection_id = 7;
  if (has_to_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 8;
  if (has_from_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->from_connection_id(), target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (has_to_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (has_from_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->from_relay_session_id(), target);
  }

  // optional bytes forward_target_relay_routing_token = 11;
  if (has_forward_target_relay_routing_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->forward_target_relay_routing_token(), target);
  }

  // optional uint32 forward_target_revision = 12;
  if (has_forward_target_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->forward_target_revision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionClosed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 to_connection_id = 7;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 8;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 from_steam_id = 3;
    if (has_from_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if (has_legacy_gameserver_relay_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_gameserver_relay_session_id());
    }

    // optional fixed32 to_relay_session_id = 9;
    if (has_to_relay_session_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_relay_session_id = 10;
    if (has_from_relay_session_id()) {
      total_size += 1 + 4;
    }

    // optional bytes forward_target_relay_routing_token = 11;
    if (has_forward_target_relay_routing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forward_target_relay_routing_token());
    }

    // optional uint32 forward_target_revision = 12;
    if (has_forward_target_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forward_target_revision());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    if (has_relay_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relay_mode());
    }

    // optional string debug = 5;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug());
    }

    // optional uint32 reason_code = 6;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionClosed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionClosed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionClosed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionClosed::MergeFrom(const CMsgSteamDatagramConnectionClosed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_connection_id()) {
      set_to_connection_id(from.to_connection_id());
    }
    if (from.has_from_connection_id()) {
      set_from_connection_id(from.from_connection_id());
    }
    if (from.has_from_steam_id()) {
      set_from_steam_id(from.from_steam_id());
    }
    if (from.has_legacy_gameserver_relay_session_id()) {
      set_legacy_gameserver_relay_session_id(from.legacy_gameserver_relay_session_id());
    }
    if (from.has_to_relay_session_id()) {
      set_to_relay_session_id(from.to_relay_session_id());
    }
    if (from.has_from_relay_session_id()) {
      set_from_relay_session_id(from.from_relay_session_id());
    }
    if (from.has_forward_target_relay_routing_token()) {
      set_forward_target_relay_routing_token(from.forward_target_relay_routing_token());
    }
    if (from.has_forward_target_revision()) {
      set_forward_target_revision(from.forward_target_revision());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_relay_mode()) {
      set_relay_mode(from.relay_mode());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
    if (from.has_reason_code()) {
      set_reason_code(from.reason_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionClosed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionClosed::CopyFrom(const CMsgSteamDatagramConnectionClosed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionClosed::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionClosed::Swap(CMsgSteamDatagramConnectionClosed* other) {
  if (other != this) {
    std::swap(to_connection_id_, other->to_connection_id_);
    std::swap(from_connection_id_, other->from_connection_id_);
    std::swap(from_steam_id_, other->from_steam_id_);
    std::swap(legacy_gameserver_relay_session_id_, other->legacy_gameserver_relay_session_id_);
    std::swap(to_relay_session_id_, other->to_relay_session_id_);
    std::swap(from_relay_session_id_, other->from_relay_session_id_);
    std::swap(forward_target_relay_routing_token_, other->forward_target_relay_routing_token_);
    std::swap(forward_target_revision_, other->forward_target_revision_);
    std::swap(relay_mode_, other->relay_mode_);
    std::swap(debug_, other->debug_);
    std::swap(reason_code_, other->reason_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionClosed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionClosed_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionClosed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramNoConnection::kToConnectionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kFromConnectionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kLegacyGameserverRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kToRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kFromSteamIdFieldNumber;
const int CMsgSteamDatagramNoConnection::kEndToEndFieldNumber;
const int CMsgSteamDatagramNoConnection::kDummyPadFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramNoConnection::InitAsDefaultInstance() {
}

CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(const CMsgSteamDatagramNoConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramNoConnection::SharedCtor() {
  _cached_size_ = 0;
  to_connection_id_ = 0u;
  from_connection_id_ = 0u;
  legacy_gameserver_relay_session_id_ = 0u;
  to_relay_session_id_ = 0u;
  from_relay_session_id_ = 0u;
  from_steam_id_ = GOOGLE_ULONGLONG(0);
  end_to_end_ = false;
  dummy_pad_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramNoConnection::~CMsgSteamDatagramNoConnection() {
  SharedDtor();
}

void CMsgSteamDatagramNoConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramNoConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramNoConnection_descriptor_;
}

const CMsgSteamDatagramNoConnection& CMsgSteamDatagramNoConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramNoConnection* CMsgSteamDatagramNoConnection::default_instance_ = NULL;

CMsgSteamDatagramNoConnection* CMsgSteamDatagramNoConnection::New() const {
  return new CMsgSteamDatagramNoConnection;
}

void CMsgSteamDatagramNoConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_connection_id_ = 0u;
    from_connection_id_ = 0u;
    legacy_gameserver_relay_session_id_ = 0u;
    to_relay_session_id_ = 0u;
    from_relay_session_id_ = 0u;
    from_steam_id_ = GOOGLE_ULONGLONG(0);
    end_to_end_ = false;
    dummy_pad_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramNoConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_gameserver_relay_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_gameserver_relay_session_id_)));
          set_has_legacy_gameserver_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_from_steam_id;
        break;
      }

      // optional fixed64 from_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_from_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &from_steam_id_)));
          set_has_from_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_to_end;
        break;
      }

      // optional bool end_to_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_to_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_to_end_)));
          set_has_end_to_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_to_connection_id;
        break;
      }

      // optional fixed32 to_connection_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
          set_has_to_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_from_connection_id;
        break;
      }

      // optional fixed32 from_connection_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_connection_id_)));
          set_has_from_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_to_relay_session_id;
        break;
      }

      // optional fixed32 to_relay_session_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_relay_session_id_)));
          set_has_to_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_from_relay_session_id;
        break;
      }

      // optional fixed32 from_relay_session_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
          set_has_from_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8189)) goto parse_dummy_pad;
        break;
      }

      // optional fixed32 dummy_pad = 1023;
      case 1023: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dummy_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &dummy_pad_)));
          set_has_dummy_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramNoConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (has_legacy_gameserver_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->legacy_gameserver_relay_session_id(), output);
  }

  // optional fixed64 from_steam_id = 3;
  if (has_from_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->from_steam_id(), output);
  }

  // optional bool end_to_end = 4;
  if (has_end_to_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->end_to_end(), output);
  }

  // optional fixed32 to_connection_id = 5;
  if (has_to_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->to_connection_id(), output);
  }

  // optional fixed32 from_connection_id = 6;
  if (has_from_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->from_connection_id(), output);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (has_to_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->to_relay_session_id(), output);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (has_from_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->from_relay_session_id(), output);
  }

  // optional fixed32 dummy_pad = 1023;
  if (has_dummy_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1023, this->dummy_pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramNoConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if (has_legacy_gameserver_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 from_steam_id = 3;
  if (has_from_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->from_steam_id(), target);
  }

  // optional bool end_to_end = 4;
  if (has_end_to_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->end_to_end(), target);
  }

  // optional fixed32 to_connection_id = 5;
  if (has_to_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 6;
  if (has_from_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->from_connection_id(), target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if (has_to_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if (has_from_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->from_relay_session_id(), target);
  }

  // optional fixed32 dummy_pad = 1023;
  if (has_dummy_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1023, this->dummy_pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramNoConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 to_connection_id = 5;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_connection_id = 6;
    if (has_from_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if (has_legacy_gameserver_relay_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_gameserver_relay_session_id());
    }

    // optional fixed32 to_relay_session_id = 9;
    if (has_to_relay_session_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_relay_session_id = 10;
    if (has_from_relay_session_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 from_steam_id = 3;
    if (has_from_steam_id()) {
      total_size += 1 + 8;
    }

    // optional bool end_to_end = 4;
    if (has_end_to_end()) {
      total_size += 1 + 1;
    }

    // optional fixed32 dummy_pad = 1023;
    if (has_dummy_pad()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramNoConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramNoConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramNoConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoConnection::MergeFrom(const CMsgSteamDatagramNoConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_connection_id()) {
      set_to_connection_id(from.to_connection_id());
    }
    if (from.has_from_connection_id()) {
      set_from_connection_id(from.from_connection_id());
    }
    if (from.has_legacy_gameserver_relay_session_id()) {
      set_legacy_gameserver_relay_session_id(from.legacy_gameserver_relay_session_id());
    }
    if (from.has_to_relay_session_id()) {
      set_to_relay_session_id(from.to_relay_session_id());
    }
    if (from.has_from_relay_session_id()) {
      set_from_relay_session_id(from.from_relay_session_id());
    }
    if (from.has_from_steam_id()) {
      set_from_steam_id(from.from_steam_id());
    }
    if (from.has_end_to_end()) {
      set_end_to_end(from.end_to_end());
    }
    if (from.has_dummy_pad()) {
      set_dummy_pad(from.dummy_pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramNoConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoConnection::CopyFrom(const CMsgSteamDatagramNoConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoConnection::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramNoConnection::Swap(CMsgSteamDatagramNoConnection* other) {
  if (other != this) {
    std::swap(to_connection_id_, other->to_connection_id_);
    std::swap(from_connection_id_, other->from_connection_id_);
    std::swap(legacy_gameserver_relay_session_id_, other->legacy_gameserver_relay_session_id_);
    std::swap(to_relay_session_id_, other->to_relay_session_id_);
    std::swap(from_relay_session_id_, other->from_relay_session_id_);
    std::swap(from_steam_id_, other->from_steam_id_);
    std::swap(end_to_end_, other->end_to_end_);
    std::swap(dummy_pad_, other->dummy_pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramNoConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramNoConnection_descriptor_;
  metadata.reflection = CMsgSteamDatagramNoConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramGameserverSessionRequest::kTicketFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kChallengeTimeFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kChallengeFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kServerConnectionIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kNetworkConfigVersionFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameserverSessionRequest::InitAsDefaultInstance() {
}

CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(const CMsgSteamDatagramGameserverSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  challenge_time_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  client_connection_id_ = 0u;
  server_connection_id_ = 0u;
  network_config_version_ = 0u;
  protocol_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameserverSessionRequest::~CMsgSteamDatagramGameserverSessionRequest() {
  SharedDtor();
}

void CMsgSteamDatagramGameserverSessionRequest::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramGameserverSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameserverSessionRequest_descriptor_;
}

const CMsgSteamDatagramGameserverSessionRequest& CMsgSteamDatagramGameserverSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameserverSessionRequest* CMsgSteamDatagramGameserverSessionRequest::default_instance_ = NULL;

CMsgSteamDatagramGameserverSessionRequest* CMsgSteamDatagramGameserverSessionRequest::New() const {
  return new CMsgSteamDatagramGameserverSessionRequest;
}

void CMsgSteamDatagramGameserverSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
    challenge_time_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    client_connection_id_ = 0u;
    server_connection_id_ = 0u;
    network_config_version_ = 0u;
    protocol_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameserverSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ticket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_challenge_time;
        break;
      }

      // optional fixed32 challenge_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &challenge_time_)));
          set_has_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_client_connection_id;
        break;
      }

      // optional fixed32 client_connection_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_network_config_version;
        break;
      }

      // optional uint32 network_config_version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_config_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_config_version_)));
          set_has_network_config_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_server_connection_id;
        break;
      }

      // optional fixed32 server_connection_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
          set_has_server_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameserverSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes ticket = 1;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ticket(), output);
  }

  // optional fixed32 challenge_time = 3;
  if (has_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->challenge_time(), output);
  }

  // optional fixed64 challenge = 4;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->challenge(), output);
  }

  // optional fixed32 client_connection_id = 5;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->client_connection_id(), output);
  }

  // optional uint32 network_config_version = 6;
  if (has_network_config_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network_config_version(), output);
  }

  // optional uint32 protocol_version = 7;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->protocol_version(), output);
  }

  // optional fixed32 server_connection_id = 8;
  if (has_server_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->server_connection_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes ticket = 1;
  if (has_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ticket(), target);
  }

  // optional fixed32 challenge_time = 3;
  if (has_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->challenge_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->challenge(), target);
  }

  // optional fixed32 client_connection_id = 5;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->client_connection_id(), target);
  }

  // optional uint32 network_config_version = 6;
  if (has_network_config_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network_config_version(), target);
  }

  // optional uint32 protocol_version = 7;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->protocol_version(), target);
  }

  // optional fixed32 server_connection_id = 8;
  if (has_server_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->server_connection_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameserverSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional fixed32 challenge_time = 3;
    if (has_challenge_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 4;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_connection_id = 5;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_connection_id = 8;
    if (has_server_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 network_config_version = 6;
    if (has_network_config_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_config_version());
    }

    // optional uint32 protocol_version = 7;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameserverSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_challenge_time()) {
      set_challenge_time(from.challenge_time());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_server_connection_id()) {
      set_server_connection_id(from.server_connection_id());
    }
    if (from.has_network_config_version()) {
      set_network_config_version(from.network_config_version());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionRequest::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameserverSessionRequest::Swap(CMsgSteamDatagramGameserverSessionRequest* other) {
  if (other != this) {
    std::swap(ticket_, other->ticket_);
    std::swap(challenge_time_, other->challenge_time_);
    std::swap(challenge_, other->challenge_);
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(server_connection_id_, other->server_connection_id_);
    std::swap(network_config_version_, other->network_config_version_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameserverSessionRequest_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameserverSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramGameserverSessionEstablished::kConnectionIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kSeqNumR2CFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramGameserverSessionEstablished::InitAsDefaultInstance() {
}

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(const CMsgSteamDatagramGameserverSessionEstablished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  seconds_until_shutdown_ = 0u;
  seq_num_r2c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramGameserverSessionEstablished::~CMsgSteamDatagramGameserverSessionEstablished() {
  SharedDtor();
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionEstablished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramGameserverSessionEstablished_descriptor_;
}

const CMsgSteamDatagramGameserverSessionEstablished& CMsgSteamDatagramGameserverSessionEstablished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramGameserverSessionEstablished* CMsgSteamDatagramGameserverSessionEstablished::default_instance_ = NULL;

CMsgSteamDatagramGameserverSessionEstablished* CMsgSteamDatagramGameserverSessionEstablished::New() const {
  return new CMsgSteamDatagramGameserverSessionEstablished;
}

void CMsgSteamDatagramGameserverSessionEstablished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
    gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
    seconds_until_shutdown_ = 0u;
    seq_num_r2c_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramGameserverSessionEstablished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_gameserver_steam_id;
        break;
      }

      // optional fixed64 gameserver_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameserver_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
          set_has_gameserver_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seq_num_r2c;
        break;
      }

      // optional uint32 seq_num_r2c = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_r2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
          set_has_seq_num_r2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramGameserverSessionEstablished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (has_gameserver_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->gameserver_steam_id(), output);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_until_shutdown(), output);
  }

  // optional uint32 seq_num_r2c = 6;
  if (has_seq_num_r2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq_num_r2c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverSessionEstablished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (has_gameserver_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->gameserver_steam_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_until_shutdown(), target);
  }

  // optional uint32 seq_num_r2c = 6;
  if (has_seq_num_r2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq_num_r2c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramGameserverSessionEstablished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 gameserver_steam_id = 3;
    if (has_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 4;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional uint32 seq_num_r2c = 6;
    if (has_seq_num_r2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionEstablished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramGameserverSessionEstablished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_gameserver_steam_id()) {
      set_gameserver_steam_id(from.gameserver_steam_id());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_seq_num_r2c()) {
      set_seq_num_r2c(from.seq_num_r2c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionEstablished::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramGameserverSessionEstablished::Swap(CMsgSteamDatagramGameserverSessionEstablished* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(gameserver_steam_id_, other->gameserver_steam_id_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(seq_num_r2c_, other->seq_num_r2c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionEstablished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramGameserverSessionEstablished_descriptor_;
  metadata.reflection = CMsgSteamDatagramGameserverSessionEstablished_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor_;
}
bool CMsgSteamDatagramConnectionStatsClientToRouter_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::Flags_MIN;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsClientToRouter::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsClientToRouter::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kSeqNumC2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kSeqNumC2SFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsClientToRouter::InitAsDefaultInstance() {
  quality_relay_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  quality_e2e_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(const CMsgSteamDatagramConnectionStatsClientToRouter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedCtor() {
  _cached_size_ = 0;
  quality_relay_ = NULL;
  quality_e2e_ = NULL;
  flags_ = 0u;
  client_connection_id_ = 0u;
  seq_num_c2r_ = 0u;
  seq_num_c2s_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsClientToRouter::~CMsgSteamDatagramConnectionStatsClientToRouter() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedDtor() {
  if (this != default_instance_) {
    delete quality_relay_;
    delete quality_e2e_;
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsClientToRouter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_;
}

const CMsgSteamDatagramConnectionStatsClientToRouter& CMsgSteamDatagramConnectionStatsClientToRouter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsClientToRouter* CMsgSteamDatagramConnectionStatsClientToRouter::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsClientToRouter* CMsgSteamDatagramConnectionStatsClientToRouter::New() const {
  return new CMsgSteamDatagramConnectionStatsClientToRouter;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quality_relay()) {
      if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_quality_e2e()) {
      if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    flags_ = 0u;
    client_connection_id_ = 0u;
    seq_num_c2r_ = 0u;
    seq_num_c2s_ = 0u;
  }
  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsClientToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_relay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quality_e2e;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_e2e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_e2e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ack_relay;
        break;
      }

      // repeated fixed32 ack_relay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ack_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37, input, this->mutable_ack_relay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ack_relay;
        if (input->ExpectTag(45)) goto parse_legacy_ack_e2e;
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_legacy_ack_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45, input, this->mutable_legacy_ack_e2e())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_legacy_ack_e2e;
        if (input->ExpectTag(48)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_client_connection_id;
        break;
      }

      // optional fixed32 client_connection_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seq_num_c2r;
        break;
      }

      // optional uint32 seq_num_c2r = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_c2r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2r_)));
          set_has_seq_num_c2r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_seq_num_c2s;
        break;
      }

      // optional uint32 seq_num_c2s = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_c2s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2s_)));
          set_has_seq_num_c2s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quality_relay(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quality_e2e(), output);
  }

  // repeated fixed32 ack_relay = 4;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      5, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 6;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flags(), output);
  }

  // optional fixed32 client_connection_id = 8;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->client_connection_id(), output);
  }

  // optional uint32 seq_num_c2r = 9;
  if (has_seq_num_c2r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num_c2r(), output);
  }

  // optional uint32 seq_num_c2s = 10;
  if (has_seq_num_c2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->seq_num_c2s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsClientToRouter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quality_relay(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quality_e2e(), target);
  }

  // repeated fixed32 ack_relay = 4;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(4, this->ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(5, this->legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 6;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flags(), target);
  }

  // optional fixed32 client_connection_id = 8;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->client_connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 9;
  if (has_seq_num_c2r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num_c2r(), target);
  }

  // optional uint32 seq_num_c2s = 10;
  if (has_seq_num_c2s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->seq_num_c2s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsClientToRouter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (has_quality_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_relay());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (has_quality_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_e2e());
    }

    // optional uint32 flags = 6;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 client_connection_id = 8;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_c2r = 9;
    if (has_seq_num_c2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2r());
    }

    // optional uint32 seq_num_c2s = 10;
    if (has_seq_num_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2s());
    }

  }
  // repeated fixed32 ack_relay = 4;
  {
    int data_size = 0;
    data_size = 4 * this->ack_relay_size();
    total_size += 1 * this->ack_relay_size() + data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  {
    int data_size = 0;
    data_size = 4 * this->legacy_ack_e2e_size();
    total_size += 1 * this->legacy_ack_e2e_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsClientToRouter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsClientToRouter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
  GOOGLE_CHECK_NE(&from, this);
  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality_relay()) {
      mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (from.has_quality_e2e()) {
      mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_seq_num_c2r()) {
      set_seq_num_c2r(from.seq_num_c2r());
    }
    if (from.has_seq_num_c2s()) {
      set_seq_num_c2s(from.seq_num_c2s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsClientToRouter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::Swap(CMsgSteamDatagramConnectionStatsClientToRouter* other) {
  if (other != this) {
    std::swap(quality_relay_, other->quality_relay_);
    std::swap(quality_e2e_, other->quality_e2e_);
    ack_relay_.Swap(&other->ack_relay_);
    legacy_ack_e2e_.Swap(&other->legacy_ack_e2e_);
    std::swap(flags_, other->flags_);
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(seq_num_c2r_, other->seq_num_c2r_);
    std::swap(seq_num_c2s_, other->seq_num_c2s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsClientToRouter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsClientToRouter_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsClientToRouter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor_;
}
bool CMsgSteamDatagramConnectionStatsRouterToClient_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::Flags_MIN;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsRouterToClient::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsRouterToClient::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kMigrateRequestIpFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kMigrateRequestPortFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSeqNumR2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSeqNumS2CFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsRouterToClient::InitAsDefaultInstance() {
  quality_relay_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  quality_e2e_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(const CMsgSteamDatagramConnectionStatsRouterToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedCtor() {
  _cached_size_ = 0;
  quality_relay_ = NULL;
  quality_e2e_ = NULL;
  seconds_until_shutdown_ = 0u;
  migrate_request_ip_ = 0u;
  migrate_request_port_ = 0u;
  scoring_penalty_relay_cluster_ = 0u;
  flags_ = 0u;
  client_connection_id_ = 0u;
  seq_num_r2c_ = 0u;
  seq_num_s2c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsRouterToClient::~CMsgSteamDatagramConnectionStatsRouterToClient() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedDtor() {
  if (this != default_instance_) {
    delete quality_relay_;
    delete quality_e2e_;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_;
}

const CMsgSteamDatagramConnectionStatsRouterToClient& CMsgSteamDatagramConnectionStatsRouterToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsRouterToClient* CMsgSteamDatagramConnectionStatsRouterToClient::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsRouterToClient* CMsgSteamDatagramConnectionStatsRouterToClient::New() const {
  return new CMsgSteamDatagramConnectionStatsRouterToClient;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quality_relay()) {
      if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_quality_e2e()) {
      if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    seconds_until_shutdown_ = 0u;
    migrate_request_ip_ = 0u;
    migrate_request_port_ = 0u;
    scoring_penalty_relay_cluster_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flags_ = 0u;
    client_connection_id_ = 0u;
    seq_num_r2c_ = 0u;
    seq_num_s2c_ = 0u;
  }
  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsRouterToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_relay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quality_e2e;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_e2e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_e2e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_client_connection_id;
        break;
      }

      // optional fixed32 client_connection_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seq_num_r2c;
        break;
      }

      // optional uint32 seq_num_r2c = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_r2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
          set_has_seq_num_r2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seq_num_s2c;
        break;
      }

      // optional uint32 seq_num_s2c = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_s2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2c_)));
          set_has_seq_num_s2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_migrate_request_ip;
        break;
      }

      // optional fixed32 migrate_request_ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_migrate_request_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &migrate_request_ip_)));
          set_has_migrate_request_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_migrate_request_port;
        break;
      }

      // optional uint32 migrate_request_port = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_migrate_request_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &migrate_request_port_)));
          set_has_migrate_request_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_scoring_penalty_relay_cluster;
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoring_penalty_relay_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
          set_has_scoring_penalty_relay_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_ack_relay;
        break;
      }

      // repeated fixed32 ack_relay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ack_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 109, input, this->mutable_ack_relay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_ack_relay;
        if (input->ExpectTag(117)) goto parse_legacy_ack_e2e;
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_legacy_ack_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 117, input, this->mutable_legacy_ack_e2e())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_legacy_ack_e2e;
        if (input->ExpectTag(120)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quality_relay(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quality_e2e(), output);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_connection_id = 7;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->client_connection_id(), output);
  }

  // optional uint32 seq_num_r2c = 8;
  if (has_seq_num_r2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->seq_num_r2c(), output);
  }

  // optional uint32 seq_num_s2c = 9;
  if (has_seq_num_s2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num_s2c(), output);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (has_migrate_request_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->migrate_request_ip(), output);
  }

  // optional uint32 migrate_request_port = 11;
  if (has_migrate_request_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->migrate_request_port(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (has_scoring_penalty_relay_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->scoring_penalty_relay_cluster(), output);
  }

  // repeated fixed32 ack_relay = 13;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      13, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      14, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 15;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsRouterToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quality_relay(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quality_e2e(), target);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->client_connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 8;
  if (has_seq_num_r2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->seq_num_r2c(), target);
  }

  // optional uint32 seq_num_s2c = 9;
  if (has_seq_num_s2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num_s2c(), target);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (has_migrate_request_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 11;
  if (has_migrate_request_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (has_scoring_penalty_relay_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 13;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(13, this->ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(14, this->legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 15;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsRouterToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (has_quality_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_relay());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (has_quality_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_e2e());
    }

    // optional uint32 seconds_until_shutdown = 6;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 migrate_request_ip = 10;
    if (has_migrate_request_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 migrate_request_port = 11;
    if (has_migrate_request_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->migrate_request_port());
    }

    // optional uint32 scoring_penalty_relay_cluster = 12;
    if (has_scoring_penalty_relay_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 flags = 15;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 client_connection_id = 7;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2c = 8;
    if (has_seq_num_r2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

    // optional uint32 seq_num_s2c = 9;
    if (has_seq_num_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2c());
    }

  }
  // repeated fixed32 ack_relay = 13;
  {
    int data_size = 0;
    data_size = 4 * this->ack_relay_size();
    total_size += 1 * this->ack_relay_size() + data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  {
    int data_size = 0;
    data_size = 4 * this->legacy_ack_e2e_size();
    total_size += 1 * this->legacy_ack_e2e_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsRouterToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality_relay()) {
      mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (from.has_quality_e2e()) {
      mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_migrate_request_ip()) {
      set_migrate_request_ip(from.migrate_request_ip());
    }
    if (from.has_migrate_request_port()) {
      set_migrate_request_port(from.migrate_request_port());
    }
    if (from.has_scoring_penalty_relay_cluster()) {
      set_scoring_penalty_relay_cluster(from.scoring_penalty_relay_cluster());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_seq_num_r2c()) {
      set_seq_num_r2c(from.seq_num_r2c());
    }
    if (from.has_seq_num_s2c()) {
      set_seq_num_s2c(from.seq_num_s2c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToClient::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::Swap(CMsgSteamDatagramConnectionStatsRouterToClient* other) {
  if (other != this) {
    std::swap(quality_relay_, other->quality_relay_);
    std::swap(quality_e2e_, other->quality_e2e_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(migrate_request_ip_, other->migrate_request_ip_);
    std::swap(migrate_request_port_, other->migrate_request_port_);
    std::swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
    ack_relay_.Swap(&other->ack_relay_);
    legacy_ack_e2e_.Swap(&other->legacy_ack_e2e_);
    std::swap(flags_, other->flags_);
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(seq_num_r2c_, other->seq_num_r2c_);
    std::swap(seq_num_s2c_, other->seq_num_s2c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsRouterToClient_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsRouterToClient_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor_;
}
bool CMsgSteamDatagramConnectionStatsRouterToServer_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::Flags_MIN;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsRouterToServer::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsRouterToServer::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kSeqNumR2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kSeqNumC2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kServerConnectionIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsRouterToServer::InitAsDefaultInstance() {
  quality_relay_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  quality_e2e_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(const CMsgSteamDatagramConnectionStatsRouterToServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedCtor() {
  _cached_size_ = 0;
  quality_relay_ = NULL;
  quality_e2e_ = NULL;
  flags_ = 0u;
  seq_num_r2s_ = 0u;
  seq_num_c2s_ = 0u;
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  relay_session_id_ = 0u;
  client_connection_id_ = 0u;
  server_connection_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsRouterToServer::~CMsgSteamDatagramConnectionStatsRouterToServer() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedDtor() {
  if (this != default_instance_) {
    delete quality_relay_;
    delete quality_e2e_;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_;
}

const CMsgSteamDatagramConnectionStatsRouterToServer& CMsgSteamDatagramConnectionStatsRouterToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsRouterToServer* CMsgSteamDatagramConnectionStatsRouterToServer::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsRouterToServer* CMsgSteamDatagramConnectionStatsRouterToServer::New() const {
  return new CMsgSteamDatagramConnectionStatsRouterToServer;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quality_relay()) {
      if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_quality_e2e()) {
      if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    flags_ = 0u;
    seq_num_r2s_ = 0u;
    seq_num_c2s_ = 0u;
    client_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    relay_session_id_ = 0u;
    client_connection_id_ = 0u;
    server_connection_id_ = 0u;
  }
  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsRouterToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_relay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quality_e2e;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_e2e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_e2e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seq_num_r2s;
        break;
      }

      // optional uint32 seq_num_r2s = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_r2s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2s_)));
          set_has_seq_num_r2s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seq_num_c2s;
        break;
      }

      // optional uint32 seq_num_c2s = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_c2s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2s_)));
          set_has_seq_num_c2s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_client_steam_id;
        break;
      }

      // optional fixed64 client_steam_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          set_has_client_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_relay_session_id;
        break;
      }

      // optional uint32 relay_session_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relay_session_id_)));
          set_has_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_client_connection_id;
        break;
      }

      // optional fixed32 client_connection_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_ack_relay;
        break;
      }

      // repeated fixed32 ack_relay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ack_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 85, input, this->mutable_ack_relay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_ack_relay;
        if (input->ExpectTag(93)) goto parse_legacy_ack_e2e;
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_legacy_ack_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 93, input, this->mutable_legacy_ack_e2e())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_legacy_ack_e2e;
        if (input->ExpectTag(96)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_server_connection_id;
        break;
      }

      // optional fixed32 server_connection_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
          set_has_server_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quality_relay(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quality_e2e(), output);
  }

  // optional uint32 seq_num_r2s = 5;
  if (has_seq_num_r2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq_num_r2s(), output);
  }

  // optional uint32 seq_num_c2s = 6;
  if (has_seq_num_c2s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq_num_c2s(), output);
  }

  // optional fixed64 client_steam_id = 7;
  if (has_client_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->client_steam_id(), output);
  }

  // optional uint32 relay_session_id = 8;
  if (has_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->relay_session_id(), output);
  }

  // optional fixed32 client_connection_id = 9;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->client_connection_id(), output);
  }

  // repeated fixed32 ack_relay = 10;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      10, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      11, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 12;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->flags(), output);
  }

  // optional fixed32 server_connection_id = 13;
  if (has_server_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->server_connection_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsRouterToServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quality_relay(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quality_e2e(), target);
  }

  // optional uint32 seq_num_r2s = 5;
  if (has_seq_num_r2s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq_num_r2s(), target);
  }

  // optional uint32 seq_num_c2s = 6;
  if (has_seq_num_c2s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq_num_c2s(), target);
  }

  // optional fixed64 client_steam_id = 7;
  if (has_client_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->client_steam_id(), target);
  }

  // optional uint32 relay_session_id = 8;
  if (has_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 9;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 10;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(10, this->ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(11, this->legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 12;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->flags(), target);
  }

  // optional fixed32 server_connection_id = 13;
  if (has_server_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->server_connection_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsRouterToServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (has_quality_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_relay());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (has_quality_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_e2e());
    }

    // optional uint32 flags = 12;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 seq_num_r2s = 5;
    if (has_seq_num_r2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2s());
    }

    // optional uint32 seq_num_c2s = 6;
    if (has_seq_num_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2s());
    }

    // optional fixed64 client_steam_id = 7;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 relay_session_id = 8;
    if (has_relay_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relay_session_id());
    }

    // optional fixed32 client_connection_id = 9;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_connection_id = 13;
    if (has_server_connection_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated fixed32 ack_relay = 10;
  {
    int data_size = 0;
    data_size = 4 * this->ack_relay_size();
    total_size += 1 * this->ack_relay_size() + data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  {
    int data_size = 0;
    data_size = 4 * this->legacy_ack_e2e_size();
    total_size += 1 * this->legacy_ack_e2e_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsRouterToServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality_relay()) {
      mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (from.has_quality_e2e()) {
      mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_seq_num_r2s()) {
      set_seq_num_r2s(from.seq_num_r2s());
    }
    if (from.has_seq_num_c2s()) {
      set_seq_num_c2s(from.seq_num_c2s());
    }
    if (from.has_client_steam_id()) {
      set_client_steam_id(from.client_steam_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_relay_session_id()) {
      set_relay_session_id(from.relay_session_id());
    }
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_server_connection_id()) {
      set_server_connection_id(from.server_connection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToServer::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::Swap(CMsgSteamDatagramConnectionStatsRouterToServer* other) {
  if (other != this) {
    std::swap(quality_relay_, other->quality_relay_);
    std::swap(quality_e2e_, other->quality_e2e_);
    ack_relay_.Swap(&other->ack_relay_);
    legacy_ack_e2e_.Swap(&other->legacy_ack_e2e_);
    std::swap(flags_, other->flags_);
    std::swap(seq_num_r2s_, other->seq_num_r2s_);
    std::swap(seq_num_c2s_, other->seq_num_c2s_);
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(relay_session_id_, other->relay_session_id_);
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(server_connection_id_, other->server_connection_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsRouterToServer_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsRouterToServer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor_;
}
bool CMsgSteamDatagramConnectionStatsServerToRouter_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::Flags_MIN;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsServerToRouter::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsServerToRouter::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kSeqNumS2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kSeqNumS2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kServerConnectionIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsServerToRouter::InitAsDefaultInstance() {
  quality_relay_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  quality_e2e_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(const CMsgSteamDatagramConnectionStatsServerToRouter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedCtor() {
  _cached_size_ = 0;
  quality_relay_ = NULL;
  quality_e2e_ = NULL;
  flags_ = 0u;
  seq_num_s2r_ = 0u;
  seq_num_s2c_ = 0u;
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  relay_session_id_ = 0u;
  client_connection_id_ = 0u;
  server_connection_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsServerToRouter::~CMsgSteamDatagramConnectionStatsServerToRouter() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedDtor() {
  if (this != default_instance_) {
    delete quality_relay_;
    delete quality_e2e_;
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsServerToRouter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_;
}

const CMsgSteamDatagramConnectionStatsServerToRouter& CMsgSteamDatagramConnectionStatsServerToRouter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsServerToRouter* CMsgSteamDatagramConnectionStatsServerToRouter::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsServerToRouter* CMsgSteamDatagramConnectionStatsServerToRouter::New() const {
  return new CMsgSteamDatagramConnectionStatsServerToRouter;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quality_relay()) {
      if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_quality_e2e()) {
      if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    flags_ = 0u;
    seq_num_s2r_ = 0u;
    seq_num_s2c_ = 0u;
    client_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    relay_session_id_ = 0u;
    client_connection_id_ = 0u;
    server_connection_id_ = 0u;
  }
  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsServerToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_relay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quality_e2e;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_e2e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_e2e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq_num_s2r;
        break;
      }

      // optional uint32 seq_num_s2r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_s2r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2r_)));
          set_has_seq_num_s2r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq_num_s2c;
        break;
      }

      // optional uint32 seq_num_s2c = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_s2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2c_)));
          set_has_seq_num_s2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_client_steam_id;
        break;
      }

      // optional fixed64 client_steam_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          set_has_client_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_relay_session_id;
        break;
      }

      // optional uint32 relay_session_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relay_session_id_)));
          set_has_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_client_connection_id;
        break;
      }

      // optional fixed32 client_connection_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ack_relay;
        break;
      }

      // repeated fixed32 ack_relay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ack_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 69, input, this->mutable_ack_relay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ack_relay;
        if (input->ExpectTag(77)) goto parse_legacy_ack_e2e;
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_legacy_ack_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 77, input, this->mutable_legacy_ack_e2e())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_legacy_ack_e2e;
        if (input->ExpectTag(80)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_server_connection_id;
        break;
      }

      // optional fixed32 server_connection_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_server_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_connection_id_)));
          set_has_server_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quality_relay(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quality_e2e(), output);
  }

  // optional uint32 seq_num_s2r = 3;
  if (has_seq_num_s2r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq_num_s2r(), output);
  }

  // optional uint32 seq_num_s2c = 4;
  if (has_seq_num_s2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq_num_s2c(), output);
  }

  // optional fixed64 client_steam_id = 5;
  if (has_client_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->client_steam_id(), output);
  }

  // optional uint32 relay_session_id = 6;
  if (has_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->relay_session_id(), output);
  }

  // optional fixed32 client_connection_id = 7;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->client_connection_id(), output);
  }

  // repeated fixed32 ack_relay = 8;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      8, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      9, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 10;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->flags(), output);
  }

  // optional fixed32 server_connection_id = 11;
  if (has_server_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->server_connection_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsServerToRouter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quality_relay(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quality_e2e(), target);
  }

  // optional uint32 seq_num_s2r = 3;
  if (has_seq_num_s2r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq_num_s2r(), target);
  }

  // optional uint32 seq_num_s2c = 4;
  if (has_seq_num_s2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_num_s2c(), target);
  }

  // optional fixed64 client_steam_id = 5;
  if (has_client_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->client_steam_id(), target);
  }

  // optional uint32 relay_session_id = 6;
  if (has_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 8;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(8, this->ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(9, this->legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 10;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->flags(), target);
  }

  // optional fixed32 server_connection_id = 11;
  if (has_server_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->server_connection_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsServerToRouter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (has_quality_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_relay());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (has_quality_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_e2e());
    }

    // optional uint32 flags = 10;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 seq_num_s2r = 3;
    if (has_seq_num_s2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2r());
    }

    // optional uint32 seq_num_s2c = 4;
    if (has_seq_num_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2c());
    }

    // optional fixed64 client_steam_id = 5;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 relay_session_id = 6;
    if (has_relay_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relay_session_id());
    }

    // optional fixed32 client_connection_id = 7;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_connection_id = 11;
    if (has_server_connection_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated fixed32 ack_relay = 8;
  {
    int data_size = 0;
    data_size = 4 * this->ack_relay_size();
    total_size += 1 * this->ack_relay_size() + data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  {
    int data_size = 0;
    data_size = 4 * this->legacy_ack_e2e_size();
    total_size += 1 * this->legacy_ack_e2e_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsServerToRouter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsServerToRouter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
  GOOGLE_CHECK_NE(&from, this);
  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality_relay()) {
      mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (from.has_quality_e2e()) {
      mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_seq_num_s2r()) {
      set_seq_num_s2r(from.seq_num_s2r());
    }
    if (from.has_seq_num_s2c()) {
      set_seq_num_s2c(from.seq_num_s2c());
    }
    if (from.has_client_steam_id()) {
      set_client_steam_id(from.client_steam_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_relay_session_id()) {
      set_relay_session_id(from.relay_session_id());
    }
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_server_connection_id()) {
      set_server_connection_id(from.server_connection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsServerToRouter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::Swap(CMsgSteamDatagramConnectionStatsServerToRouter* other) {
  if (other != this) {
    std::swap(quality_relay_, other->quality_relay_);
    std::swap(quality_e2e_, other->quality_e2e_);
    ack_relay_.Swap(&other->ack_relay_);
    legacy_ack_e2e_.Swap(&other->legacy_ack_e2e_);
    std::swap(flags_, other->flags_);
    std::swap(seq_num_s2r_, other->seq_num_s2r_);
    std::swap(seq_num_s2c_, other->seq_num_s2c_);
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(relay_session_id_, other->relay_session_id_);
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(server_connection_id_, other->server_connection_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsServerToRouter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsServerToRouter_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsServerToRouter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PSessionRequestBody::kChallengeTimeFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kChallengeFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kClientConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kPeerSteamIdFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kPeerConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kProtocolVersionFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kNetworkConfigVersionFieldNumber;
const int CMsgSteamDatagramP2PSessionRequestBody::kPublicIpFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PSessionRequestBody::InitAsDefaultInstance() {
}

CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(const CMsgSteamDatagramP2PSessionRequestBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionRequestBody::SharedCtor() {
  _cached_size_ = 0;
  challenge_time_ = 0u;
  challenge_ = GOOGLE_ULONGLONG(0);
  client_connection_id_ = 0u;
  peer_steam_id_ = GOOGLE_ULONGLONG(0);
  peer_connection_id_ = 0u;
  protocol_version_ = 0u;
  network_config_version_ = 0u;
  public_ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PSessionRequestBody::~CMsgSteamDatagramP2PSessionRequestBody() {
  SharedDtor();
}

void CMsgSteamDatagramP2PSessionRequestBody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramP2PSessionRequestBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PSessionRequestBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PSessionRequestBody_descriptor_;
}

const CMsgSteamDatagramP2PSessionRequestBody& CMsgSteamDatagramP2PSessionRequestBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PSessionRequestBody* CMsgSteamDatagramP2PSessionRequestBody::default_instance_ = NULL;

CMsgSteamDatagramP2PSessionRequestBody* CMsgSteamDatagramP2PSessionRequestBody::New() const {
  return new CMsgSteamDatagramP2PSessionRequestBody;
}

void CMsgSteamDatagramP2PSessionRequestBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challenge_time_ = 0u;
    challenge_ = GOOGLE_ULONGLONG(0);
    client_connection_id_ = 0u;
    peer_steam_id_ = GOOGLE_ULONGLONG(0);
    peer_connection_id_ = 0u;
    protocol_version_ = 0u;
    network_config_version_ = 0u;
    public_ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PSessionRequestBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 challenge_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &challenge_time_)));
          set_has_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_challenge;
        break;
      }

      // optional fixed64 challenge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_client_connection_id;
        break;
      }

      // optional fixed32 client_connection_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_client_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_connection_id_)));
          set_has_client_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_peer_steam_id;
        break;
      }

      // optional fixed64 peer_steam_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_peer_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &peer_steam_id_)));
          set_has_peer_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_peer_connection_id;
        break;
      }

      // optional fixed32 peer_connection_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_peer_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &peer_connection_id_)));
          set_has_peer_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_network_config_version;
        break;
      }

      // optional uint32 network_config_version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_config_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_config_version_)));
          set_has_network_config_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_public_ip;
        break;
      }

      // optional fixed32 public_ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &public_ip_)));
          set_has_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PSessionRequestBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 challenge_time = 1;
  if (has_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->challenge_time(), output);
  }

  // optional fixed64 challenge = 2;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->challenge(), output);
  }

  // optional fixed32 client_connection_id = 3;
  if (has_client_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_connection_id(), output);
  }

  // optional fixed64 peer_steam_id = 4;
  if (has_peer_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->peer_steam_id(), output);
  }

  // optional fixed32 peer_connection_id = 5;
  if (has_peer_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->peer_connection_id(), output);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_version(), output);
  }

  // optional uint32 network_config_version = 9;
  if (has_network_config_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->network_config_version(), output);
  }

  // optional fixed32 public_ip = 10;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->public_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PSessionRequestBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 challenge_time = 1;
  if (has_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->challenge_time(), target);
  }

  // optional fixed64 challenge = 2;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->challenge(), target);
  }

  // optional fixed32 client_connection_id = 3;
  if (has_client_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_connection_id(), target);
  }

  // optional fixed64 peer_steam_id = 4;
  if (has_peer_steam_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->peer_steam_id(), target);
  }

  // optional fixed32 peer_connection_id = 5;
  if (has_peer_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->peer_connection_id(), target);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protocol_version(), target);
  }

  // optional uint32 network_config_version = 9;
  if (has_network_config_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->network_config_version(), target);
  }

  // optional fixed32 public_ip = 10;
  if (has_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->public_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PSessionRequestBody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 challenge_time = 1;
    if (has_challenge_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 2;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed32 client_connection_id = 3;
    if (has_client_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 peer_steam_id = 4;
    if (has_peer_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 peer_connection_id = 5;
    if (has_peer_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 protocol_version = 8;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint32 network_config_version = 9;
    if (has_network_config_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_config_version());
    }

    // optional fixed32 public_ip = 10;
    if (has_public_ip()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PSessionRequestBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionRequestBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PSessionRequestBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionRequestBody::MergeFrom(const CMsgSteamDatagramP2PSessionRequestBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge_time()) {
      set_challenge_time(from.challenge_time());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_client_connection_id()) {
      set_client_connection_id(from.client_connection_id());
    }
    if (from.has_peer_steam_id()) {
      set_peer_steam_id(from.peer_steam_id());
    }
    if (from.has_peer_connection_id()) {
      set_peer_connection_id(from.peer_connection_id());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_network_config_version()) {
      set_network_config_version(from.network_config_version());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PSessionRequestBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionRequestBody::CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionRequestBody::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PSessionRequestBody::Swap(CMsgSteamDatagramP2PSessionRequestBody* other) {
  if (other != this) {
    std::swap(challenge_time_, other->challenge_time_);
    std::swap(challenge_, other->challenge_);
    std::swap(client_connection_id_, other->client_connection_id_);
    std::swap(peer_steam_id_, other->peer_steam_id_);
    std::swap(peer_connection_id_, other->peer_connection_id_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(network_config_version_, other->network_config_version_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequestBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PSessionRequestBody_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PSessionRequestBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PSessionRequest::kCertFieldNumber;
const int CMsgSteamDatagramP2PSessionRequest::kBodyFieldNumber;
const int CMsgSteamDatagramP2PSessionRequest::kSignatureFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PSessionRequest::InitAsDefaultInstance() {
  cert_ = const_cast< ::CMsgSteamDatagramCertificateSigned*>(&::CMsgSteamDatagramCertificateSigned::default_instance());
}

CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(const CMsgSteamDatagramP2PSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  cert_ = NULL;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PSessionRequest::~CMsgSteamDatagramP2PSessionRequest() {
  SharedDtor();
}

void CMsgSteamDatagramP2PSessionRequest::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
    delete cert_;
  }
}

void CMsgSteamDatagramP2PSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PSessionRequest_descriptor_;
}

const CMsgSteamDatagramP2PSessionRequest& CMsgSteamDatagramP2PSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PSessionRequest* CMsgSteamDatagramP2PSessionRequest::default_instance_ = NULL;

CMsgSteamDatagramP2PSessionRequest* CMsgSteamDatagramP2PSessionRequest::New() const {
  return new CMsgSteamDatagramP2PSessionRequest;
}

void CMsgSteamDatagramP2PSessionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cert()) {
      if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramCertificateSigned cert = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signature;
        break;
      }

      // optional bytes signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (has_cert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cert(), output);
  }

  // optional bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->body(), output);
  }

  // optional bytes signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if (has_cert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cert(), target);
  }

  // optional bytes body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // optional bytes signature = 3;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if (has_cert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cert());
    }

    // optional bytes body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional bytes signature = 3;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionRequest::MergeFrom(const CMsgSteamDatagramP2PSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cert()) {
      mutable_cert()->::CMsgSteamDatagramCertificateSigned::MergeFrom(from.cert());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionRequest::CopyFrom(const CMsgSteamDatagramP2PSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionRequest::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PSessionRequest::Swap(CMsgSteamDatagramP2PSessionRequest* other) {
  if (other != this) {
    std::swap(cert_, other->cert_);
    std::swap(body_, other->body_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PSessionRequest_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PSessionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PSessionEstablished::kConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PSessionEstablished::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramP2PSessionEstablished::kRelayRoutingTokenFieldNumber;
const int CMsgSteamDatagramP2PSessionEstablished::kSeqNumR2CFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PSessionEstablished::InitAsDefaultInstance() {
}

CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(const CMsgSteamDatagramP2PSessionEstablished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionEstablished::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  seconds_until_shutdown_ = 0u;
  relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_num_r2c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PSessionEstablished::~CMsgSteamDatagramP2PSessionEstablished() {
  SharedDtor();
}

void CMsgSteamDatagramP2PSessionEstablished::SharedDtor() {
  if (relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete relay_routing_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramP2PSessionEstablished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PSessionEstablished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PSessionEstablished_descriptor_;
}

const CMsgSteamDatagramP2PSessionEstablished& CMsgSteamDatagramP2PSessionEstablished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PSessionEstablished* CMsgSteamDatagramP2PSessionEstablished::default_instance_ = NULL;

CMsgSteamDatagramP2PSessionEstablished* CMsgSteamDatagramP2PSessionEstablished::New() const {
  return new CMsgSteamDatagramP2PSessionEstablished;
}

void CMsgSteamDatagramP2PSessionEstablished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
    seconds_until_shutdown_ = 0u;
    if (has_relay_routing_token()) {
      if (relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
        relay_routing_token_->clear();
      }
    }
    seq_num_r2c_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PSessionEstablished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_relay_routing_token;
        break;
      }

      // optional bytes relay_routing_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relay_routing_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_relay_routing_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seq_num_r2c;
        break;
      }

      // optional uint32 seq_num_r2c = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_r2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
          set_has_seq_num_r2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PSessionEstablished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds_until_shutdown(), output);
  }

  // optional bytes relay_routing_token = 4;
  if (has_relay_routing_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->relay_routing_token(), output);
  }

  // optional uint32 seq_num_r2c = 5;
  if (has_seq_num_r2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq_num_r2c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PSessionEstablished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds_until_shutdown(), target);
  }

  // optional bytes relay_routing_token = 4;
  if (has_relay_routing_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->relay_routing_token(), target);
  }

  // optional uint32 seq_num_r2c = 5;
  if (has_seq_num_r2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq_num_r2c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PSessionEstablished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 3;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional bytes relay_routing_token = 4;
    if (has_relay_routing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->relay_routing_token());
    }

    // optional uint32 seq_num_r2c = 5;
    if (has_seq_num_r2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PSessionEstablished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PSessionEstablished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PSessionEstablished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PSessionEstablished::MergeFrom(const CMsgSteamDatagramP2PSessionEstablished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_relay_routing_token()) {
      set_relay_routing_token(from.relay_routing_token());
    }
    if (from.has_seq_num_r2c()) {
      set_seq_num_r2c(from.seq_num_r2c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PSessionEstablished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PSessionEstablished::CopyFrom(const CMsgSteamDatagramP2PSessionEstablished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PSessionEstablished::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PSessionEstablished::Swap(CMsgSteamDatagramP2PSessionEstablished* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(relay_routing_token_, other->relay_routing_token_);
    std::swap(seq_num_r2c_, other->seq_num_r2c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionEstablished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PSessionEstablished_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PSessionEstablished_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PRoutes_RelayCluster::kPopIdFieldNumber;
const int CMsgSteamDatagramP2PRoutes_RelayCluster::kPingMsFieldNumber;
const int CMsgSteamDatagramP2PRoutes_RelayCluster::kScorePenaltyFieldNumber;
const int CMsgSteamDatagramP2PRoutes_RelayCluster::kSessionRelayRoutingTokenFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::InitAsDefaultInstance() {
}

CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(const CMsgSteamDatagramP2PRoutes_RelayCluster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedCtor() {
  _cached_size_ = 0;
  pop_id_ = 0u;
  ping_ms_ = 0u;
  score_penalty_ = 0u;
  session_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PRoutes_RelayCluster::~CMsgSteamDatagramP2PRoutes_RelayCluster() {
  SharedDtor();
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedDtor() {
  if (session_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_relay_routing_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PRoutes_RelayCluster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PRoutes_RelayCluster_descriptor_;
}

const CMsgSteamDatagramP2PRoutes_RelayCluster& CMsgSteamDatagramP2PRoutes_RelayCluster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PRoutes_RelayCluster* CMsgSteamDatagramP2PRoutes_RelayCluster::default_instance_ = NULL;

CMsgSteamDatagramP2PRoutes_RelayCluster* CMsgSteamDatagramP2PRoutes_RelayCluster::New() const {
  return new CMsgSteamDatagramP2PRoutes_RelayCluster;
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pop_id_ = 0u;
    ping_ms_ = 0u;
    score_penalty_ = 0u;
    if (has_session_relay_routing_token()) {
      if (session_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
        session_relay_routing_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PRoutes_RelayCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 pop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pop_id_)));
          set_has_pop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ping_ms;
        break;
      }

      // optional uint32 ping_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
          set_has_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score_penalty;
        break;
      }

      // optional uint32 score_penalty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_penalty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_penalty_)));
          set_has_score_penalty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_session_relay_routing_token;
        break;
      }

      // optional bytes session_relay_routing_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_relay_routing_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_relay_routing_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 pop_id = 1;
  if (has_pop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->pop_id(), output);
  }

  // optional uint32 ping_ms = 2;
  if (has_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping_ms(), output);
  }

  // optional uint32 score_penalty = 3;
  if (has_score_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score_penalty(), output);
  }

  // optional bytes session_relay_routing_token = 4;
  if (has_session_relay_routing_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->session_relay_routing_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PRoutes_RelayCluster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 pop_id = 1;
  if (has_pop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->pop_id(), target);
  }

  // optional uint32 ping_ms = 2;
  if (has_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping_ms(), target);
  }

  // optional uint32 score_penalty = 3;
  if (has_score_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score_penalty(), target);
  }

  // optional bytes session_relay_routing_token = 4;
  if (has_session_relay_routing_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->session_relay_routing_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PRoutes_RelayCluster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 pop_id = 1;
    if (has_pop_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 ping_ms = 2;
    if (has_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

    // optional uint32 score_penalty = 3;
    if (has_score_penalty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_penalty());
    }

    // optional bytes session_relay_routing_token = 4;
    if (has_session_relay_routing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_relay_routing_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes_RelayCluster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PRoutes_RelayCluster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::MergeFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pop_id()) {
      set_pop_id(from.pop_id());
    }
    if (from.has_ping_ms()) {
      set_ping_ms(from.ping_ms());
    }
    if (from.has_score_penalty()) {
      set_score_penalty(from.score_penalty());
    }
    if (from.has_session_relay_routing_token()) {
      set_session_relay_routing_token(from.session_relay_routing_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::CopyFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes_RelayCluster::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::Swap(CMsgSteamDatagramP2PRoutes_RelayCluster* other) {
  if (other != this) {
    std::swap(pop_id_, other->pop_id_);
    std::swap(ping_ms_, other->ping_ms_);
    std::swap(score_penalty_, other->score_penalty_);
    std::swap(session_relay_routing_token_, other->session_relay_routing_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes_RelayCluster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PRoutes_RelayCluster_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PRoutes_RelayCluster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PRoutes_Route::kMyPopIdFieldNumber;
const int CMsgSteamDatagramP2PRoutes_Route::kYourPopIdFieldNumber;
const int CMsgSteamDatagramP2PRoutes_Route::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PRoutes_Route::InitAsDefaultInstance() {
}

CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(const CMsgSteamDatagramP2PRoutes_Route& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes_Route::SharedCtor() {
  _cached_size_ = 0;
  my_pop_id_ = 0u;
  your_pop_id_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PRoutes_Route::~CMsgSteamDatagramP2PRoutes_Route() {
  SharedDtor();
}

void CMsgSteamDatagramP2PRoutes_Route::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramP2PRoutes_Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PRoutes_Route::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PRoutes_Route_descriptor_;
}

const CMsgSteamDatagramP2PRoutes_Route& CMsgSteamDatagramP2PRoutes_Route::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PRoutes_Route* CMsgSteamDatagramP2PRoutes_Route::default_instance_ = NULL;

CMsgSteamDatagramP2PRoutes_Route* CMsgSteamDatagramP2PRoutes_Route::New() const {
  return new CMsgSteamDatagramP2PRoutes_Route;
}

void CMsgSteamDatagramP2PRoutes_Route::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    my_pop_id_ = 0u;
    your_pop_id_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PRoutes_Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 my_pop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &my_pop_id_)));
          set_has_my_pop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_your_pop_id;
        break;
      }

      // optional fixed32 your_pop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_your_pop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_pop_id_)));
          set_has_your_pop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PRoutes_Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 my_pop_id = 1;
  if (has_my_pop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->my_pop_id(), output);
  }

  // optional fixed32 your_pop_id = 2;
  if (has_your_pop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->your_pop_id(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PRoutes_Route::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 my_pop_id = 1;
  if (has_my_pop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->my_pop_id(), target);
  }

  // optional fixed32 your_pop_id = 2;
  if (has_your_pop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->your_pop_id(), target);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PRoutes_Route::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 my_pop_id = 1;
    if (has_my_pop_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_pop_id = 2;
    if (has_your_pop_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PRoutes_Route::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes_Route* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PRoutes_Route*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes_Route::MergeFrom(const CMsgSteamDatagramP2PRoutes_Route& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_pop_id()) {
      set_my_pop_id(from.my_pop_id());
    }
    if (from.has_your_pop_id()) {
      set_your_pop_id(from.your_pop_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PRoutes_Route::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes_Route::CopyFrom(const CMsgSteamDatagramP2PRoutes_Route& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes_Route::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PRoutes_Route::Swap(CMsgSteamDatagramP2PRoutes_Route* other) {
  if (other != this) {
    std::swap(my_pop_id_, other->my_pop_id_);
    std::swap(your_pop_id_, other->your_pop_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes_Route::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PRoutes_Route_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PRoutes_Route_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PRoutes::kRelayClustersFieldNumber;
const int CMsgSteamDatagramP2PRoutes::kRoutesFieldNumber;
const int CMsgSteamDatagramP2PRoutes::kRevisionFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PRoutes::InitAsDefaultInstance() {
}

CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(const CMsgSteamDatagramP2PRoutes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes::SharedCtor() {
  _cached_size_ = 0;
  revision_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PRoutes::~CMsgSteamDatagramP2PRoutes() {
  SharedDtor();
}

void CMsgSteamDatagramP2PRoutes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramP2PRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PRoutes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PRoutes_descriptor_;
}

const CMsgSteamDatagramP2PRoutes& CMsgSteamDatagramP2PRoutes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PRoutes* CMsgSteamDatagramP2PRoutes::default_instance_ = NULL;

CMsgSteamDatagramP2PRoutes* CMsgSteamDatagramP2PRoutes::New() const {
  return new CMsgSteamDatagramP2PRoutes;
}

void CMsgSteamDatagramP2PRoutes::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    revision_ = 0u;
  }
  relay_clusters_.Clear();
  routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relay_clusters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relay_clusters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_relay_clusters;
        if (input->ExpectTag(18)) goto parse_routes;
        break;
      }

      // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_routes;
        if (input->ExpectTag(24)) goto parse_revision;
        break;
      }

      // optional uint32 revision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  for (int i = 0; i < this->relay_clusters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relay_clusters(i), output);
  }

  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  for (int i = 0; i < this->routes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routes(i), output);
  }

  // optional uint32 revision = 3;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PRoutes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  for (int i = 0; i < this->relay_clusters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->relay_clusters(i), target);
  }

  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  for (int i = 0; i < this->routes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->routes(i), target);
  }

  // optional uint32 revision = 3;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PRoutes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 revision = 3;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revision());
    }

  }
  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  total_size += 1 * this->relay_clusters_size();
  for (int i = 0; i < this->relay_clusters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relay_clusters(i));
  }

  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PRoutes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRoutes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PRoutes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRoutes::MergeFrom(const CMsgSteamDatagramP2PRoutes& from) {
  GOOGLE_CHECK_NE(&from, this);
  relay_clusters_.MergeFrom(from.relay_clusters_);
  routes_.MergeFrom(from.routes_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PRoutes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRoutes::CopyFrom(const CMsgSteamDatagramP2PRoutes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRoutes::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PRoutes::Swap(CMsgSteamDatagramP2PRoutes* other) {
  if (other != this) {
    relay_clusters_.Swap(&other->relay_clusters_);
    routes_.Swap(&other->routes_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PRoutes_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PRoutes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PRendezvous::kToConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kRoutesFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kConnectRequestFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kConnectOkFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kConnectionClosedFieldNumber;
const int CMsgSteamDatagramP2PRendezvous::kFailedRelayRoutingTokenFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PRendezvous::CMsgSteamDatagramP2PRendezvous()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PRendezvous::InitAsDefaultInstance() {
  routes_ = const_cast< ::CMsgSteamDatagramP2PRoutes*>(&::CMsgSteamDatagramP2PRoutes::default_instance());
  connect_request_ = const_cast< ::CMsgSteamDatagramConnectRequest*>(&::CMsgSteamDatagramConnectRequest::default_instance());
  connect_ok_ = const_cast< ::CMsgSteamDatagramConnectOK*>(&::CMsgSteamDatagramConnectOK::default_instance());
  connection_closed_ = const_cast< ::CMsgSteamDatagramConnectionClosed*>(&::CMsgSteamDatagramConnectionClosed::default_instance());
}

CMsgSteamDatagramP2PRendezvous::CMsgSteamDatagramP2PRendezvous(const CMsgSteamDatagramP2PRendezvous& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRendezvous::SharedCtor() {
  _cached_size_ = 0;
  to_connection_id_ = 0u;
  routes_ = NULL;
  ack_peer_routes_revision_ = 0u;
  connect_request_ = NULL;
  connect_ok_ = NULL;
  connection_closed_ = NULL;
  failed_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PRendezvous::~CMsgSteamDatagramP2PRendezvous() {
  SharedDtor();
}

void CMsgSteamDatagramP2PRendezvous::SharedDtor() {
  if (failed_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete failed_relay_routing_token_;
  }
  if (this != default_instance_) {
    delete routes_;
    delete connect_request_;
    delete connect_ok_;
    delete connection_closed_;
  }
}

void CMsgSteamDatagramP2PRendezvous::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PRendezvous::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PRendezvous_descriptor_;
}

const CMsgSteamDatagramP2PRendezvous& CMsgSteamDatagramP2PRendezvous::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PRendezvous* CMsgSteamDatagramP2PRendezvous::default_instance_ = NULL;

CMsgSteamDatagramP2PRendezvous* CMsgSteamDatagramP2PRendezvous::New() const {
  return new CMsgSteamDatagramP2PRendezvous;
}

void CMsgSteamDatagramP2PRendezvous::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_connection_id_ = 0u;
    if (has_routes()) {
      if (routes_ != NULL) routes_->::CMsgSteamDatagramP2PRoutes::Clear();
    }
    ack_peer_routes_revision_ = 0u;
    if (has_connect_request()) {
      if (connect_request_ != NULL) connect_request_->::CMsgSteamDatagramConnectRequest::Clear();
    }
    if (has_connect_ok()) {
      if (connect_ok_ != NULL) connect_ok_->::CMsgSteamDatagramConnectOK::Clear();
    }
    if (has_connection_closed()) {
      if (connection_closed_ != NULL) connection_closed_->::CMsgSteamDatagramConnectionClosed::Clear();
    }
    if (has_failed_relay_routing_token()) {
      if (failed_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
        failed_relay_routing_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PRendezvous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 to_connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_connection_id_)));
          set_has_to_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_routes;
        break;
      }

      // optional .CMsgSteamDatagramP2PRoutes routes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ack_peer_routes_revision;
        break;
      }

      // optional uint32 ack_peer_routes_revision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_peer_routes_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
          set_has_ack_peer_routes_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connect_request;
        break;
      }

      // optional .CMsgSteamDatagramConnectRequest connect_request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_connect_ok;
        break;
      }

      // optional .CMsgSteamDatagramConnectOK connect_ok = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_ok:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect_ok()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_connection_closed;
        break;
      }

      // optional .CMsgSteamDatagramConnectionClosed connection_closed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_closed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_closed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_failed_relay_routing_token;
        break;
      }

      // optional bytes failed_relay_routing_token = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failed_relay_routing_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_failed_relay_routing_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PRendezvous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 to_connection_id = 1;
  if (has_to_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->to_connection_id(), output);
  }

  // optional .CMsgSteamDatagramP2PRoutes routes = 2;
  if (has_routes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routes(), output);
  }

  // optional uint32 ack_peer_routes_revision = 3;
  if (has_ack_peer_routes_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ack_peer_routes_revision(), output);
  }

  // optional .CMsgSteamDatagramConnectRequest connect_request = 4;
  if (has_connect_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->connect_request(), output);
  }

  // optional .CMsgSteamDatagramConnectOK connect_ok = 5;
  if (has_connect_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->connect_ok(), output);
  }

  // optional .CMsgSteamDatagramConnectionClosed connection_closed = 6;
  if (has_connection_closed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->connection_closed(), output);
  }

  // optional bytes failed_relay_routing_token = 7;
  if (has_failed_relay_routing_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->failed_relay_routing_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PRendezvous::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 to_connection_id = 1;
  if (has_to_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->to_connection_id(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutes routes = 2;
  if (has_routes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 3;
  if (has_ack_peer_routes_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ack_peer_routes_revision(), target);
  }

  // optional .CMsgSteamDatagramConnectRequest connect_request = 4;
  if (has_connect_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->connect_request(), target);
  }

  // optional .CMsgSteamDatagramConnectOK connect_ok = 5;
  if (has_connect_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->connect_ok(), target);
  }

  // optional .CMsgSteamDatagramConnectionClosed connection_closed = 6;
  if (has_connection_closed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->connection_closed(), target);
  }

  // optional bytes failed_relay_routing_token = 7;
  if (has_failed_relay_routing_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->failed_relay_routing_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PRendezvous::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 to_connection_id = 1;
    if (has_to_connection_id()) {
      total_size += 1 + 4;
    }

    // optional .CMsgSteamDatagramP2PRoutes routes = 2;
    if (has_routes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routes());
    }

    // optional uint32 ack_peer_routes_revision = 3;
    if (has_ack_peer_routes_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

    // optional .CMsgSteamDatagramConnectRequest connect_request = 4;
    if (has_connect_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_request());
    }

    // optional .CMsgSteamDatagramConnectOK connect_ok = 5;
    if (has_connect_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connect_ok());
    }

    // optional .CMsgSteamDatagramConnectionClosed connection_closed = 6;
    if (has_connection_closed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connection_closed());
    }

    // optional bytes failed_relay_routing_token = 7;
    if (has_failed_relay_routing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->failed_relay_routing_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PRendezvous::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PRendezvous* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PRendezvous*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PRendezvous::MergeFrom(const CMsgSteamDatagramP2PRendezvous& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_connection_id()) {
      set_to_connection_id(from.to_connection_id());
    }
    if (from.has_routes()) {
      mutable_routes()->::CMsgSteamDatagramP2PRoutes::MergeFrom(from.routes());
    }
    if (from.has_ack_peer_routes_revision()) {
      set_ack_peer_routes_revision(from.ack_peer_routes_revision());
    }
    if (from.has_connect_request()) {
      mutable_connect_request()->::CMsgSteamDatagramConnectRequest::MergeFrom(from.connect_request());
    }
    if (from.has_connect_ok()) {
      mutable_connect_ok()->::CMsgSteamDatagramConnectOK::MergeFrom(from.connect_ok());
    }
    if (from.has_connection_closed()) {
      mutable_connection_closed()->::CMsgSteamDatagramConnectionClosed::MergeFrom(from.connection_closed());
    }
    if (from.has_failed_relay_routing_token()) {
      set_failed_relay_routing_token(from.failed_relay_routing_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PRendezvous::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PRendezvous::CopyFrom(const CMsgSteamDatagramP2PRendezvous& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PRendezvous::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PRendezvous::Swap(CMsgSteamDatagramP2PRendezvous* other) {
  if (other != this) {
    std::swap(to_connection_id_, other->to_connection_id_);
    std::swap(routes_, other->routes_);
    std::swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
    std::swap(connect_request_, other->connect_request_);
    std::swap(connect_ok_, other->connect_ok_);
    std::swap(connection_closed_, other->connection_closed_);
    std::swap(failed_relay_routing_token_, other->failed_relay_routing_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRendezvous::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PRendezvous_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PRendezvous_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor_;
}
bool CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_MIN;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kForwardTargetRelayRoutingTokenFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kRoutesFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kSeqNumC2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter::kSeqNumE2EFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::InitAsDefaultInstance() {
  quality_relay_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  quality_e2e_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedCtor() {
  _cached_size_ = 0;
  quality_relay_ = NULL;
  quality_e2e_ = NULL;
  flags_ = 0u;
  forward_target_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  forward_target_revision_ = 0u;
  routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ack_peer_routes_revision_ = 0u;
  connection_id_ = 0u;
  seq_num_c2r_ = 0u;
  seq_num_e2e_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsP2PClientToRouter::~CMsgSteamDatagramConnectionStatsP2PClientToRouter() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedDtor() {
  if (forward_target_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete forward_target_relay_routing_token_;
  }
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    delete routes_;
  }
  if (this != default_instance_) {
    delete quality_relay_;
    delete quality_e2e_;
  }
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsP2PClientToRouter_descriptor_;
}

const CMsgSteamDatagramConnectionStatsP2PClientToRouter& CMsgSteamDatagramConnectionStatsP2PClientToRouter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsP2PClientToRouter* CMsgSteamDatagramConnectionStatsP2PClientToRouter::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsP2PClientToRouter* CMsgSteamDatagramConnectionStatsP2PClientToRouter::New() const {
  return new CMsgSteamDatagramConnectionStatsP2PClientToRouter;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quality_relay()) {
      if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_quality_e2e()) {
      if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    flags_ = 0u;
    if (has_forward_target_relay_routing_token()) {
      if (forward_target_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
        forward_target_relay_routing_token_->clear();
      }
    }
    forward_target_revision_ = 0u;
    if (has_routes()) {
      if (routes_ != &::google::protobuf::internal::kEmptyString) {
        routes_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ack_peer_routes_revision_ = 0u;
    connection_id_ = 0u;
    seq_num_c2r_ = 0u;
    seq_num_e2e_ = 0u;
  }
  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_relay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quality_e2e;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_e2e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_e2e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ack_relay;
        break;
      }

      // repeated fixed32 ack_relay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ack_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_ack_relay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ack_relay;
        if (input->ExpectTag(37)) goto parse_legacy_ack_e2e;
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_legacy_ack_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37, input, this->mutable_legacy_ack_e2e())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_legacy_ack_e2e;
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_forward_target_relay_routing_token;
        break;
      }

      // optional bytes forward_target_relay_routing_token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forward_target_relay_routing_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forward_target_relay_routing_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_forward_target_revision;
        break;
      }

      // optional uint32 forward_target_revision = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forward_target_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_target_revision_)));
          set_has_forward_target_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_routes;
        break;
      }

      // optional bytes routes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ack_peer_routes_revision;
        break;
      }

      // optional uint32 ack_peer_routes_revision = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_peer_routes_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
          set_has_ack_peer_routes_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_connection_id;
        break;
      }

      // optional fixed32 connection_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_seq_num_c2r;
        break;
      }

      // optional uint32 seq_num_c2r = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_c2r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2r_)));
          set_has_seq_num_c2r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_seq_num_e2e;
        break;
      }

      // optional uint32 seq_num_e2e = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_e2e_)));
          set_has_seq_num_e2e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quality_relay(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quality_e2e(), output);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional bytes forward_target_relay_routing_token = 6;
  if (has_forward_target_relay_routing_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->forward_target_relay_routing_token(), output);
  }

  // optional uint32 forward_target_revision = 7;
  if (has_forward_target_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->forward_target_revision(), output);
  }

  // optional bytes routes = 8;
  if (has_routes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->routes(), output);
  }

  // optional uint32 ack_peer_routes_revision = 9;
  if (has_ack_peer_routes_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ack_peer_routes_revision(), output);
  }

  // optional fixed32 connection_id = 10;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->connection_id(), output);
  }

  // optional uint32 seq_num_c2r = 11;
  if (has_seq_num_c2r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->seq_num_c2r(), output);
  }

  // optional uint32 seq_num_e2e = 12;
  if (has_seq_num_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->seq_num_e2e(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsP2PClientToRouter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quality_relay(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quality_e2e(), target);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(4, this->legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional bytes forward_target_relay_routing_token = 6;
  if (has_forward_target_relay_routing_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->forward_target_relay_routing_token(), target);
  }

  // optional uint32 forward_target_revision = 7;
  if (has_forward_target_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->forward_target_revision(), target);
  }

  // optional bytes routes = 8;
  if (has_routes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 9;
  if (has_ack_peer_routes_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 10;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 11;
  if (has_seq_num_c2r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->seq_num_c2r(), target);
  }

  // optional uint32 seq_num_e2e = 12;
  if (has_seq_num_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->seq_num_e2e(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsP2PClientToRouter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (has_quality_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_relay());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (has_quality_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_e2e());
    }

    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional bytes forward_target_relay_routing_token = 6;
    if (has_forward_target_relay_routing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forward_target_relay_routing_token());
    }

    // optional uint32 forward_target_revision = 7;
    if (has_forward_target_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forward_target_revision());
    }

    // optional bytes routes = 8;
    if (has_routes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->routes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ack_peer_routes_revision = 9;
    if (has_ack_peer_routes_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

    // optional fixed32 connection_id = 10;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_c2r = 11;
    if (has_seq_num_c2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2r());
    }

    // optional uint32 seq_num_e2e = 12;
    if (has_seq_num_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_e2e());
    }

  }
  // repeated fixed32 ack_relay = 3;
  {
    int data_size = 0;
    data_size = 4 * this->ack_relay_size();
    total_size += 1 * this->ack_relay_size() + data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  {
    int data_size = 0;
    data_size = 4 * this->legacy_ack_e2e_size();
    total_size += 1 * this->legacy_ack_e2e_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsP2PClientToRouter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsP2PClientToRouter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
  GOOGLE_CHECK_NE(&from, this);
  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality_relay()) {
      mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (from.has_quality_e2e()) {
      mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_forward_target_relay_routing_token()) {
      set_forward_target_relay_routing_token(from.forward_target_relay_routing_token());
    }
    if (from.has_forward_target_revision()) {
      set_forward_target_revision(from.forward_target_revision());
    }
    if (from.has_routes()) {
      set_routes(from.routes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ack_peer_routes_revision()) {
      set_ack_peer_routes_revision(from.ack_peer_routes_revision());
    }
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_seq_num_c2r()) {
      set_seq_num_c2r(from.seq_num_c2r());
    }
    if (from.has_seq_num_e2e()) {
      set_seq_num_e2e(from.seq_num_e2e());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::Swap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* other) {
  if (other != this) {
    std::swap(quality_relay_, other->quality_relay_);
    std::swap(quality_e2e_, other->quality_e2e_);
    ack_relay_.Swap(&other->ack_relay_);
    legacy_ack_e2e_.Swap(&other->legacy_ack_e2e_);
    std::swap(flags_, other->flags_);
    std::swap(forward_target_relay_routing_token_, other->forward_target_relay_routing_token_);
    std::swap(forward_target_revision_, other->forward_target_revision_);
    std::swap(routes_, other->routes_);
    std::swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
    std::swap(connection_id_, other->connection_id_);
    std::swap(seq_num_c2r_, other->seq_num_c2r_);
    std::swap(seq_num_e2e_, other->seq_num_e2e_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PClientToRouter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsP2PClientToRouter_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsP2PClientToRouter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor_;
}
bool CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_MIN;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kMigrateRequestIpFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kMigrateRequestPortFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kAckForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kRoutesFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kConnectionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kSeqNumR2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient::kSeqNumE2EFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::InitAsDefaultInstance() {
  quality_relay_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  quality_e2e_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedCtor() {
  _cached_size_ = 0;
  quality_relay_ = NULL;
  quality_e2e_ = NULL;
  seconds_until_shutdown_ = 0u;
  migrate_request_ip_ = 0u;
  migrate_request_port_ = 0u;
  scoring_penalty_relay_cluster_ = 0u;
  flags_ = 0u;
  ack_forward_target_revision_ = 0u;
  routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ack_peer_routes_revision_ = 0u;
  connection_id_ = 0u;
  seq_num_r2c_ = 0u;
  seq_num_e2e_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsP2PRouterToClient::~CMsgSteamDatagramConnectionStatsP2PRouterToClient() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedDtor() {
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    delete routes_;
  }
  if (this != default_instance_) {
    delete quality_relay_;
    delete quality_e2e_;
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsP2PRouterToClient_descriptor_;
}

const CMsgSteamDatagramConnectionStatsP2PRouterToClient& CMsgSteamDatagramConnectionStatsP2PRouterToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsP2PRouterToClient* CMsgSteamDatagramConnectionStatsP2PRouterToClient::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsP2PRouterToClient* CMsgSteamDatagramConnectionStatsP2PRouterToClient::New() const {
  return new CMsgSteamDatagramConnectionStatsP2PRouterToClient;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quality_relay()) {
      if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_quality_e2e()) {
      if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    seconds_until_shutdown_ = 0u;
    migrate_request_ip_ = 0u;
    migrate_request_port_ = 0u;
    scoring_penalty_relay_cluster_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flags_ = 0u;
    ack_forward_target_revision_ = 0u;
    if (has_routes()) {
      if (routes_ != &::google::protobuf::internal::kEmptyString) {
        routes_->clear();
      }
    }
    ack_peer_routes_revision_ = 0u;
    connection_id_ = 0u;
    seq_num_r2c_ = 0u;
    seq_num_e2e_ = 0u;
  }
  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_relay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quality_e2e;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_e2e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_e2e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_migrate_request_ip;
        break;
      }

      // optional fixed32 migrate_request_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_migrate_request_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &migrate_request_ip_)));
          set_has_migrate_request_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_migrate_request_port;
        break;
      }

      // optional uint32 migrate_request_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_migrate_request_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &migrate_request_port_)));
          set_has_migrate_request_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scoring_penalty_relay_cluster;
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoring_penalty_relay_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
          set_has_scoring_penalty_relay_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_ack_relay;
        break;
      }

      // repeated fixed32 ack_relay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ack_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 61, input, this->mutable_ack_relay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_ack_relay;
        if (input->ExpectTag(69)) goto parse_legacy_ack_e2e;
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_legacy_ack_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 69, input, this->mutable_legacy_ack_e2e())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_legacy_ack_e2e;
        if (input->ExpectTag(72)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ack_forward_target_revision;
        break;
      }

      // optional uint32 ack_forward_target_revision = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_forward_target_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_forward_target_revision_)));
          set_has_ack_forward_target_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_routes;
        break;
      }

      // optional bytes routes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ack_peer_routes_revision;
        break;
      }

      // optional uint32 ack_peer_routes_revision = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_peer_routes_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
          set_has_ack_peer_routes_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_connection_id;
        break;
      }

      // optional fixed32 connection_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_seq_num_r2c;
        break;
      }

      // optional uint32 seq_num_r2c = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_r2c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
          set_has_seq_num_r2c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_seq_num_e2e;
        break;
      }

      // optional uint32 seq_num_e2e = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_e2e_)));
          set_has_seq_num_e2e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quality_relay(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quality_e2e(), output);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 migrate_request_ip = 4;
  if (has_migrate_request_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->migrate_request_ip(), output);
  }

  // optional uint32 migrate_request_port = 5;
  if (has_migrate_request_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->migrate_request_port(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 6;
  if (has_scoring_penalty_relay_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scoring_penalty_relay_cluster(), output);
  }

  // repeated fixed32 ack_relay = 7;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      7, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      8, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 9;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flags(), output);
  }

  // optional uint32 ack_forward_target_revision = 10;
  if (has_ack_forward_target_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ack_forward_target_revision(), output);
  }

  // optional bytes routes = 11;
  if (has_routes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->routes(), output);
  }

  // optional uint32 ack_peer_routes_revision = 12;
  if (has_ack_peer_routes_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ack_peer_routes_revision(), output);
  }

  // optional fixed32 connection_id = 13;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->connection_id(), output);
  }

  // optional uint32 seq_num_r2c = 14;
  if (has_seq_num_r2c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->seq_num_r2c(), output);
  }

  // optional uint32 seq_num_e2e = 15;
  if (has_seq_num_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->seq_num_e2e(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsP2PRouterToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quality_relay(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quality_e2e(), target);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 migrate_request_ip = 4;
  if (has_migrate_request_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 5;
  if (has_migrate_request_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 6;
  if (has_scoring_penalty_relay_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 7;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(7, this->ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(8, this->legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 9;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->flags(), target);
  }

  // optional uint32 ack_forward_target_revision = 10;
  if (has_ack_forward_target_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->ack_forward_target_revision(), target);
  }

  // optional bytes routes = 11;
  if (has_routes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 12;
  if (has_ack_peer_routes_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 13;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 14;
  if (has_seq_num_r2c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->seq_num_r2c(), target);
  }

  // optional uint32 seq_num_e2e = 15;
  if (has_seq_num_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->seq_num_e2e(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsP2PRouterToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (has_quality_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_relay());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (has_quality_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_e2e());
    }

    // optional uint32 seconds_until_shutdown = 3;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 migrate_request_ip = 4;
    if (has_migrate_request_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 migrate_request_port = 5;
    if (has_migrate_request_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->migrate_request_port());
    }

    // optional uint32 scoring_penalty_relay_cluster = 6;
    if (has_scoring_penalty_relay_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 flags = 9;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 ack_forward_target_revision = 10;
    if (has_ack_forward_target_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_forward_target_revision());
    }

    // optional bytes routes = 11;
    if (has_routes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->routes());
    }

    // optional uint32 ack_peer_routes_revision = 12;
    if (has_ack_peer_routes_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

    // optional fixed32 connection_id = 13;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2c = 14;
    if (has_seq_num_r2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

    // optional uint32 seq_num_e2e = 15;
    if (has_seq_num_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_e2e());
    }

  }
  // repeated fixed32 ack_relay = 7;
  {
    int data_size = 0;
    data_size = 4 * this->ack_relay_size();
    total_size += 1 * this->ack_relay_size() + data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  {
    int data_size = 0;
    data_size = 4 * this->legacy_ack_e2e_size();
    total_size += 1 * this->legacy_ack_e2e_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsP2PRouterToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsP2PRouterToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality_relay()) {
      mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (from.has_quality_e2e()) {
      mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_migrate_request_ip()) {
      set_migrate_request_ip(from.migrate_request_ip());
    }
    if (from.has_migrate_request_port()) {
      set_migrate_request_port(from.migrate_request_port());
    }
    if (from.has_scoring_penalty_relay_cluster()) {
      set_scoring_penalty_relay_cluster(from.scoring_penalty_relay_cluster());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_ack_forward_target_revision()) {
      set_ack_forward_target_revision(from.ack_forward_target_revision());
    }
    if (from.has_routes()) {
      set_routes(from.routes());
    }
    if (from.has_ack_peer_routes_revision()) {
      set_ack_peer_routes_revision(from.ack_peer_routes_revision());
    }
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_seq_num_r2c()) {
      set_seq_num_r2c(from.seq_num_r2c());
    }
    if (from.has_seq_num_e2e()) {
      set_seq_num_e2e(from.seq_num_e2e());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::Swap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* other) {
  if (other != this) {
    std::swap(quality_relay_, other->quality_relay_);
    std::swap(quality_e2e_, other->quality_e2e_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(migrate_request_ip_, other->migrate_request_ip_);
    std::swap(migrate_request_port_, other->migrate_request_port_);
    std::swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
    ack_relay_.Swap(&other->ack_relay_);
    legacy_ack_e2e_.Swap(&other->legacy_ack_e2e_);
    std::swap(flags_, other->flags_);
    std::swap(ack_forward_target_revision_, other->ack_forward_target_revision_);
    std::swap(routes_, other->routes_);
    std::swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
    std::swap(connection_id_, other->connection_id_);
    std::swap(seq_num_r2c_, other->seq_num_r2c_);
    std::swap(seq_num_e2e_, other->seq_num_e2e_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PRouterToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsP2PRouterToClient_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsP2PRouterToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PBadRouteRouterToClient::kConnectionIdFieldNumber;
const int CMsgSteamDatagramP2PBadRouteRouterToClient::kFailedRelayRoutingTokenFieldNumber;
const int CMsgSteamDatagramP2PBadRouteRouterToClient::kAckForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramP2PBadRouteRouterToClient::kKludgePadFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::InitAsDefaultInstance() {
}

CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(const CMsgSteamDatagramP2PBadRouteRouterToClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = 0u;
  failed_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ack_forward_target_revision_ = 0u;
  kludge_pad_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PBadRouteRouterToClient::~CMsgSteamDatagramP2PBadRouteRouterToClient() {
  SharedDtor();
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedDtor() {
  if (failed_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete failed_relay_routing_token_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PBadRouteRouterToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PBadRouteRouterToClient_descriptor_;
}

const CMsgSteamDatagramP2PBadRouteRouterToClient& CMsgSteamDatagramP2PBadRouteRouterToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PBadRouteRouterToClient* CMsgSteamDatagramP2PBadRouteRouterToClient::default_instance_ = NULL;

CMsgSteamDatagramP2PBadRouteRouterToClient* CMsgSteamDatagramP2PBadRouteRouterToClient::New() const {
  return new CMsgSteamDatagramP2PBadRouteRouterToClient;
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connection_id_ = 0u;
    if (has_failed_relay_routing_token()) {
      if (failed_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
        failed_relay_routing_token_->clear();
      }
    }
    ack_forward_target_revision_ = 0u;
    kludge_pad_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PBadRouteRouterToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 connection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &connection_id_)));
          set_has_connection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_failed_relay_routing_token;
        break;
      }

      // optional bytes failed_relay_routing_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failed_relay_routing_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_failed_relay_routing_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ack_forward_target_revision;
        break;
      }

      // optional uint32 ack_forward_target_revision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_forward_target_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_forward_target_revision_)));
          set_has_ack_forward_target_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(793)) goto parse_kludge_pad;
        break;
      }

      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kludge_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &kludge_pad_)));
          set_has_kludge_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->connection_id(), output);
  }

  // optional bytes failed_relay_routing_token = 2;
  if (has_failed_relay_routing_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->failed_relay_routing_token(), output);
  }

  // optional uint32 ack_forward_target_revision = 3;
  if (has_ack_forward_target_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ack_forward_target_revision(), output);
  }

  // optional fixed64 kludge_pad = 99;
  if (has_kludge_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->kludge_pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PBadRouteRouterToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 connection_id = 1;
  if (has_connection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->connection_id(), target);
  }

  // optional bytes failed_relay_routing_token = 2;
  if (has_failed_relay_routing_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->failed_relay_routing_token(), target);
  }

  // optional uint32 ack_forward_target_revision = 3;
  if (has_ack_forward_target_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ack_forward_target_revision(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (has_kludge_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->kludge_pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PBadRouteRouterToClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 connection_id = 1;
    if (has_connection_id()) {
      total_size += 1 + 4;
    }

    // optional bytes failed_relay_routing_token = 2;
    if (has_failed_relay_routing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->failed_relay_routing_token());
    }

    // optional uint32 ack_forward_target_revision = 3;
    if (has_ack_forward_target_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_forward_target_revision());
    }

    // optional fixed64 kludge_pad = 99;
    if (has_kludge_pad()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PBadRouteRouterToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PBadRouteRouterToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connection_id()) {
      set_connection_id(from.connection_id());
    }
    if (from.has_failed_relay_routing_token()) {
      set_failed_relay_routing_token(from.failed_relay_routing_token());
    }
    if (from.has_ack_forward_target_revision()) {
      set_ack_forward_target_revision(from.ack_forward_target_revision());
    }
    if (from.has_kludge_pad()) {
      set_kludge_pad(from.kludge_pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PBadRouteRouterToClient::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::Swap(CMsgSteamDatagramP2PBadRouteRouterToClient* other) {
  if (other != this) {
    std::swap(connection_id_, other->connection_id_);
    std::swap(failed_relay_routing_token_, other->failed_relay_routing_token_);
    std::swap(ack_forward_target_revision_, other->ack_forward_target_revision_);
    std::swap(kludge_pad_, other->kludge_pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PBadRouteRouterToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PBadRouteRouterToClient_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PBadRouteRouterToClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramRelayToRelayPing::kRequestTimestampFieldNumber;
const int CMsgSteamDatagramRelayToRelayPing::kRequestDateFieldNumber;
const int CMsgSteamDatagramRelayToRelayPing::kMyPopIdFieldNumber;
const int CMsgSteamDatagramRelayToRelayPing::kYourPopIdFieldNumber;
const int CMsgSteamDatagramRelayToRelayPing::kChecksumFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRelayToRelayPing::CMsgSteamDatagramRelayToRelayPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRelayToRelayPing::InitAsDefaultInstance() {
}

CMsgSteamDatagramRelayToRelayPing::CMsgSteamDatagramRelayToRelayPing(const CMsgSteamDatagramRelayToRelayPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayToRelayPing::SharedCtor() {
  _cached_size_ = 0;
  request_timestamp_ = 0u;
  request_date_ = 0u;
  my_pop_id_ = 0u;
  your_pop_id_ = 0u;
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRelayToRelayPing::~CMsgSteamDatagramRelayToRelayPing() {
  SharedDtor();
}

void CMsgSteamDatagramRelayToRelayPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRelayToRelayPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRelayToRelayPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRelayToRelayPing_descriptor_;
}

const CMsgSteamDatagramRelayToRelayPing& CMsgSteamDatagramRelayToRelayPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRelayToRelayPing* CMsgSteamDatagramRelayToRelayPing::default_instance_ = NULL;

CMsgSteamDatagramRelayToRelayPing* CMsgSteamDatagramRelayToRelayPing::New() const {
  return new CMsgSteamDatagramRelayToRelayPing;
}

void CMsgSteamDatagramRelayToRelayPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_timestamp_ = 0u;
    request_date_ = 0u;
    my_pop_id_ = 0u;
    your_pop_id_ = 0u;
    checksum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRelayToRelayPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 request_timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &request_timestamp_)));
          set_has_request_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_request_date;
        break;
      }

      // optional fixed32 request_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_request_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &request_date_)));
          set_has_request_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_my_pop_id;
        break;
      }

      // optional fixed32 my_pop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_my_pop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &my_pop_id_)));
          set_has_my_pop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_your_pop_id;
        break;
      }

      // optional fixed32 your_pop_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_your_pop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_pop_id_)));
          set_has_your_pop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_checksum;
        break;
      }

      // optional fixed32 checksum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRelayToRelayPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 request_timestamp = 1;
  if (has_request_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->request_timestamp(), output);
  }

  // optional fixed32 request_date = 2;
  if (has_request_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->request_date(), output);
  }

  // optional fixed32 my_pop_id = 3;
  if (has_my_pop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->my_pop_id(), output);
  }

  // optional fixed32 your_pop_id = 4;
  if (has_your_pop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->your_pop_id(), output);
  }

  // optional fixed32 checksum = 5;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRelayToRelayPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 request_timestamp = 1;
  if (has_request_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->request_timestamp(), target);
  }

  // optional fixed32 request_date = 2;
  if (has_request_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->request_date(), target);
  }

  // optional fixed32 my_pop_id = 3;
  if (has_my_pop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->my_pop_id(), target);
  }

  // optional fixed32 your_pop_id = 4;
  if (has_your_pop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->your_pop_id(), target);
  }

  // optional fixed32 checksum = 5;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRelayToRelayPing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 request_timestamp = 1;
    if (has_request_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 request_date = 2;
    if (has_request_date()) {
      total_size += 1 + 4;
    }

    // optional fixed32 my_pop_id = 3;
    if (has_my_pop_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_pop_id = 4;
    if (has_your_pop_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 checksum = 5;
    if (has_checksum()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRelayToRelayPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRelayToRelayPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRelayToRelayPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRelayToRelayPing::MergeFrom(const CMsgSteamDatagramRelayToRelayPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_timestamp()) {
      set_request_timestamp(from.request_timestamp());
    }
    if (from.has_request_date()) {
      set_request_date(from.request_date());
    }
    if (from.has_my_pop_id()) {
      set_my_pop_id(from.my_pop_id());
    }
    if (from.has_your_pop_id()) {
      set_your_pop_id(from.your_pop_id());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRelayToRelayPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRelayToRelayPing::CopyFrom(const CMsgSteamDatagramRelayToRelayPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRelayToRelayPing::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRelayToRelayPing::Swap(CMsgSteamDatagramRelayToRelayPing* other) {
  if (other != this) {
    std::swap(request_timestamp_, other->request_timestamp_);
    std::swap(request_date_, other->request_date_);
    std::swap(my_pop_id_, other->my_pop_id_);
    std::swap(your_pop_id_, other->your_pop_id_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRelayToRelayPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRelayToRelayPing_descriptor_;
  metadata.reflection = CMsgSteamDatagramRelayToRelayPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramDataCenterState_Server::kAddressFieldNumber;
const int CMsgSteamDatagramDataCenterState_Server::kPingMsFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramDataCenterState_Server::CMsgSteamDatagramDataCenterState_Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramDataCenterState_Server::InitAsDefaultInstance() {
}

CMsgSteamDatagramDataCenterState_Server::CMsgSteamDatagramDataCenterState_Server(const CMsgSteamDatagramDataCenterState_Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_Server::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ping_ms_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramDataCenterState_Server::~CMsgSteamDatagramDataCenterState_Server() {
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState_Server::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramDataCenterState_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramDataCenterState_Server_descriptor_;
}

const CMsgSteamDatagramDataCenterState_Server& CMsgSteamDatagramDataCenterState_Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_Server::default_instance_ = NULL;

CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_Server::New() const {
  return new CMsgSteamDatagramDataCenterState_Server;
}

void CMsgSteamDatagramDataCenterState_Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    ping_ms_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramDataCenterState_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ping_ms;
        break;
      }

      // optional uint32 ping_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
          set_has_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramDataCenterState_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }

  // optional uint32 ping_ms = 2;
  if (has_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState_Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional uint32 ping_ms = 2;
  if (has_ping_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramDataCenterState_Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint32 ping_ms = 2;
    if (has_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState_Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState_Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramDataCenterState_Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState_Server::MergeFrom(const CMsgSteamDatagramDataCenterState_Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_ping_ms()) {
      set_ping_ms(from.ping_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramDataCenterState_Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_Server::CopyFrom(const CMsgSteamDatagramDataCenterState_Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState_Server::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramDataCenterState_Server::Swap(CMsgSteamDatagramDataCenterState_Server* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(ping_ms_, other->ping_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState_Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramDataCenterState_Server_descriptor_;
  metadata.reflection = CMsgSteamDatagramDataCenterState_Server_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramDataCenterState_DataCenter::kCodeFieldNumber;
const int CMsgSteamDatagramDataCenterState_DataCenter::kServerSampleFieldNumber;
const int CMsgSteamDatagramDataCenterState_DataCenter::kRelaySampleFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramDataCenterState_DataCenter::CMsgSteamDatagramDataCenterState_DataCenter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramDataCenterState_DataCenter::InitAsDefaultInstance() {
}

CMsgSteamDatagramDataCenterState_DataCenter::CMsgSteamDatagramDataCenterState_DataCenter(const CMsgSteamDatagramDataCenterState_DataCenter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramDataCenterState_DataCenter::~CMsgSteamDatagramDataCenterState_DataCenter() {
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState_DataCenter::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramDataCenterState_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_DataCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramDataCenterState_DataCenter_descriptor_;
}

const CMsgSteamDatagramDataCenterState_DataCenter& CMsgSteamDatagramDataCenterState_DataCenter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState_DataCenter::default_instance_ = NULL;

CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState_DataCenter::New() const {
  return new CMsgSteamDatagramDataCenterState_DataCenter;
}

void CMsgSteamDatagramDataCenterState_DataCenter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  server_sample_.Clear();
  relay_sample_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramDataCenterState_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_sample;
        break;
      }

      // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_sample()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_sample;
        if (input->ExpectTag(26)) goto parse_relay_sample;
        break;
      }

      // repeated .CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relay_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relay_sample()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_relay_sample;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramDataCenterState_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  for (int i = 0; i < this->server_sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_sample(i), output);
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
  for (int i = 0; i < this->relay_sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->relay_sample(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState_DataCenter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  for (int i = 0; i < this->server_sample_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server_sample(i), target);
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
  for (int i = 0; i < this->relay_sample_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->relay_sample(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramDataCenterState_DataCenter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  total_size += 1 * this->server_sample_size();
  for (int i = 0; i < this->server_sample_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_sample(i));
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
  total_size += 1 * this->relay_sample_size();
  for (int i = 0; i < this->relay_sample_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relay_sample(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState_DataCenter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramDataCenterState_DataCenter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState_DataCenter::MergeFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_sample_.MergeFrom(from.server_sample_);
  relay_sample_.MergeFrom(from.relay_sample_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramDataCenterState_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_DataCenter::CopyFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState_DataCenter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramDataCenterState_DataCenter::Swap(CMsgSteamDatagramDataCenterState_DataCenter* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    server_sample_.Swap(&other->server_sample_);
    relay_sample_.Swap(&other->relay_sample_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState_DataCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramDataCenterState_DataCenter_descriptor_;
  metadata.reflection = CMsgSteamDatagramDataCenterState_DataCenter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramDataCenterState::kDataCentersFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramDataCenterState::CMsgSteamDatagramDataCenterState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramDataCenterState::InitAsDefaultInstance() {
}

CMsgSteamDatagramDataCenterState::CMsgSteamDatagramDataCenterState(const CMsgSteamDatagramDataCenterState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramDataCenterState::~CMsgSteamDatagramDataCenterState() {
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramDataCenterState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramDataCenterState_descriptor_;
}

const CMsgSteamDatagramDataCenterState& CMsgSteamDatagramDataCenterState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramDataCenterState* CMsgSteamDatagramDataCenterState::default_instance_ = NULL;

CMsgSteamDatagramDataCenterState* CMsgSteamDatagramDataCenterState::New() const {
  return new CMsgSteamDatagramDataCenterState;
}

void CMsgSteamDatagramDataCenterState::Clear() {
  data_centers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramDataCenterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_centers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_centers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_centers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramDataCenterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  for (int i = 0; i < this->data_centers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_centers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  for (int i = 0; i < this->data_centers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_centers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramDataCenterState::ByteSize() const {
  int total_size = 0;

  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  total_size += 1 * this->data_centers_size();
  for (int i = 0; i < this->data_centers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_centers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramDataCenterState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState::MergeFrom(const CMsgSteamDatagramDataCenterState& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_centers_.MergeFrom(from.data_centers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramDataCenterState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState::CopyFrom(const CMsgSteamDatagramDataCenterState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramDataCenterState::Swap(CMsgSteamDatagramDataCenterState* other) {
  if (other != this) {
    data_centers_.Swap(&other->data_centers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramDataCenterState_descriptor_;
  metadata.reflection = CMsgSteamDatagramDataCenterState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramRouterHealth_DataCenter::kDatacenterIdFieldNumber;
const int CMsgSteamDatagramRouterHealth_DataCenter::kStateFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRouterHealth_DataCenter::CMsgSteamDatagramRouterHealth_DataCenter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRouterHealth_DataCenter::InitAsDefaultInstance() {
}

CMsgSteamDatagramRouterHealth_DataCenter::CMsgSteamDatagramRouterHealth_DataCenter(const CMsgSteamDatagramRouterHealth_DataCenter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  datacenter_id_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRouterHealth_DataCenter::~CMsgSteamDatagramRouterHealth_DataCenter() {
  SharedDtor();
}

void CMsgSteamDatagramRouterHealth_DataCenter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRouterHealth_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth_DataCenter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRouterHealth_DataCenter_descriptor_;
}

const CMsgSteamDatagramRouterHealth_DataCenter& CMsgSteamDatagramRouterHealth_DataCenter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth_DataCenter::default_instance_ = NULL;

CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth_DataCenter::New() const {
  return new CMsgSteamDatagramRouterHealth_DataCenter;
}

void CMsgSteamDatagramRouterHealth_DataCenter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datacenter_id_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRouterHealth_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 datacenter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &datacenter_id_)));
          set_has_datacenter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRouterHealth_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 datacenter_id = 1;
  if (has_datacenter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->datacenter_id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRouterHealth_DataCenter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 datacenter_id = 1;
  if (has_datacenter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->datacenter_id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRouterHealth_DataCenter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 datacenter_id = 1;
    if (has_datacenter_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterHealth_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRouterHealth_DataCenter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRouterHealth_DataCenter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterHealth_DataCenter::MergeFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datacenter_id()) {
      set_datacenter_id(from.datacenter_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRouterHealth_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth_DataCenter::CopyFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterHealth_DataCenter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRouterHealth_DataCenter::Swap(CMsgSteamDatagramRouterHealth_DataCenter* other) {
  if (other != this) {
    std::swap(datacenter_id_, other->datacenter_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRouterHealth_DataCenter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRouterHealth_DataCenter_descriptor_;
  metadata.reflection = CMsgSteamDatagramRouterHealth_DataCenter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgSteamDatagramRouterHealth::kCpuLoadFieldNumber;
const int CMsgSteamDatagramRouterHealth::kActiveSessionsFieldNumber;
const int CMsgSteamDatagramRouterHealth::kDataPktsSecFieldNumber;
const int CMsgSteamDatagramRouterHealth::kOtherPktsSecFieldNumber;
const int CMsgSteamDatagramRouterHealth::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramRouterHealth::kCpuCostPerUserFieldNumber;
const int CMsgSteamDatagramRouterHealth::kCpuCostPerPacketFieldNumber;
const int CMsgSteamDatagramRouterHealth::kDataCentersFieldNumber;
const int CMsgSteamDatagramRouterHealth::kMagicFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramRouterHealth::CMsgSteamDatagramRouterHealth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramRouterHealth::InitAsDefaultInstance() {
}

CMsgSteamDatagramRouterHealth::CMsgSteamDatagramRouterHealth(const CMsgSteamDatagramRouterHealth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth::SharedCtor() {
  _cached_size_ = 0;
  cpu_load_ = 0;
  active_sessions_ = 0u;
  data_pkts_sec_ = 0u;
  other_pkts_sec_ = 0u;
  seconds_until_shutdown_ = 0u;
  cpu_cost_per_user_ = 0;
  cpu_cost_per_packet_ = 0;
  magic_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramRouterHealth::~CMsgSteamDatagramRouterHealth() {
  SharedDtor();
}

void CMsgSteamDatagramRouterHealth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramRouterHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramRouterHealth_descriptor_;
}

const CMsgSteamDatagramRouterHealth& CMsgSteamDatagramRouterHealth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramRouterHealth* CMsgSteamDatagramRouterHealth::default_instance_ = NULL;

CMsgSteamDatagramRouterHealth* CMsgSteamDatagramRouterHealth::New() const {
  return new CMsgSteamDatagramRouterHealth;
}

void CMsgSteamDatagramRouterHealth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_load_ = 0;
    active_sessions_ = 0u;
    data_pkts_sec_ = 0u;
    other_pkts_sec_ = 0u;
    seconds_until_shutdown_ = 0u;
    cpu_cost_per_user_ = 0;
    cpu_cost_per_packet_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    magic_ = GOOGLE_ULONGLONG(0);
  }
  data_centers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramRouterHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cpu_load = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_load_)));
          set_has_cpu_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_sessions;
        break;
      }

      // optional uint32 active_sessions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_sessions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_sessions_)));
          set_has_active_sessions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_pkts_sec;
        break;
      }

      // optional uint32 data_pkts_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_pkts_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_pkts_sec_)));
          set_has_data_pkts_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_other_pkts_sec;
        break;
      }

      // optional uint32 other_pkts_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_pkts_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_pkts_sec_)));
          set_has_other_pkts_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seconds_until_shutdown;
        break;
      }

      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds_until_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
          set_has_seconds_until_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data_centers;
        break;
      }

      // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_centers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_centers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data_centers;
        if (input->ExpectTag(57)) goto parse_magic;
        break;
      }

      // optional fixed64 magic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_cpu_cost_per_user;
        break;
      }

      // optional float cpu_cost_per_user = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpu_cost_per_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_per_user_)));
          set_has_cpu_cost_per_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_cpu_cost_per_packet;
        break;
      }

      // optional float cpu_cost_per_packet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cpu_cost_per_packet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_per_packet_)));
          set_has_cpu_cost_per_packet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramRouterHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float cpu_load = 1;
  if (has_cpu_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cpu_load(), output);
  }

  // optional uint32 active_sessions = 2;
  if (has_active_sessions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_sessions(), output);
  }

  // optional uint32 data_pkts_sec = 3;
  if (has_data_pkts_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_pkts_sec(), output);
  }

  // optional uint32 other_pkts_sec = 4;
  if (has_other_pkts_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->other_pkts_sec(), output);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (has_seconds_until_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_until_shutdown(), output);
  }

  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  for (int i = 0; i < this->data_centers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data_centers(i), output);
  }

  // optional fixed64 magic = 7;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->magic(), output);
  }

  // optional float cpu_cost_per_user = 8;
  if (has_cpu_cost_per_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cpu_cost_per_user(), output);
  }

  // optional float cpu_cost_per_packet = 9;
  if (has_cpu_cost_per_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cpu_cost_per_packet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramRouterHealth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float cpu_load = 1;
  if (has_cpu_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cpu_load(), target);
  }

  // optional uint32 active_sessions = 2;
  if (has_active_sessions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_sessions(), target);
  }

  // optional uint32 data_pkts_sec = 3;
  if (has_data_pkts_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_pkts_sec(), target);
  }

  // optional uint32 other_pkts_sec = 4;
  if (has_other_pkts_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->other_pkts_sec(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (has_seconds_until_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_until_shutdown(), target);
  }

  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  for (int i = 0; i < this->data_centers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data_centers(i), target);
  }

  // optional fixed64 magic = 7;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->magic(), target);
  }

  // optional float cpu_cost_per_user = 8;
  if (has_cpu_cost_per_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cpu_cost_per_user(), target);
  }

  // optional float cpu_cost_per_packet = 9;
  if (has_cpu_cost_per_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cpu_cost_per_packet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramRouterHealth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float cpu_load = 1;
    if (has_cpu_load()) {
      total_size += 1 + 4;
    }

    // optional uint32 active_sessions = 2;
    if (has_active_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_sessions());
    }

    // optional uint32 data_pkts_sec = 3;
    if (has_data_pkts_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_pkts_sec());
    }

    // optional uint32 other_pkts_sec = 4;
    if (has_other_pkts_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_pkts_sec());
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional float cpu_cost_per_user = 8;
    if (has_cpu_cost_per_user()) {
      total_size += 1 + 4;
    }

    // optional float cpu_cost_per_packet = 9;
    if (has_cpu_cost_per_packet()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 magic = 7;
    if (has_magic()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  total_size += 1 * this->data_centers_size();
  for (int i = 0; i < this->data_centers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_centers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterHealth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramRouterHealth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramRouterHealth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterHealth::MergeFrom(const CMsgSteamDatagramRouterHealth& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_centers_.MergeFrom(from.data_centers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_load()) {
      set_cpu_load(from.cpu_load());
    }
    if (from.has_active_sessions()) {
      set_active_sessions(from.active_sessions());
    }
    if (from.has_data_pkts_sec()) {
      set_data_pkts_sec(from.data_pkts_sec());
    }
    if (from.has_other_pkts_sec()) {
      set_other_pkts_sec(from.other_pkts_sec());
    }
    if (from.has_seconds_until_shutdown()) {
      set_seconds_until_shutdown(from.seconds_until_shutdown());
    }
    if (from.has_cpu_cost_per_user()) {
      set_cpu_cost_per_user(from.cpu_cost_per_user());
    }
    if (from.has_cpu_cost_per_packet()) {
      set_cpu_cost_per_packet(from.cpu_cost_per_packet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_magic()) {
      set_magic(from.magic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramRouterHealth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth::CopyFrom(const CMsgSteamDatagramRouterHealth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterHealth::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramRouterHealth::Swap(CMsgSteamDatagramRouterHealth* other) {
  if (other != this) {
    std::swap(cpu_load_, other->cpu_load_);
    std::swap(active_sessions_, other->active_sessions_);
    std::swap(data_pkts_sec_, other->data_pkts_sec_);
    std::swap(other_pkts_sec_, other->other_pkts_sec_);
    std::swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
    std::swap(cpu_cost_per_user_, other->cpu_cost_per_user_);
    std::swap(cpu_cost_per_packet_, other->cpu_cost_per_packet_);
    data_centers_.Swap(&other->data_centers_);
    std::swap(magic_, other->magic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramRouterHealth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramRouterHealth_descriptor_;
  metadata.reflection = CMsgSteamDatagramRouterHealth_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor_;
}
bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ACK_REQUEST_E2E;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ACK_REQUEST_IMMEDIATE;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Flags_MIN;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Flags_MAX;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Flags_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kQualityRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kQualityE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kAckRelayFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kLegacyAckE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kFlagsFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kAckForwardTargetRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kRoutesFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kAckPeerRoutesRevisionFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kSeqNumR2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kSeqNumE2EFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::kToRelaySessionIdFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramConnectionStatsP2PRouterToRouter::CMsgSteamDatagramConnectionStatsP2PRouterToRouter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::InitAsDefaultInstance() {
  quality_relay_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
  quality_e2e_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(&::CMsgSteamDatagramConnectionQuality::default_instance());
}

CMsgSteamDatagramConnectionStatsP2PRouterToRouter::CMsgSteamDatagramConnectionStatsP2PRouterToRouter(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SharedCtor() {
  _cached_size_ = 0;
  quality_relay_ = NULL;
  quality_e2e_ = NULL;
  flags_ = 0u;
  ack_forward_target_revision_ = 0u;
  routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ack_peer_routes_revision_ = 0u;
  seq_num_r2r_ = 0u;
  seq_num_e2e_ = 0u;
  from_relay_session_id_ = 0u;
  to_relay_session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramConnectionStatsP2PRouterToRouter::~CMsgSteamDatagramConnectionStatsP2PRouterToRouter() {
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SharedDtor() {
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    delete routes_;
  }
  if (this != default_instance_) {
    delete quality_relay_;
    delete quality_e2e_;
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_descriptor_;
}

const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& CMsgSteamDatagramConnectionStatsP2PRouterToRouter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramConnectionStatsP2PRouterToRouter* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::default_instance_ = NULL;

CMsgSteamDatagramConnectionStatsP2PRouterToRouter* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::New() const {
  return new CMsgSteamDatagramConnectionStatsP2PRouterToRouter;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quality_relay()) {
      if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    if (has_quality_e2e()) {
      if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
    }
    flags_ = 0u;
    ack_forward_target_revision_ = 0u;
    if (has_routes()) {
      if (routes_ != &::google::protobuf::internal::kEmptyString) {
        routes_->clear();
      }
    }
    ack_peer_routes_revision_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    seq_num_r2r_ = 0u;
    seq_num_e2e_ = 0u;
    from_relay_session_id_ = 0u;
    to_relay_session_id_ = 0u;
  }
  ack_relay_.Clear();
  legacy_ack_e2e_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_relay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quality_e2e;
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_e2e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_e2e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ack_relay;
        break;
      }

      // repeated fixed32 ack_relay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ack_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_ack_relay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ack_relay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ack_relay;
        if (input->ExpectTag(37)) goto parse_legacy_ack_e2e;
        break;
      }

      // repeated fixed32 legacy_ack_e2e = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_legacy_ack_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 37, input, this->mutable_legacy_ack_e2e())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_legacy_ack_e2e())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_legacy_ack_e2e;
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ack_forward_target_revision;
        break;
      }

      // optional uint32 ack_forward_target_revision = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_forward_target_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_forward_target_revision_)));
          set_has_ack_forward_target_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_routes;
        break;
      }

      // optional bytes routes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_routes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ack_peer_routes_revision;
        break;
      }

      // optional uint32 ack_peer_routes_revision = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack_peer_routes_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_peer_routes_revision_)));
          set_has_ack_peer_routes_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_from_relay_session_id;
        break;
      }

      // optional fixed32 from_relay_session_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_from_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
          set_has_from_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_to_relay_session_id;
        break;
      }

      // optional fixed32 to_relay_session_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_to_relay_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &to_relay_session_id_)));
          set_has_to_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_seq_num_r2r;
        break;
      }

      // optional uint32 seq_num_r2r = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_r2r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2r_)));
          set_has_seq_num_r2r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_seq_num_e2e;
        break;
      }

      // optional uint32 seq_num_e2e = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num_e2e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_e2e_)));
          set_has_seq_num_e2e();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quality_relay(), output);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quality_e2e(), output);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->ack_relay(i), output);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      4, this->legacy_ack_e2e(i), output);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional uint32 ack_forward_target_revision = 6;
  if (has_ack_forward_target_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ack_forward_target_revision(), output);
  }

  // optional bytes routes = 7;
  if (has_routes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->routes(), output);
  }

  // optional uint32 ack_peer_routes_revision = 8;
  if (has_ack_peer_routes_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ack_peer_routes_revision(), output);
  }

  // optional fixed32 from_relay_session_id = 22;
  if (has_from_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(22, this->from_relay_session_id(), output);
  }

  // optional fixed32 to_relay_session_id = 25;
  if (has_to_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(25, this->to_relay_session_id(), output);
  }

  // optional uint32 seq_num_r2r = 26;
  if (has_seq_num_r2r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->seq_num_r2r(), output);
  }

  // optional uint32 seq_num_e2e = 27;
  if (has_seq_num_e2e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->seq_num_e2e(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if (has_quality_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quality_relay(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if (has_quality_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quality_e2e(), target);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0; i < this->ack_relay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->ack_relay(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0; i < this->legacy_ack_e2e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(4, this->legacy_ack_e2e(i), target);
  }

  // optional uint32 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flags(), target);
  }

  // optional uint32 ack_forward_target_revision = 6;
  if (has_ack_forward_target_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ack_forward_target_revision(), target);
  }

  // optional bytes routes = 7;
  if (has_routes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->routes(), target);
  }

  // optional uint32 ack_peer_routes_revision = 8;
  if (has_ack_peer_routes_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ack_peer_routes_revision(), target);
  }

  // optional fixed32 from_relay_session_id = 22;
  if (has_from_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(22, this->from_relay_session_id(), target);
  }

  // optional fixed32 to_relay_session_id = 25;
  if (has_to_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(25, this->to_relay_session_id(), target);
  }

  // optional uint32 seq_num_r2r = 26;
  if (has_seq_num_r2r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->seq_num_r2r(), target);
  }

  // optional uint32 seq_num_e2e = 27;
  if (has_seq_num_e2e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->seq_num_e2e(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if (has_quality_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_relay());
    }

    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if (has_quality_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_e2e());
    }

    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 ack_forward_target_revision = 6;
    if (has_ack_forward_target_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_forward_target_revision());
    }

    // optional bytes routes = 7;
    if (has_routes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->routes());
    }

    // optional uint32 ack_peer_routes_revision = 8;
    if (has_ack_peer_routes_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_peer_routes_revision());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 seq_num_r2r = 26;
    if (has_seq_num_r2r()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2r());
    }

    // optional uint32 seq_num_e2e = 27;
    if (has_seq_num_e2e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_e2e());
    }

    // optional fixed32 from_relay_session_id = 22;
    if (has_from_relay_session_id()) {
      total_size += 2 + 4;
    }

    // optional fixed32 to_relay_session_id = 25;
    if (has_to_relay_session_id()) {
      total_size += 2 + 4;
    }

  }
  // repeated fixed32 ack_relay = 3;
  {
    int data_size = 0;
    data_size = 4 * this->ack_relay_size();
    total_size += 1 * this->ack_relay_size() + data_size;
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  {
    int data_size = 0;
    data_size = 4 * this->legacy_ack_e2e_size();
    total_size += 1 * this->legacy_ack_e2e_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsP2PRouterToRouter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramConnectionStatsP2PRouterToRouter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from) {
  GOOGLE_CHECK_NE(&from, this);
  ack_relay_.MergeFrom(from.ack_relay_);
  legacy_ack_e2e_.MergeFrom(from.legacy_ack_e2e_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality_relay()) {
      mutable_quality_relay()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_relay());
    }
    if (from.has_quality_e2e()) {
      mutable_quality_e2e()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.quality_e2e());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_ack_forward_target_revision()) {
      set_ack_forward_target_revision(from.ack_forward_target_revision());
    }
    if (from.has_routes()) {
      set_routes(from.routes());
    }
    if (from.has_ack_peer_routes_revision()) {
      set_ack_peer_routes_revision(from.ack_peer_routes_revision());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seq_num_r2r()) {
      set_seq_num_r2r(from.seq_num_r2r());
    }
    if (from.has_seq_num_e2e()) {
      set_seq_num_e2e(from.seq_num_e2e());
    }
    if (from.has_from_relay_session_id()) {
      set_from_relay_session_id(from.from_relay_session_id());
    }
    if (from.has_to_relay_session_id()) {
      set_to_relay_session_id(from.to_relay_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::Swap(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* other) {
  if (other != this) {
    std::swap(quality_relay_, other->quality_relay_);
    std::swap(quality_e2e_, other->quality_e2e_);
    ack_relay_.Swap(&other->ack_relay_);
    legacy_ack_e2e_.Swap(&other->legacy_ack_e2e_);
    std::swap(flags_, other->flags_);
    std::swap(ack_forward_target_revision_, other->ack_forward_target_revision_);
    std::swap(routes_, other->routes_);
    std::swap(ack_peer_routes_revision_, other->ack_peer_routes_revision_);
    std::swap(seq_num_r2r_, other->seq_num_r2r_);
    std::swap(seq_num_e2e_, other->seq_num_e2e_);
    std::swap(from_relay_session_id_, other->from_relay_session_id_);
    std::swap(to_relay_session_id_, other->to_relay_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PRouterToRouter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_descriptor_;
  metadata.reflection = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSteamDatagramP2PBadRouteRouterToRouter::kFromRelaySessionIdFieldNumber;
const int CMsgSteamDatagramP2PBadRouteRouterToRouter::kKludgePadFieldNumber;
#endif  // !_MSC_VER

CMsgSteamDatagramP2PBadRouteRouterToRouter::CMsgSteamDatagramP2PBadRouteRouterToRouter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::InitAsDefaultInstance() {
}

CMsgSteamDatagramP2PBadRouteRouterToRouter::CMsgSteamDatagramP2PBadRouteRouterToRouter(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::SharedCtor() {
  _cached_size_ = 0;
  from_relay_session_id_ = 0u;
  kludge_pad_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSteamDatagramP2PBadRouteRouterToRouter::~CMsgSteamDatagramP2PBadRouteRouterToRouter() {
  SharedDtor();
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramP2PBadRouteRouterToRouter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSteamDatagramP2PBadRouteRouterToRouter_descriptor_;
}

const CMsgSteamDatagramP2PBadRouteRouterToRouter& CMsgSteamDatagramP2PBadRouteRouterToRouter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  return *default_instance_;
}

CMsgSteamDatagramP2PBadRouteRouterToRouter* CMsgSteamDatagramP2PBadRouteRouterToRouter::default_instance_ = NULL;

CMsgSteamDatagramP2PBadRouteRouterToRouter* CMsgSteamDatagramP2PBadRouteRouterToRouter::New() const {
  return new CMsgSteamDatagramP2PBadRouteRouterToRouter;
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_relay_session_id_ = 0u;
    kludge_pad_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSteamDatagramP2PBadRouteRouterToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 from_relay_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_relay_session_id_)));
          set_has_from_relay_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(793)) goto parse_kludge_pad;
        break;
      }

      // optional fixed64 kludge_pad = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kludge_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &kludge_pad_)));
          set_has_kludge_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 from_relay_session_id = 1;
  if (has_from_relay_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->from_relay_session_id(), output);
  }

  // optional fixed64 kludge_pad = 99;
  if (has_kludge_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->kludge_pad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSteamDatagramP2PBadRouteRouterToRouter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 from_relay_session_id = 1;
  if (has_from_relay_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->from_relay_session_id(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if (has_kludge_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->kludge_pad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSteamDatagramP2PBadRouteRouterToRouter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 from_relay_session_id = 1;
    if (has_from_relay_session_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 kludge_pad = 99;
    if (has_kludge_pad()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSteamDatagramP2PBadRouteRouterToRouter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSteamDatagramP2PBadRouteRouterToRouter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_relay_session_id()) {
      set_from_relay_session_id(from.from_relay_session_id());
    }
    if (from.has_kludge_pad()) {
      set_kludge_pad(from.kludge_pad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramP2PBadRouteRouterToRouter::IsInitialized() const {

  return true;
}

void CMsgSteamDatagramP2PBadRouteRouterToRouter::Swap(CMsgSteamDatagramP2PBadRouteRouterToRouter* other) {
  if (other != this) {
    std::swap(from_relay_session_id_, other->from_relay_session_id_);
    std::swap(kludge_pad_, other->kludge_pad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSteamDatagramP2PBadRouteRouterToRouter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSteamDatagramP2PBadRouteRouterToRouter_descriptor_;
  metadata.reflection = CMsgSteamDatagramP2PBadRouteRouterToRouter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
