// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgProtoBufHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgProtoBufHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMulti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMulti_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgProtobufWrapped_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgProtobufWrapped_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAuthTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAuthTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCDDBAppDetailCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCDDBAppDetailCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAppRights_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAppRights_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fbase_2eproto() {
  protobuf_AddDesc_steammessages_5fbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_base.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgProtoBufHeader_descriptor_ = file->message_type(0);
  static const int CMsgProtoBufHeader_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, routing_appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, jobid_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, jobid_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, target_job_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, auth_account_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, token_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, admin_spoofing_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, transport_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, publisher_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, sysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, trace_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, webapi_key_id_),
  };
  CMsgProtoBufHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgProtoBufHeader_descriptor_,
      CMsgProtoBufHeader::default_instance_,
      CMsgProtoBufHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgProtoBufHeader));
  CMsgMulti_descriptor_ = file->message_type(1);
  static const int CMsgMulti_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, size_unzipped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, message_body_),
  };
  CMsgMulti_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMulti_descriptor_,
      CMsgMulti::default_instance_,
      CMsgMulti_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMulti));
  CMsgProtobufWrapped_descriptor_ = file->message_type(2);
  static const int CMsgProtobufWrapped_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, message_body_),
  };
  CMsgProtobufWrapped_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgProtobufWrapped_descriptor_,
      CMsgProtobufWrapped::default_instance_,
      CMsgProtobufWrapped_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgProtobufWrapped));
  CMsgAuthTicket_descriptor_ = file->message_type(3);
  static const int CMsgAuthTicket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, estate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, steamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, h_steam_pipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, ticket_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, ticket_),
  };
  CMsgAuthTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAuthTicket_descriptor_,
      CMsgAuthTicket::default_instance_,
      CMsgAuthTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAuthTicket));
  CCDDBAppDetailCommon_descriptor_ = file->message_type(4);
  static const int CCDDBAppDetailCommon_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, logo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, logo_small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, tool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, demo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, media_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, community_visible_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, friendly_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, propagation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, has_adult_content_),
  };
  CCDDBAppDetailCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCDDBAppDetailCommon_descriptor_,
      CCDDBAppDetailCommon::default_instance_,
      CCDDBAppDetailCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCDDBAppDetailCommon));
  CMsgAppRights_descriptor_ = file->message_type(5);
  static const int CMsgAppRights_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, edit_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, publish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, view_error_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, download_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, upload_cdkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, generate_cdkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, view_financials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_ceg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_signing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_cdkeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, edit_marketing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, economy_support_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, economy_support_supervisor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_pricing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, broadcast_live_),
  };
  CMsgAppRights_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAppRights_descriptor_,
      CMsgAppRights::default_instance_,
      CMsgAppRights_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAppRights));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgProtoBufHeader_descriptor_, &CMsgProtoBufHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMulti_descriptor_, &CMsgMulti::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgProtobufWrapped_descriptor_, &CMsgProtobufWrapped::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAuthTicket_descriptor_, &CMsgAuthTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCDDBAppDetailCommon_descriptor_, &CCDDBAppDetailCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAppRights_descriptor_, &CMsgAppRights::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fbase_2eproto() {
  delete CMsgProtoBufHeader::default_instance_;
  delete CMsgProtoBufHeader_reflection_;
  delete CMsgMulti::default_instance_;
  delete CMsgMulti_reflection_;
  delete CMsgProtobufWrapped::default_instance_;
  delete CMsgProtobufWrapped_reflection_;
  delete CMsgAuthTicket::default_instance_;
  delete CMsgAuthTicket_reflection_;
  delete CCDDBAppDetailCommon::default_instance_;
  delete CCDDBAppDetailCommon_reflection_;
  delete CMsgAppRights::default_instance_;
  delete CMsgAppRights_reflection_;
}

void protobuf_AddDesc_steammessages_5fbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030steammessages_base.proto\032 google/proto"
    "buf/descriptor.proto\"\370\003\n\022CMsgProtoBufHea"
    "der\022\017\n\007steamid\030\001 \001(\006\022\030\n\020client_sessionid"
    "\030\002 \001(\005\022\025\n\rrouting_appid\030\003 \001(\r\022*\n\014jobid_s"
    "ource\030\n \001(\006:\02418446744073709551615\022*\n\014job"
    "id_target\030\013 \001(\006:\02418446744073709551615\022\027\n"
    "\017target_job_name\030\014 \001(\t\022\017\n\007seq_num\030\030 \001(\005\022"
    "\022\n\007eresult\030\r \001(\005:\0012\022\025\n\rerror_message\030\016 \001"
    "(\t\022\n\n\002ip\030\017 \001(\r\022\032\n\022auth_account_flags\030\020 \001"
    "(\r\022\024\n\014token_source\030\026 \001(\r\022\033\n\023admin_spoofi"
    "ng_user\030\027 \001(\010\022\032\n\017transport_error\030\021 \001(\005:\001"
    "1\022\'\n\tmessageid\030\022 \001(\004:\024184467440737095516"
    "15\022\032\n\022publisher_group_id\030\023 \001(\r\022\r\n\005sysid\030"
    "\024 \001(\r\022\021\n\ttrace_tag\030\025 \001(\004\022\025\n\rwebapi_key_i"
    "d\030\031 \001(\r\"8\n\tCMsgMulti\022\025\n\rsize_unzipped\030\001 "
    "\001(\r\022\024\n\014message_body\030\002 \001(\014\"+\n\023CMsgProtobu"
    "fWrapped\022\024\n\014message_body\030\001 \001(\014\"\217\001\n\016CMsgA"
    "uthTicket\022\016\n\006estate\030\001 \001(\r\022\022\n\007eresult\030\002 \001"
    "(\r:\0012\022\017\n\007steamid\030\003 \001(\006\022\016\n\006gameid\030\004 \001(\006\022\024"
    "\n\014h_steam_pipe\030\005 \001(\r\022\022\n\nticket_crc\030\006 \001(\r"
    "\022\016\n\006ticket\030\007 \001(\014\"\366\001\n\024CCDDBAppDetailCommo"
    "n\022\r\n\005appid\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003"
    " \001(\t\022\014\n\004logo\030\004 \001(\t\022\022\n\nlogo_small\030\005 \001(\t\022\014"
    "\n\004tool\030\006 \001(\010\022\014\n\004demo\030\007 \001(\010\022\r\n\005media\030\010 \001("
    "\010\022\037\n\027community_visible_stats\030\t \001(\010\022\025\n\rfr"
    "iendly_name\030\n \001(\t\022\023\n\013propagation\030\013 \001(\t\022\031"
    "\n\021has_adult_content\030\014 \001(\010\"\357\002\n\rCMsgAppRig"
    "hts\022\021\n\tedit_info\030\001 \001(\010\022\017\n\007publish\030\002 \001(\010\022"
    "\027\n\017view_error_data\030\003 \001(\010\022\020\n\010download\030\004 \001"
    "(\010\022\025\n\rupload_cdkeys\030\005 \001(\010\022\027\n\017generate_cd"
    "keys\030\006 \001(\010\022\027\n\017view_financials\030\007 \001(\010\022\022\n\nm"
    "anage_ceg\030\010 \001(\010\022\026\n\016manage_signing\030\t \001(\010\022"
    "\025\n\rmanage_cdkeys\030\n \001(\010\022\026\n\016edit_marketing"
    "\030\013 \001(\010\022\027\n\017economy_support\030\014 \001(\010\022\"\n\032econo"
    "my_support_supervisor\030\r \001(\010\022\026\n\016manage_pr"
    "icing\030\016 \001(\010\022\026\n\016broadcast_live\030\017 \001(\010:A\n\022m"
    "sgpool_soft_limit\022\037.google.protobuf.Mess"
    "ageOptions\030\320\206\003 \001(\005:\00232:B\n\022msgpool_hard_l"
    "imit\022\037.google.protobuf.MessageOptions\030\321\206"
    "\003 \001(\005:\003384B\005H\001\200\001\000", 1577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_base.proto", &protobuf_RegisterTypes);
  CMsgProtoBufHeader::default_instance_ = new CMsgProtoBufHeader();
  CMsgMulti::default_instance_ = new CMsgMulti();
  CMsgProtobufWrapped::default_instance_ = new CMsgProtobufWrapped();
  CMsgAuthTicket::default_instance_ = new CMsgAuthTicket();
  CCDDBAppDetailCommon::default_instance_ = new CCDDBAppDetailCommon();
  CMsgAppRights::default_instance_ = new CMsgAppRights();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    50000, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    50001, 5, false, false);
  CMsgProtoBufHeader::default_instance_->InitAsDefaultInstance();
  CMsgMulti::default_instance_->InitAsDefaultInstance();
  CMsgProtobufWrapped::default_instance_->InitAsDefaultInstance();
  CMsgAuthTicket::default_instance_->InitAsDefaultInstance();
  CCDDBAppDetailCommon::default_instance_->InitAsDefaultInstance();
  CMsgAppRights::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fbase_2eproto {
  StaticDescriptorInitializer_steammessages_5fbase_2eproto() {
    protobuf_AddDesc_steammessages_5fbase_2eproto();
  }
} static_descriptor_initializer_steammessages_5fbase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgProtoBufHeader::kSteamidFieldNumber;
const int CMsgProtoBufHeader::kClientSessionidFieldNumber;
const int CMsgProtoBufHeader::kRoutingAppidFieldNumber;
const int CMsgProtoBufHeader::kJobidSourceFieldNumber;
const int CMsgProtoBufHeader::kJobidTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
const int CMsgProtoBufHeader::kSeqNumFieldNumber;
const int CMsgProtoBufHeader::kEresultFieldNumber;
const int CMsgProtoBufHeader::kErrorMessageFieldNumber;
const int CMsgProtoBufHeader::kIpFieldNumber;
const int CMsgProtoBufHeader::kAuthAccountFlagsFieldNumber;
const int CMsgProtoBufHeader::kTokenSourceFieldNumber;
const int CMsgProtoBufHeader::kAdminSpoofingUserFieldNumber;
const int CMsgProtoBufHeader::kTransportErrorFieldNumber;
const int CMsgProtoBufHeader::kMessageidFieldNumber;
const int CMsgProtoBufHeader::kPublisherGroupIdFieldNumber;
const int CMsgProtoBufHeader::kSysidFieldNumber;
const int CMsgProtoBufHeader::kTraceTagFieldNumber;
const int CMsgProtoBufHeader::kWebapiKeyIdFieldNumber;
#endif  // !_MSC_VER

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgProtoBufHeader::InitAsDefaultInstance() {
}

CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgProtoBufHeader::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  client_sessionid_ = 0;
  routing_appid_ = 0u;
  jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_num_ = 0;
  eresult_ = 2;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = 0u;
  auth_account_flags_ = 0u;
  token_source_ = 0u;
  admin_spoofing_user_ = false;
  transport_error_ = 1;
  messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
  publisher_group_id_ = 0u;
  sysid_ = 0u;
  trace_tag_ = GOOGLE_ULONGLONG(0);
  webapi_key_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_job_name_;
  }
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtoBufHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgProtoBufHeader_descriptor_;
}

const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgProtoBufHeader* CMsgProtoBufHeader::default_instance_ = NULL;

CMsgProtoBufHeader* CMsgProtoBufHeader::New() const {
  return new CMsgProtoBufHeader;
}

void CMsgProtoBufHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    client_sessionid_ = 0;
    routing_appid_ = 0u;
    jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
    jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
    if (has_target_job_name()) {
      if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
        target_job_name_->clear();
      }
    }
    seq_num_ = 0;
    eresult_ = 2;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
    ip_ = 0u;
    auth_account_flags_ = 0u;
    token_source_ = 0u;
    admin_spoofing_user_ = false;
    transport_error_ = 1;
    messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
    publisher_group_id_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sysid_ = 0u;
    trace_tag_ = GOOGLE_ULONGLONG(0);
    webapi_key_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_sessionid;
        break;
      }

      // optional int32 client_sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_sessionid_)));
          set_has_client_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_routing_appid;
        break;
      }

      // optional uint32 routing_appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routing_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_appid_)));
          set_has_routing_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_jobid_source;
        break;
      }

      // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jobid_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_source_)));
          set_has_jobid_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_jobid_target;
        break;
      }

      // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jobid_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_target_)));
          set_has_jobid_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_target_job_name;
        break;
      }

      // optional string target_job_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_job_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_job_name().data(), this->target_job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_error_message;
        break;
      }

      // optional string error_message = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_auth_account_flags;
        break;
      }

      // optional uint32 auth_account_flags = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_account_flags_)));
          set_has_auth_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_transport_error;
        break;
      }

      // optional int32 transport_error = 17 [default = 1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transport_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_error_)));
          set_has_transport_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_messageid;
        break;
      }

      // optional uint64 messageid = 18 [default = 18446744073709551615];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_publisher_group_id;
        break;
      }

      // optional uint32 publisher_group_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publisher_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_group_id_)));
          set_has_publisher_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_sysid;
        break;
      }

      // optional uint32 sysid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sysid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysid_)));
          set_has_sysid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_trace_tag;
        break;
      }

      // optional uint64 trace_tag = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trace_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_tag_)));
          set_has_trace_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_token_source;
        break;
      }

      // optional uint32 token_source = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_source_)));
          set_has_token_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_admin_spoofing_user;
        break;
      }

      // optional bool admin_spoofing_user = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_spoofing_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_spoofing_user_)));
          set_has_admin_spoofing_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_seq_num;
        break;
      }

      // optional int32 seq_num = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_num_)));
          set_has_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_webapi_key_id;
        break;
      }

      // optional uint32 webapi_key_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webapi_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webapi_key_id_)));
          set_has_webapi_key_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 client_sessionid = 2;
  if (has_client_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_sessionid(), output);
  }

  // optional uint32 routing_appid = 3;
  if (has_routing_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->routing_appid(), output);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (has_jobid_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->jobid_source(), output);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (has_jobid_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->jobid_target(), output);
  }

  // optional string target_job_name = 12;
  if (has_target_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->target_job_name(), output);
  }

  // optional int32 eresult = 13 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eresult(), output);
  }

  // optional string error_message = 14;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->error_message(), output);
  }

  // optional uint32 ip = 15;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ip(), output);
  }

  // optional uint32 auth_account_flags = 16;
  if (has_auth_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->auth_account_flags(), output);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (has_transport_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->transport_error(), output);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->messageid(), output);
  }

  // optional uint32 publisher_group_id = 19;
  if (has_publisher_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->publisher_group_id(), output);
  }

  // optional uint32 sysid = 20;
  if (has_sysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->sysid(), output);
  }

  // optional uint64 trace_tag = 21;
  if (has_trace_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->trace_tag(), output);
  }

  // optional uint32 token_source = 22;
  if (has_token_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->token_source(), output);
  }

  // optional bool admin_spoofing_user = 23;
  if (has_admin_spoofing_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->admin_spoofing_user(), output);
  }

  // optional int32 seq_num = 24;
  if (has_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->seq_num(), output);
  }

  // optional uint32 webapi_key_id = 25;
  if (has_webapi_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->webapi_key_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgProtoBufHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 client_sessionid = 2;
  if (has_client_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_sessionid(), target);
  }

  // optional uint32 routing_appid = 3;
  if (has_routing_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->routing_appid(), target);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (has_jobid_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->jobid_source(), target);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (has_jobid_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->jobid_target(), target);
  }

  // optional string target_job_name = 12;
  if (has_target_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->eresult(), target);
  }

  // optional string error_message = 14;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->error_message(), target);
  }

  // optional uint32 ip = 15;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ip(), target);
  }

  // optional uint32 auth_account_flags = 16;
  if (has_auth_account_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->auth_account_flags(), target);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (has_transport_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->transport_error(), target);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->messageid(), target);
  }

  // optional uint32 publisher_group_id = 19;
  if (has_publisher_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->publisher_group_id(), target);
  }

  // optional uint32 sysid = 20;
  if (has_sysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->sysid(), target);
  }

  // optional uint64 trace_tag = 21;
  if (has_trace_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->trace_tag(), target);
  }

  // optional uint32 token_source = 22;
  if (has_token_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->token_source(), target);
  }

  // optional bool admin_spoofing_user = 23;
  if (has_admin_spoofing_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->admin_spoofing_user(), target);
  }

  // optional int32 seq_num = 24;
  if (has_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->seq_num(), target);
  }

  // optional uint32 webapi_key_id = 25;
  if (has_webapi_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->webapi_key_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgProtoBufHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 client_sessionid = 2;
    if (has_client_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_sessionid());
    }

    // optional uint32 routing_appid = 3;
    if (has_routing_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_appid());
    }

    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    if (has_jobid_source()) {
      total_size += 1 + 8;
    }

    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    if (has_jobid_target()) {
      total_size += 1 + 8;
    }

    // optional string target_job_name = 12;
    if (has_target_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }

    // optional int32 seq_num = 24;
    if (has_seq_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_num());
    }

    // optional int32 eresult = 13 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string error_message = 14;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional uint32 ip = 15;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 auth_account_flags = 16;
    if (has_auth_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_account_flags());
    }

    // optional uint32 token_source = 22;
    if (has_token_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_source());
    }

    // optional bool admin_spoofing_user = 23;
    if (has_admin_spoofing_user()) {
      total_size += 2 + 1;
    }

    // optional int32 transport_error = 17 [default = 1];
    if (has_transport_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_error());
    }

    // optional uint64 messageid = 18 [default = 18446744073709551615];
    if (has_messageid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->messageid());
    }

    // optional uint32 publisher_group_id = 19;
    if (has_publisher_group_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_group_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 sysid = 20;
    if (has_sysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sysid());
    }

    // optional uint64 trace_tag = 21;
    if (has_trace_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trace_tag());
    }

    // optional uint32 webapi_key_id = 25;
    if (has_webapi_key_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webapi_key_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgProtoBufHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_client_sessionid()) {
      set_client_sessionid(from.client_sessionid());
    }
    if (from.has_routing_appid()) {
      set_routing_appid(from.routing_appid());
    }
    if (from.has_jobid_source()) {
      set_jobid_source(from.jobid_source());
    }
    if (from.has_jobid_target()) {
      set_jobid_target(from.jobid_target());
    }
    if (from.has_target_job_name()) {
      set_target_job_name(from.target_job_name());
    }
    if (from.has_seq_num()) {
      set_seq_num(from.seq_num());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_auth_account_flags()) {
      set_auth_account_flags(from.auth_account_flags());
    }
    if (from.has_token_source()) {
      set_token_source(from.token_source());
    }
    if (from.has_admin_spoofing_user()) {
      set_admin_spoofing_user(from.admin_spoofing_user());
    }
    if (from.has_transport_error()) {
      set_transport_error(from.transport_error());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_publisher_group_id()) {
      set_publisher_group_id(from.publisher_group_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sysid()) {
      set_sysid(from.sysid());
    }
    if (from.has_trace_tag()) {
      set_trace_tag(from.trace_tag());
    }
    if (from.has_webapi_key_id()) {
      set_webapi_key_id(from.webapi_key_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgProtoBufHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {

  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(client_sessionid_, other->client_sessionid_);
    std::swap(routing_appid_, other->routing_appid_);
    std::swap(jobid_source_, other->jobid_source_);
    std::swap(jobid_target_, other->jobid_target_);
    std::swap(target_job_name_, other->target_job_name_);
    std::swap(seq_num_, other->seq_num_);
    std::swap(eresult_, other->eresult_);
    std::swap(error_message_, other->error_message_);
    std::swap(ip_, other->ip_);
    std::swap(auth_account_flags_, other->auth_account_flags_);
    std::swap(token_source_, other->token_source_);
    std::swap(admin_spoofing_user_, other->admin_spoofing_user_);
    std::swap(transport_error_, other->transport_error_);
    std::swap(messageid_, other->messageid_);
    std::swap(publisher_group_id_, other->publisher_group_id_);
    std::swap(sysid_, other->sysid_);
    std::swap(trace_tag_, other->trace_tag_);
    std::swap(webapi_key_id_, other->webapi_key_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgProtoBufHeader_descriptor_;
  metadata.reflection = CMsgProtoBufHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMulti::kSizeUnzippedFieldNumber;
const int CMsgMulti::kMessageBodyFieldNumber;
#endif  // !_MSC_VER

CMsgMulti::CMsgMulti()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMulti::InitAsDefaultInstance() {
}

CMsgMulti::CMsgMulti(const CMsgMulti& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMulti::SharedCtor() {
  _cached_size_ = 0;
  size_unzipped_ = 0u;
  message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMulti::~CMsgMulti() {
  SharedDtor();
}

void CMsgMulti::SharedDtor() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (this != default_instance_) {
  }
}

void CMsgMulti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMulti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMulti_descriptor_;
}

const CMsgMulti& CMsgMulti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgMulti* CMsgMulti::default_instance_ = NULL;

CMsgMulti* CMsgMulti::New() const {
  return new CMsgMulti;
}

void CMsgMulti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_unzipped_ = 0u;
    if (has_message_body()) {
      if (message_body_ != &::google::protobuf::internal::kEmptyString) {
        message_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMulti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size_unzipped = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_unzipped_)));
          set_has_size_unzipped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message_body;
        break;
      }

      // optional bytes message_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMulti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 size_unzipped = 1;
  if (has_size_unzipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size_unzipped(), output);
  }

  // optional bytes message_body = 2;
  if (has_message_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMulti::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 size_unzipped = 1;
  if (has_size_unzipped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size_unzipped(), target);
  }

  // optional bytes message_body = 2;
  if (has_message_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMulti::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 size_unzipped = 1;
    if (has_size_unzipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_unzipped());
    }

    // optional bytes message_body = 2;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMulti::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMulti* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMulti*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMulti::MergeFrom(const CMsgMulti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size_unzipped()) {
      set_size_unzipped(from.size_unzipped());
    }
    if (from.has_message_body()) {
      set_message_body(from.message_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMulti::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMulti::CopyFrom(const CMsgMulti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMulti::IsInitialized() const {

  return true;
}

void CMsgMulti::Swap(CMsgMulti* other) {
  if (other != this) {
    std::swap(size_unzipped_, other->size_unzipped_);
    std::swap(message_body_, other->message_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMulti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMulti_descriptor_;
  metadata.reflection = CMsgMulti_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgProtobufWrapped::kMessageBodyFieldNumber;
#endif  // !_MSC_VER

CMsgProtobufWrapped::CMsgProtobufWrapped()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgProtobufWrapped::InitAsDefaultInstance() {
}

CMsgProtobufWrapped::CMsgProtobufWrapped(const CMsgProtobufWrapped& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgProtobufWrapped::SharedCtor() {
  _cached_size_ = 0;
  message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgProtobufWrapped::~CMsgProtobufWrapped() {
  SharedDtor();
}

void CMsgProtobufWrapped::SharedDtor() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  if (this != default_instance_) {
  }
}

void CMsgProtobufWrapped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtobufWrapped::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgProtobufWrapped_descriptor_;
}

const CMsgProtobufWrapped& CMsgProtobufWrapped::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgProtobufWrapped* CMsgProtobufWrapped::default_instance_ = NULL;

CMsgProtobufWrapped* CMsgProtobufWrapped::New() const {
  return new CMsgProtobufWrapped;
}

void CMsgProtobufWrapped::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message_body()) {
      if (message_body_ != &::google::protobuf::internal::kEmptyString) {
        message_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgProtobufWrapped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message_body = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgProtobufWrapped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes message_body = 1;
  if (has_message_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->message_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgProtobufWrapped::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes message_body = 1;
  if (has_message_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgProtobufWrapped::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message_body = 1;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtobufWrapped::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgProtobufWrapped* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgProtobufWrapped*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgProtobufWrapped::MergeFrom(const CMsgProtobufWrapped& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_body()) {
      set_message_body(from.message_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgProtobufWrapped::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtobufWrapped::CopyFrom(const CMsgProtobufWrapped& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtobufWrapped::IsInitialized() const {

  return true;
}

void CMsgProtobufWrapped::Swap(CMsgProtobufWrapped* other) {
  if (other != this) {
    std::swap(message_body_, other->message_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgProtobufWrapped::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgProtobufWrapped_descriptor_;
  metadata.reflection = CMsgProtobufWrapped_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAuthTicket::kEstateFieldNumber;
const int CMsgAuthTicket::kEresultFieldNumber;
const int CMsgAuthTicket::kSteamidFieldNumber;
const int CMsgAuthTicket::kGameidFieldNumber;
const int CMsgAuthTicket::kHSteamPipeFieldNumber;
const int CMsgAuthTicket::kTicketCrcFieldNumber;
const int CMsgAuthTicket::kTicketFieldNumber;
#endif  // !_MSC_VER

CMsgAuthTicket::CMsgAuthTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAuthTicket::InitAsDefaultInstance() {
}

CMsgAuthTicket::CMsgAuthTicket(const CMsgAuthTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  estate_ = 0u;
  eresult_ = 2u;
  steamid_ = GOOGLE_ULONGLONG(0);
  gameid_ = GOOGLE_ULONGLONG(0);
  h_steam_pipe_ = 0u;
  ticket_crc_ = 0u;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAuthTicket::~CMsgAuthTicket() {
  SharedDtor();
}

void CMsgAuthTicket::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAuthTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAuthTicket_descriptor_;
}

const CMsgAuthTicket& CMsgAuthTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgAuthTicket* CMsgAuthTicket::default_instance_ = NULL;

CMsgAuthTicket* CMsgAuthTicket::New() const {
  return new CMsgAuthTicket;
}

void CMsgAuthTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    estate_ = 0u;
    eresult_ = 2u;
    steamid_ = GOOGLE_ULONGLONG(0);
    gameid_ = GOOGLE_ULONGLONG(0);
    h_steam_pipe_ = 0u;
    ticket_crc_ = 0u;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 estate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
          set_has_estate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gameid;
        break;
      }

      // optional fixed64 gameid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_h_steam_pipe;
        break;
      }

      // optional uint32 h_steam_pipe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_steam_pipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_steam_pipe_)));
          set_has_h_steam_pipe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ticket_crc;
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
          set_has_ticket_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 estate = 1;
  if (has_estate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->estate(), output);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional fixed64 steamid = 3;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid(), output);
  }

  // optional fixed64 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameid(), output);
  }

  // optional uint32 h_steam_pipe = 5;
  if (has_h_steam_pipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->h_steam_pipe(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (has_ticket_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional bytes ticket = 7;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAuthTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 estate = 1;
  if (has_estate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->estate(), target);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (has_eresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  // optional fixed64 steamid = 3;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid(), target);
  }

  // optional fixed64 gameid = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameid(), target);
  }

  // optional uint32 h_steam_pipe = 5;
  if (has_h_steam_pipe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->h_steam_pipe(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (has_ticket_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ticket_crc(), target);
  }

  // optional bytes ticket = 7;
  if (has_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAuthTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 estate = 1;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional fixed64 steamid = 3;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameid = 4;
    if (has_gameid()) {
      total_size += 1 + 8;
    }

    // optional uint32 h_steam_pipe = 5;
    if (has_h_steam_pipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_steam_pipe());
    }

    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional bytes ticket = 7;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAuthTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAuthTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAuthTicket::MergeFrom(const CMsgAuthTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_estate()) {
      set_estate(from.estate());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_h_steam_pipe()) {
      set_h_steam_pipe(from.h_steam_pipe());
    }
    if (from.has_ticket_crc()) {
      set_ticket_crc(from.ticket_crc());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthTicket::CopyFrom(const CMsgAuthTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthTicket::IsInitialized() const {

  return true;
}

void CMsgAuthTicket::Swap(CMsgAuthTicket* other) {
  if (other != this) {
    std::swap(estate_, other->estate_);
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_, other->steamid_);
    std::swap(gameid_, other->gameid_);
    std::swap(h_steam_pipe_, other->h_steam_pipe_);
    std::swap(ticket_crc_, other->ticket_crc_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAuthTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAuthTicket_descriptor_;
  metadata.reflection = CMsgAuthTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCDDBAppDetailCommon::kAppidFieldNumber;
const int CCDDBAppDetailCommon::kNameFieldNumber;
const int CCDDBAppDetailCommon::kIconFieldNumber;
const int CCDDBAppDetailCommon::kLogoFieldNumber;
const int CCDDBAppDetailCommon::kLogoSmallFieldNumber;
const int CCDDBAppDetailCommon::kToolFieldNumber;
const int CCDDBAppDetailCommon::kDemoFieldNumber;
const int CCDDBAppDetailCommon::kMediaFieldNumber;
const int CCDDBAppDetailCommon::kCommunityVisibleStatsFieldNumber;
const int CCDDBAppDetailCommon::kFriendlyNameFieldNumber;
const int CCDDBAppDetailCommon::kPropagationFieldNumber;
const int CCDDBAppDetailCommon::kHasAdultContentFieldNumber;
#endif  // !_MSC_VER

CCDDBAppDetailCommon::CCDDBAppDetailCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCDDBAppDetailCommon::InitAsDefaultInstance() {
}

CCDDBAppDetailCommon::CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCDDBAppDetailCommon::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logo_small_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tool_ = false;
  demo_ = false;
  media_ = false;
  community_visible_stats_ = false;
  friendly_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  propagation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_adult_content_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCDDBAppDetailCommon::~CCDDBAppDetailCommon() {
  SharedDtor();
}

void CCDDBAppDetailCommon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_;
  }
  if (logo_small_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_small_;
  }
  if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friendly_name_;
  }
  if (propagation_ != &::google::protobuf::internal::kEmptyString) {
    delete propagation_;
  }
  if (this != default_instance_) {
  }
}

void CCDDBAppDetailCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCDDBAppDetailCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCDDBAppDetailCommon_descriptor_;
}

const CCDDBAppDetailCommon& CCDDBAppDetailCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CCDDBAppDetailCommon* CCDDBAppDetailCommon::default_instance_ = NULL;

CCDDBAppDetailCommon* CCDDBAppDetailCommon::New() const {
  return new CCDDBAppDetailCommon;
}

void CCDDBAppDetailCommon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_logo()) {
      if (logo_ != &::google::protobuf::internal::kEmptyString) {
        logo_->clear();
      }
    }
    if (has_logo_small()) {
      if (logo_small_ != &::google::protobuf::internal::kEmptyString) {
        logo_small_->clear();
      }
    }
    tool_ = false;
    demo_ = false;
    media_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    community_visible_stats_ = false;
    if (has_friendly_name()) {
      if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
        friendly_name_->clear();
      }
    }
    if (has_propagation()) {
      if (propagation_ != &::google::protobuf::internal::kEmptyString) {
        propagation_->clear();
      }
    }
    has_adult_content_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCDDBAppDetailCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }

      // optional string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logo;
        break;
      }

      // optional string logo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logo().data(), this->logo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_logo_small;
        break;
      }

      // optional string logo_small = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logo_small:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_small()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logo_small().data(), this->logo_small().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tool;
        break;
      }

      // optional bool tool = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tool_)));
          set_has_tool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_demo;
        break;
      }

      // optional bool demo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_demo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &demo_)));
          set_has_demo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_media;
        break;
      }

      // optional bool media = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_media:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &media_)));
          set_has_media();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_community_visible_stats;
        break;
      }

      // optional bool community_visible_stats = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_community_visible_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &community_visible_stats_)));
          set_has_community_visible_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_friendly_name;
        break;
      }

      // optional string friendly_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendly_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendly_name().data(), this->friendly_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_propagation;
        break;
      }

      // optional string propagation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propagation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propagation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->propagation().data(), this->propagation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_has_adult_content;
        break;
      }

      // optional bool has_adult_content = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_adult_content:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_adult_content_)));
          set_has_has_adult_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCDDBAppDetailCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }

  // optional string logo = 4;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logo().data(), this->logo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->logo(), output);
  }

  // optional string logo_small = 5;
  if (has_logo_small()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logo_small().data(), this->logo_small().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->logo_small(), output);
  }

  // optional bool tool = 6;
  if (has_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tool(), output);
  }

  // optional bool demo = 7;
  if (has_demo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->demo(), output);
  }

  // optional bool media = 8;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->media(), output);
  }

  // optional bool community_visible_stats = 9;
  if (has_community_visible_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->community_visible_stats(), output);
  }

  // optional string friendly_name = 10;
  if (has_friendly_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->friendly_name(), output);
  }

  // optional string propagation = 11;
  if (has_propagation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->propagation().data(), this->propagation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->propagation(), output);
  }

  // optional bool has_adult_content = 12;
  if (has_has_adult_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->has_adult_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCDDBAppDetailCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }

  // optional string logo = 4;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logo().data(), this->logo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logo(), target);
  }

  // optional string logo_small = 5;
  if (has_logo_small()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logo_small().data(), this->logo_small().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->logo_small(), target);
  }

  // optional bool tool = 6;
  if (has_tool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tool(), target);
  }

  // optional bool demo = 7;
  if (has_demo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->demo(), target);
  }

  // optional bool media = 8;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->media(), target);
  }

  // optional bool community_visible_stats = 9;
  if (has_community_visible_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->community_visible_stats(), target);
  }

  // optional string friendly_name = 10;
  if (has_friendly_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->friendly_name(), target);
  }

  // optional string propagation = 11;
  if (has_propagation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->propagation().data(), this->propagation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->propagation(), target);
  }

  // optional bool has_adult_content = 12;
  if (has_has_adult_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->has_adult_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCDDBAppDetailCommon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo());
    }

    // optional string logo_small = 5;
    if (has_logo_small()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_small());
    }

    // optional bool tool = 6;
    if (has_tool()) {
      total_size += 1 + 1;
    }

    // optional bool demo = 7;
    if (has_demo()) {
      total_size += 1 + 1;
    }

    // optional bool media = 8;
    if (has_media()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool community_visible_stats = 9;
    if (has_community_visible_stats()) {
      total_size += 1 + 1;
    }

    // optional string friendly_name = 10;
    if (has_friendly_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendly_name());
    }

    // optional string propagation = 11;
    if (has_propagation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propagation());
    }

    // optional bool has_adult_content = 12;
    if (has_has_adult_content()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDDBAppDetailCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCDDBAppDetailCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCDDBAppDetailCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCDDBAppDetailCommon::MergeFrom(const CCDDBAppDetailCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_logo_small()) {
      set_logo_small(from.logo_small());
    }
    if (from.has_tool()) {
      set_tool(from.tool());
    }
    if (from.has_demo()) {
      set_demo(from.demo());
    }
    if (from.has_media()) {
      set_media(from.media());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_community_visible_stats()) {
      set_community_visible_stats(from.community_visible_stats());
    }
    if (from.has_friendly_name()) {
      set_friendly_name(from.friendly_name());
    }
    if (from.has_propagation()) {
      set_propagation(from.propagation());
    }
    if (from.has_has_adult_content()) {
      set_has_adult_content(from.has_adult_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCDDBAppDetailCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDDBAppDetailCommon::CopyFrom(const CCDDBAppDetailCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDDBAppDetailCommon::IsInitialized() const {

  return true;
}

void CCDDBAppDetailCommon::Swap(CCDDBAppDetailCommon* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(logo_, other->logo_);
    std::swap(logo_small_, other->logo_small_);
    std::swap(tool_, other->tool_);
    std::swap(demo_, other->demo_);
    std::swap(media_, other->media_);
    std::swap(community_visible_stats_, other->community_visible_stats_);
    std::swap(friendly_name_, other->friendly_name_);
    std::swap(propagation_, other->propagation_);
    std::swap(has_adult_content_, other->has_adult_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCDDBAppDetailCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCDDBAppDetailCommon_descriptor_;
  metadata.reflection = CCDDBAppDetailCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAppRights::kEditInfoFieldNumber;
const int CMsgAppRights::kPublishFieldNumber;
const int CMsgAppRights::kViewErrorDataFieldNumber;
const int CMsgAppRights::kDownloadFieldNumber;
const int CMsgAppRights::kUploadCdkeysFieldNumber;
const int CMsgAppRights::kGenerateCdkeysFieldNumber;
const int CMsgAppRights::kViewFinancialsFieldNumber;
const int CMsgAppRights::kManageCegFieldNumber;
const int CMsgAppRights::kManageSigningFieldNumber;
const int CMsgAppRights::kManageCdkeysFieldNumber;
const int CMsgAppRights::kEditMarketingFieldNumber;
const int CMsgAppRights::kEconomySupportFieldNumber;
const int CMsgAppRights::kEconomySupportSupervisorFieldNumber;
const int CMsgAppRights::kManagePricingFieldNumber;
const int CMsgAppRights::kBroadcastLiveFieldNumber;
#endif  // !_MSC_VER

CMsgAppRights::CMsgAppRights()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAppRights::InitAsDefaultInstance() {
}

CMsgAppRights::CMsgAppRights(const CMsgAppRights& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAppRights::SharedCtor() {
  _cached_size_ = 0;
  edit_info_ = false;
  publish_ = false;
  view_error_data_ = false;
  download_ = false;
  upload_cdkeys_ = false;
  generate_cdkeys_ = false;
  view_financials_ = false;
  manage_ceg_ = false;
  manage_signing_ = false;
  manage_cdkeys_ = false;
  edit_marketing_ = false;
  economy_support_ = false;
  economy_support_supervisor_ = false;
  manage_pricing_ = false;
  broadcast_live_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAppRights::~CMsgAppRights() {
  SharedDtor();
}

void CMsgAppRights::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgAppRights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAppRights::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAppRights_descriptor_;
}

const CMsgAppRights& CMsgAppRights::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
  return *default_instance_;
}

CMsgAppRights* CMsgAppRights::default_instance_ = NULL;

CMsgAppRights* CMsgAppRights::New() const {
  return new CMsgAppRights;
}

void CMsgAppRights::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    edit_info_ = false;
    publish_ = false;
    view_error_data_ = false;
    download_ = false;
    upload_cdkeys_ = false;
    generate_cdkeys_ = false;
    view_financials_ = false;
    manage_ceg_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    manage_signing_ = false;
    manage_cdkeys_ = false;
    edit_marketing_ = false;
    economy_support_ = false;
    economy_support_supervisor_ = false;
    manage_pricing_ = false;
    broadcast_live_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAppRights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool edit_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_info_)));
          set_has_edit_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_publish;
        break;
      }

      // optional bool publish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_)));
          set_has_publish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_view_error_data;
        break;
      }

      // optional bool view_error_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_error_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_error_data_)));
          set_has_view_error_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_download;
        break;
      }

      // optional bool download = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_)));
          set_has_download();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upload_cdkeys;
        break;
      }

      // optional bool upload_cdkeys = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_cdkeys_)));
          set_has_upload_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_generate_cdkeys;
        break;
      }

      // optional bool generate_cdkeys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generate_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generate_cdkeys_)));
          set_has_generate_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_view_financials;
        break;
      }

      // optional bool view_financials = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_financials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_financials_)));
          set_has_view_financials();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_manage_ceg;
        break;
      }

      // optional bool manage_ceg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_ceg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_ceg_)));
          set_has_manage_ceg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_manage_signing;
        break;
      }

      // optional bool manage_signing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_signing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_signing_)));
          set_has_manage_signing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_manage_cdkeys;
        break;
      }

      // optional bool manage_cdkeys = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_cdkeys_)));
          set_has_manage_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_edit_marketing;
        break;
      }

      // optional bool edit_marketing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edit_marketing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_marketing_)));
          set_has_edit_marketing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_economy_support;
        break;
      }

      // optional bool economy_support = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_economy_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_)));
          set_has_economy_support();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_economy_support_supervisor;
        break;
      }

      // optional bool economy_support_supervisor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_economy_support_supervisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_supervisor_)));
          set_has_economy_support_supervisor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_manage_pricing;
        break;
      }

      // optional bool manage_pricing = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_pricing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_pricing_)));
          set_has_manage_pricing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_broadcast_live;
        break;
      }

      // optional bool broadcast_live = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast_live:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_live_)));
          set_has_broadcast_live();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAppRights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool edit_info = 1;
  if (has_edit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->edit_info(), output);
  }

  // optional bool publish = 2;
  if (has_publish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->publish(), output);
  }

  // optional bool view_error_data = 3;
  if (has_view_error_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->view_error_data(), output);
  }

  // optional bool download = 4;
  if (has_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->download(), output);
  }

  // optional bool upload_cdkeys = 5;
  if (has_upload_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upload_cdkeys(), output);
  }

  // optional bool generate_cdkeys = 6;
  if (has_generate_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->generate_cdkeys(), output);
  }

  // optional bool view_financials = 7;
  if (has_view_financials()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->view_financials(), output);
  }

  // optional bool manage_ceg = 8;
  if (has_manage_ceg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->manage_ceg(), output);
  }

  // optional bool manage_signing = 9;
  if (has_manage_signing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->manage_signing(), output);
  }

  // optional bool manage_cdkeys = 10;
  if (has_manage_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->manage_cdkeys(), output);
  }

  // optional bool edit_marketing = 11;
  if (has_edit_marketing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->edit_marketing(), output);
  }

  // optional bool economy_support = 12;
  if (has_economy_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->economy_support(), output);
  }

  // optional bool economy_support_supervisor = 13;
  if (has_economy_support_supervisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->economy_support_supervisor(), output);
  }

  // optional bool manage_pricing = 14;
  if (has_manage_pricing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->manage_pricing(), output);
  }

  // optional bool broadcast_live = 15;
  if (has_broadcast_live()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->broadcast_live(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAppRights::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool edit_info = 1;
  if (has_edit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->edit_info(), target);
  }

  // optional bool publish = 2;
  if (has_publish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->publish(), target);
  }

  // optional bool view_error_data = 3;
  if (has_view_error_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->view_error_data(), target);
  }

  // optional bool download = 4;
  if (has_download()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->download(), target);
  }

  // optional bool upload_cdkeys = 5;
  if (has_upload_cdkeys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upload_cdkeys(), target);
  }

  // optional bool generate_cdkeys = 6;
  if (has_generate_cdkeys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->generate_cdkeys(), target);
  }

  // optional bool view_financials = 7;
  if (has_view_financials()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->view_financials(), target);
  }

  // optional bool manage_ceg = 8;
  if (has_manage_ceg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->manage_ceg(), target);
  }

  // optional bool manage_signing = 9;
  if (has_manage_signing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->manage_signing(), target);
  }

  // optional bool manage_cdkeys = 10;
  if (has_manage_cdkeys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->manage_cdkeys(), target);
  }

  // optional bool edit_marketing = 11;
  if (has_edit_marketing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->edit_marketing(), target);
  }

  // optional bool economy_support = 12;
  if (has_economy_support()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->economy_support(), target);
  }

  // optional bool economy_support_supervisor = 13;
  if (has_economy_support_supervisor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->economy_support_supervisor(), target);
  }

  // optional bool manage_pricing = 14;
  if (has_manage_pricing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->manage_pricing(), target);
  }

  // optional bool broadcast_live = 15;
  if (has_broadcast_live()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->broadcast_live(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAppRights::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool edit_info = 1;
    if (has_edit_info()) {
      total_size += 1 + 1;
    }

    // optional bool publish = 2;
    if (has_publish()) {
      total_size += 1 + 1;
    }

    // optional bool view_error_data = 3;
    if (has_view_error_data()) {
      total_size += 1 + 1;
    }

    // optional bool download = 4;
    if (has_download()) {
      total_size += 1 + 1;
    }

    // optional bool upload_cdkeys = 5;
    if (has_upload_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool generate_cdkeys = 6;
    if (has_generate_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool view_financials = 7;
    if (has_view_financials()) {
      total_size += 1 + 1;
    }

    // optional bool manage_ceg = 8;
    if (has_manage_ceg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool manage_signing = 9;
    if (has_manage_signing()) {
      total_size += 1 + 1;
    }

    // optional bool manage_cdkeys = 10;
    if (has_manage_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool edit_marketing = 11;
    if (has_edit_marketing()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support = 12;
    if (has_economy_support()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support_supervisor = 13;
    if (has_economy_support_supervisor()) {
      total_size += 1 + 1;
    }

    // optional bool manage_pricing = 14;
    if (has_manage_pricing()) {
      total_size += 1 + 1;
    }

    // optional bool broadcast_live = 15;
    if (has_broadcast_live()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAppRights::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAppRights* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAppRights*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAppRights::MergeFrom(const CMsgAppRights& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edit_info()) {
      set_edit_info(from.edit_info());
    }
    if (from.has_publish()) {
      set_publish(from.publish());
    }
    if (from.has_view_error_data()) {
      set_view_error_data(from.view_error_data());
    }
    if (from.has_download()) {
      set_download(from.download());
    }
    if (from.has_upload_cdkeys()) {
      set_upload_cdkeys(from.upload_cdkeys());
    }
    if (from.has_generate_cdkeys()) {
      set_generate_cdkeys(from.generate_cdkeys());
    }
    if (from.has_view_financials()) {
      set_view_financials(from.view_financials());
    }
    if (from.has_manage_ceg()) {
      set_manage_ceg(from.manage_ceg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_manage_signing()) {
      set_manage_signing(from.manage_signing());
    }
    if (from.has_manage_cdkeys()) {
      set_manage_cdkeys(from.manage_cdkeys());
    }
    if (from.has_edit_marketing()) {
      set_edit_marketing(from.edit_marketing());
    }
    if (from.has_economy_support()) {
      set_economy_support(from.economy_support());
    }
    if (from.has_economy_support_supervisor()) {
      set_economy_support_supervisor(from.economy_support_supervisor());
    }
    if (from.has_manage_pricing()) {
      set_manage_pricing(from.manage_pricing());
    }
    if (from.has_broadcast_live()) {
      set_broadcast_live(from.broadcast_live());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAppRights::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAppRights::CopyFrom(const CMsgAppRights& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAppRights::IsInitialized() const {

  return true;
}

void CMsgAppRights::Swap(CMsgAppRights* other) {
  if (other != this) {
    std::swap(edit_info_, other->edit_info_);
    std::swap(publish_, other->publish_);
    std::swap(view_error_data_, other->view_error_data_);
    std::swap(download_, other->download_);
    std::swap(upload_cdkeys_, other->upload_cdkeys_);
    std::swap(generate_cdkeys_, other->generate_cdkeys_);
    std::swap(view_financials_, other->view_financials_);
    std::swap(manage_ceg_, other->manage_ceg_);
    std::swap(manage_signing_, other->manage_signing_);
    std::swap(manage_cdkeys_, other->manage_cdkeys_);
    std::swap(edit_marketing_, other->edit_marketing_);
    std::swap(economy_support_, other->economy_support_);
    std::swap(economy_support_supervisor_, other->economy_support_supervisor_);
    std::swap(manage_pricing_, other->manage_pricing_);
    std::swap(broadcast_live_, other->broadcast_live_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAppRights::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAppRights_descriptor_;
  metadata.reflection = CMsgAppRights_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
