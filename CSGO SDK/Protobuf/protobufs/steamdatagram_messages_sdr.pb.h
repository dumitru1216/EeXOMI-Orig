// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_sdr.proto

#ifndef PROTOBUF_steamdatagram_5fmessages_5fsdr_2eproto__INCLUDED
#define PROTOBUF_steamdatagram_5fmessages_5fsdr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steamnetworkingsockets_messages_certs.pb.h"
#include "steamnetworkingsockets_messages.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

class CMsgSteamDatagramGameserverPing;
class CMsgSteamDatagramNoSessionRelayToClient;
class CMsgSteamDatagramNoSessionRelayToPeer;
class CMsgSteamDatagramClientPingSampleRequest;
class CMsgSteamDatagramClientPingSampleReply;
class CMsgSteamDatagramClientPingSampleReply_RoutingCluster;
class CMsgSteamDatagramClientPingSampleReply_DataCenter;
class CMsgSteamDatagramClientSwitchedPrimary;
class CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
class CMsgSteamDatagramConnectRequest;
class CMsgSteamDatagramConnectOK;
class CMsgSteamDatagramConnectionClosed;
class CMsgSteamDatagramNoConnection;
class CMsgSteamDatagramGameserverSessionRequest;
class CMsgSteamDatagramGameserverSessionEstablished;
class CMsgSteamDatagramConnectionStatsClientToRouter;
class CMsgSteamDatagramConnectionStatsRouterToClient;
class CMsgSteamDatagramConnectionStatsRouterToServer;
class CMsgSteamDatagramConnectionStatsServerToRouter;
class CMsgSteamDatagramP2PSessionRequestBody;
class CMsgSteamDatagramP2PSessionRequest;
class CMsgSteamDatagramP2PSessionEstablished;
class CMsgSteamDatagramP2PRoutes;
class CMsgSteamDatagramP2PRoutes_RelayCluster;
class CMsgSteamDatagramP2PRoutes_Route;
class CMsgSteamDatagramP2PRendezvous;
class CMsgSteamDatagramConnectionStatsP2PClientToRouter;
class CMsgSteamDatagramConnectionStatsP2PRouterToClient;
class CMsgSteamDatagramP2PBadRouteRouterToClient;
class CMsgSteamDatagramRelayToRelayPing;
class CMsgSteamDatagramDataCenterState;
class CMsgSteamDatagramDataCenterState_Server;
class CMsgSteamDatagramDataCenterState_DataCenter;
class CMsgSteamDatagramRouterHealth;
class CMsgSteamDatagramRouterHealth_DataCenter;
class CMsgSteamDatagramConnectionStatsP2PRouterToRouter;
class CMsgSteamDatagramP2PBadRouteRouterToRouter;

enum CMsgSteamDatagramConnectionClosed_ERelayMode {
  CMsgSteamDatagramConnectionClosed_ERelayMode_None = 0,
  CMsgSteamDatagramConnectionClosed_ERelayMode_EndToEnd = 1,
  CMsgSteamDatagramConnectionClosed_ERelayMode_ClosedByPeer = 2
};
bool CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(int value);
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MIN = CMsgSteamDatagramConnectionClosed_ERelayMode_None;
const CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MAX = CMsgSteamDatagramConnectionClosed_ERelayMode_ClosedByPeer;
const int CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_ARRAYSIZE = CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionClosed_ERelayMode_Name(CMsgSteamDatagramConnectionClosed_ERelayMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionClosed_ERelayMode_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionClosed_ERelayMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionClosed_ERelayMode>(
    CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsClientToRouter_Flags {
  CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsClientToRouter_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsClientToRouter_Flags CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Name(CMsgSteamDatagramConnectionStatsClientToRouter_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsClientToRouter_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsClientToRouter_Flags>(
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsRouterToClient_Flags {
  CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsRouterToClient_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsRouterToClient_Flags CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Name(CMsgSteamDatagramConnectionStatsRouterToClient_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsRouterToClient_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsRouterToClient_Flags>(
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsRouterToServer_Flags {
  CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsRouterToServer_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsRouterToServer_Flags CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Name(CMsgSteamDatagramConnectionStatsRouterToServer_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsRouterToServer_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsRouterToServer_Flags>(
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsServerToRouter_Flags {
  CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsServerToRouter_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsServerToRouter_Flags CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Name(CMsgSteamDatagramConnectionStatsServerToRouter_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsServerToRouter_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsServerToRouter_Flags>(
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags {
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Name(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags>(
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags {
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Name(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags>(
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor(), name, value);
}
enum CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags {
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_RELAY = 1,
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_E2E = 2,
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_IMMEDIATE = 4
};
bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_IsValid(int value);
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MIN = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_RELAY;
const CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MAX = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_IMMEDIATE;
const int CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_ARRAYSIZE = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor();
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Name(CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor(), value);
}
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Parse(
    const ::std::string& name, CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags>(
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamDatagramGameserverPing : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramGameserverPing();
  virtual ~CMsgSteamDatagramGameserverPing();

  CMsgSteamDatagramGameserverPing(const CMsgSteamDatagramGameserverPing& from);

  inline CMsgSteamDatagramGameserverPing& operator=(const CMsgSteamDatagramGameserverPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramGameserverPing& default_instance();

  void Swap(CMsgSteamDatagramGameserverPing* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramGameserverPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramGameserverPing& from);
  void MergeFrom(const CMsgSteamDatagramGameserverPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 router_timestamp = 4;
  inline bool has_router_timestamp() const;
  inline void clear_router_timestamp();
  static const int kRouterTimestampFieldNumber = 4;
  inline ::google::protobuf::uint32 router_timestamp() const;
  inline void set_router_timestamp(::google::protobuf::uint32 value);

  // optional fixed64 dummy_pad = 99;
  inline bool has_dummy_pad() const;
  inline void clear_dummy_pad();
  static const int kDummyPadFieldNumber = 99;
  inline ::google::protobuf::uint64 dummy_pad() const;
  inline void set_dummy_pad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramGameserverPing)
 private:
  inline void set_has_router_timestamp();
  inline void clear_has_router_timestamp();
  inline void set_has_dummy_pad();
  inline void clear_has_dummy_pad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 dummy_pad_;
  ::google::protobuf::uint32 router_timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramGameserverPing* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramNoSessionRelayToClient : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramNoSessionRelayToClient();
  virtual ~CMsgSteamDatagramNoSessionRelayToClient();

  CMsgSteamDatagramNoSessionRelayToClient(const CMsgSteamDatagramNoSessionRelayToClient& from);

  inline CMsgSteamDatagramNoSessionRelayToClient& operator=(const CMsgSteamDatagramNoSessionRelayToClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramNoSessionRelayToClient& default_instance();

  void Swap(CMsgSteamDatagramNoSessionRelayToClient* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramNoSessionRelayToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramNoSessionRelayToClient& from);
  void MergeFrom(const CMsgSteamDatagramNoSessionRelayToClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 7;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 7;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 your_public_ip = 2;
  inline bool has_your_public_ip() const;
  inline void clear_your_public_ip();
  static const int kYourPublicIpFieldNumber = 2;
  inline ::google::protobuf::uint32 your_public_ip() const;
  inline void set_your_public_ip(::google::protobuf::uint32 value);

  // optional fixed32 server_time = 3;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 server_time() const;
  inline void set_server_time(::google::protobuf::uint32 value);

  // optional fixed64 challenge = 4;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 4;
  inline ::google::protobuf::uint64 challenge() const;
  inline void set_challenge(::google::protobuf::uint64 value);

  // optional uint32 seconds_until_shutdown = 5;
  inline bool has_seconds_until_shutdown() const;
  inline void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 5;
  inline ::google::protobuf::uint32 seconds_until_shutdown() const;
  inline void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramNoSessionRelayToClient)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_your_public_ip();
  inline void clear_has_your_public_ip();
  inline void set_has_server_time();
  inline void clear_has_server_time();
  inline void set_has_challenge();
  inline void clear_has_challenge();
  inline void set_has_seconds_until_shutdown();
  inline void clear_has_seconds_until_shutdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 your_public_ip_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 server_time_;
  ::google::protobuf::uint32 seconds_until_shutdown_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramNoSessionRelayToClient* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramNoSessionRelayToPeer : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramNoSessionRelayToPeer();
  virtual ~CMsgSteamDatagramNoSessionRelayToPeer();

  CMsgSteamDatagramNoSessionRelayToPeer(const CMsgSteamDatagramNoSessionRelayToPeer& from);

  inline CMsgSteamDatagramNoSessionRelayToPeer& operator=(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramNoSessionRelayToPeer& default_instance();

  void Swap(CMsgSteamDatagramNoSessionRelayToPeer* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramNoSessionRelayToPeer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from);
  void MergeFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 legacy_relay_session_id = 1;
  inline bool has_legacy_relay_session_id() const;
  inline void clear_legacy_relay_session_id();
  static const int kLegacyRelaySessionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 legacy_relay_session_id() const;
  inline void set_legacy_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 from_relay_session_id = 2;
  inline bool has_from_relay_session_id() const;
  inline void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 from_relay_session_id() const;
  inline void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 7;
  inline bool has_from_connection_id() const;
  inline void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 7;
  inline ::google::protobuf::uint32 from_connection_id() const;
  inline void set_from_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 kludge_pad = 99;
  inline bool has_kludge_pad() const;
  inline void clear_kludge_pad();
  static const int kKludgePadFieldNumber = 99;
  inline ::google::protobuf::uint64 kludge_pad() const;
  inline void set_kludge_pad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramNoSessionRelayToPeer)
 private:
  inline void set_has_legacy_relay_session_id();
  inline void clear_has_legacy_relay_session_id();
  inline void set_has_from_relay_session_id();
  inline void clear_has_from_relay_session_id();
  inline void set_has_from_connection_id();
  inline void clear_has_from_connection_id();
  inline void set_has_kludge_pad();
  inline void clear_has_kludge_pad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 legacy_relay_session_id_;
  ::google::protobuf::uint32 from_relay_session_id_;
  ::google::protobuf::uint64 kludge_pad_;
  ::google::protobuf::uint32 from_connection_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramNoSessionRelayToPeer* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientPingSampleRequest : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramClientPingSampleRequest();
  virtual ~CMsgSteamDatagramClientPingSampleRequest();

  CMsgSteamDatagramClientPingSampleRequest(const CMsgSteamDatagramClientPingSampleRequest& from);

  inline CMsgSteamDatagramClientPingSampleRequest& operator=(const CMsgSteamDatagramClientPingSampleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramClientPingSampleRequest& default_instance();

  void Swap(CMsgSteamDatagramClientPingSampleRequest* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramClientPingSampleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from);
  void MergeFrom(const CMsgSteamDatagramClientPingSampleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramClientPingSampleRequest)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connection_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramClientPingSampleRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientPingSampleReply_RoutingCluster : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster();
  virtual ~CMsgSteamDatagramClientPingSampleReply_RoutingCluster();

  CMsgSteamDatagramClientPingSampleReply_RoutingCluster(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from);

  inline CMsgSteamDatagramClientPingSampleReply_RoutingCluster& operator=(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& default_instance();

  void Swap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramClientPingSampleReply_RoutingCluster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from);
  void MergeFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 front_ping_ms = 2;
  inline bool has_front_ping_ms() const;
  inline void clear_front_ping_ms();
  static const int kFrontPingMsFieldNumber = 2;
  inline ::google::protobuf::uint32 front_ping_ms() const;
  inline void set_front_ping_ms(::google::protobuf::uint32 value);

  // optional uint32 e2e_ping_ms = 3;
  inline bool has_e2e_ping_ms() const;
  inline void clear_e2e_ping_ms();
  static const int kE2EPingMsFieldNumber = 3;
  inline ::google::protobuf::uint32 e2e_ping_ms() const;
  inline void set_e2e_ping_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_front_ping_ms();
  inline void clear_has_front_ping_ms();
  inline void set_has_e2e_ping_ms();
  inline void clear_has_e2e_ping_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 front_ping_ms_;
  ::google::protobuf::uint32 e2e_ping_ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramClientPingSampleReply_RoutingCluster* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientPingSampleReply_DataCenter : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramClientPingSampleReply_DataCenter();
  virtual ~CMsgSteamDatagramClientPingSampleReply_DataCenter();

  CMsgSteamDatagramClientPingSampleReply_DataCenter(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from);

  inline CMsgSteamDatagramClientPingSampleReply_DataCenter& operator=(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramClientPingSampleReply_DataCenter& default_instance();

  void Swap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramClientPingSampleReply_DataCenter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from);
  void MergeFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 data_center_id = 1;
  inline bool has_data_center_id() const;
  inline void clear_data_center_id();
  static const int kDataCenterIdFieldNumber = 1;
  inline ::google::protobuf::uint32 data_center_id() const;
  inline void set_data_center_id(::google::protobuf::uint32 value);

  // optional fixed32 via_relay_id = 2;
  inline bool has_via_relay_id() const;
  inline void clear_via_relay_id();
  static const int kViaRelayIdFieldNumber = 2;
  inline ::google::protobuf::uint32 via_relay_id() const;
  inline void set_via_relay_id(::google::protobuf::uint32 value);

  // optional uint32 e2e_ping_ms = 3;
  inline bool has_e2e_ping_ms() const;
  inline void clear_e2e_ping_ms();
  static const int kE2EPingMsFieldNumber = 3;
  inline ::google::protobuf::uint32 e2e_ping_ms() const;
  inline void set_e2e_ping_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramClientPingSampleReply.DataCenter)
 private:
  inline void set_has_data_center_id();
  inline void clear_has_data_center_id();
  inline void set_has_via_relay_id();
  inline void clear_has_via_relay_id();
  inline void set_has_e2e_ping_ms();
  inline void clear_has_e2e_ping_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 data_center_id_;
  ::google::protobuf::uint32 via_relay_id_;
  ::google::protobuf::uint32 e2e_ping_ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramClientPingSampleReply_DataCenter* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientPingSampleReply : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramClientPingSampleReply();
  virtual ~CMsgSteamDatagramClientPingSampleReply();

  CMsgSteamDatagramClientPingSampleReply(const CMsgSteamDatagramClientPingSampleReply& from);

  inline CMsgSteamDatagramClientPingSampleReply& operator=(const CMsgSteamDatagramClientPingSampleReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramClientPingSampleReply& default_instance();

  void Swap(CMsgSteamDatagramClientPingSampleReply* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramClientPingSampleReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from);
  void MergeFrom(const CMsgSteamDatagramClientPingSampleReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramClientPingSampleReply_RoutingCluster RoutingCluster;
  typedef CMsgSteamDatagramClientPingSampleReply_DataCenter DataCenter;

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  inline int routing_clusters_size() const;
  inline void clear_routing_clusters();
  static const int kRoutingClustersFieldNumber = 2;
  inline const ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster& routing_clusters(int index) const;
  inline ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* mutable_routing_clusters(int index);
  inline ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* add_routing_clusters();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >&
      routing_clusters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >*
      mutable_routing_clusters();

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  inline int data_centers_size() const;
  inline void clear_data_centers();
  static const int kDataCentersFieldNumber = 3;
  inline const ::CMsgSteamDatagramClientPingSampleReply_DataCenter& data_centers(int index) const;
  inline ::CMsgSteamDatagramClientPingSampleReply_DataCenter* mutable_data_centers(int index);
  inline ::CMsgSteamDatagramClientPingSampleReply_DataCenter* add_data_centers();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_DataCenter >&
      data_centers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_DataCenter >*
      mutable_data_centers();

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramClientPingSampleReply)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster > routing_clusters_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_DataCenter > data_centers_;
  ::google::protobuf::uint32 connection_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramClientPingSampleReply* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientSwitchedPrimary_RouterQuality : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
  virtual ~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality();

  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from);

  inline CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& operator=(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& default_instance();

  void Swap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from);
  void MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 front_ping = 2;
  inline bool has_front_ping() const;
  inline void clear_front_ping();
  static const int kFrontPingFieldNumber = 2;
  inline ::google::protobuf::uint32 front_ping() const;
  inline void set_front_ping(::google::protobuf::uint32 value);

  // optional uint32 back_ping = 3;
  inline bool has_back_ping() const;
  inline void clear_back_ping();
  static const int kBackPingFieldNumber = 3;
  inline ::google::protobuf::uint32 back_ping() const;
  inline void set_back_ping(::google::protobuf::uint32 value);

  // optional uint32 seconds_until_down = 4;
  inline bool has_seconds_until_down() const;
  inline void clear_seconds_until_down();
  static const int kSecondsUntilDownFieldNumber = 4;
  inline ::google::protobuf::uint32 seconds_until_down() const;
  inline void set_seconds_until_down(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_front_ping();
  inline void clear_has_front_ping();
  inline void set_has_back_ping();
  inline void clear_has_back_ping();
  inline void set_has_seconds_until_down();
  inline void clear_has_seconds_until_down();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 front_ping_;
  ::google::protobuf::uint32 back_ping_;
  ::google::protobuf::uint32 seconds_until_down_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramClientSwitchedPrimary : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramClientSwitchedPrimary();
  virtual ~CMsgSteamDatagramClientSwitchedPrimary();

  CMsgSteamDatagramClientSwitchedPrimary(const CMsgSteamDatagramClientSwitchedPrimary& from);

  inline CMsgSteamDatagramClientSwitchedPrimary& operator=(const CMsgSteamDatagramClientSwitchedPrimary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramClientSwitchedPrimary& default_instance();

  void Swap(CMsgSteamDatagramClientSwitchedPrimary* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramClientSwitchedPrimary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from);
  void MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramClientSwitchedPrimary_RouterQuality RouterQuality;

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_ip = 2;
  inline bool has_from_ip() const;
  inline void clear_from_ip();
  static const int kFromIpFieldNumber = 2;
  inline ::google::protobuf::uint32 from_ip() const;
  inline void set_from_ip(::google::protobuf::uint32 value);

  // optional uint32 from_port = 3;
  inline bool has_from_port() const;
  inline void clear_from_port();
  static const int kFromPortFieldNumber = 3;
  inline ::google::protobuf::uint32 from_port() const;
  inline void set_from_port(::google::protobuf::uint32 value);

  // optional fixed32 from_router_cluster = 4;
  inline bool has_from_router_cluster() const;
  inline void clear_from_router_cluster();
  static const int kFromRouterClusterFieldNumber = 4;
  inline ::google::protobuf::uint32 from_router_cluster() const;
  inline void set_from_router_cluster(::google::protobuf::uint32 value);

  // optional uint32 from_active_time = 5;
  inline bool has_from_active_time() const;
  inline void clear_from_active_time();
  static const int kFromActiveTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 from_active_time() const;
  inline void set_from_active_time(::google::protobuf::uint32 value);

  // optional uint32 from_active_packets_recv = 6;
  inline bool has_from_active_packets_recv() const;
  inline void clear_from_active_packets_recv();
  static const int kFromActivePacketsRecvFieldNumber = 6;
  inline ::google::protobuf::uint32 from_active_packets_recv() const;
  inline void set_from_active_packets_recv(::google::protobuf::uint32 value);

  // optional string from_dropped_reason = 7;
  inline bool has_from_dropped_reason() const;
  inline void clear_from_dropped_reason();
  static const int kFromDroppedReasonFieldNumber = 7;
  inline const ::std::string& from_dropped_reason() const;
  inline void set_from_dropped_reason(const ::std::string& value);
  inline void set_from_dropped_reason(const char* value);
  inline void set_from_dropped_reason(const char* value, size_t size);
  inline ::std::string* mutable_from_dropped_reason();
  inline ::std::string* release_from_dropped_reason();
  inline void set_allocated_from_dropped_reason(::std::string* from_dropped_reason);

  // optional uint32 gap_ms = 8;
  inline bool has_gap_ms() const;
  inline void clear_gap_ms();
  static const int kGapMsFieldNumber = 8;
  inline ::google::protobuf::uint32 gap_ms() const;
  inline void set_gap_ms(::google::protobuf::uint32 value);

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  inline bool has_from_quality_now() const;
  inline void clear_from_quality_now();
  static const int kFromQualityNowFieldNumber = 9;
  inline const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_now() const;
  inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* mutable_from_quality_now();
  inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* release_from_quality_now();
  inline void set_allocated_from_quality_now(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_now);

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  inline bool has_to_quality_now() const;
  inline void clear_to_quality_now();
  static const int kToQualityNowFieldNumber = 10;
  inline const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_now() const;
  inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* mutable_to_quality_now();
  inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* release_to_quality_now();
  inline void set_allocated_to_quality_now(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_now);

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  inline bool has_from_quality_then() const;
  inline void clear_from_quality_then();
  static const int kFromQualityThenFieldNumber = 11;
  inline const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from_quality_then() const;
  inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* mutable_from_quality_then();
  inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* release_from_quality_then();
  inline void set_allocated_from_quality_then(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_then);

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  inline bool has_to_quality_then() const;
  inline void clear_to_quality_then();
  static const int kToQualityThenFieldNumber = 12;
  inline const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& to_quality_then() const;
  inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* mutable_to_quality_then();
  inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* release_to_quality_then();
  inline void set_allocated_to_quality_then(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_then);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramClientSwitchedPrimary)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_from_ip();
  inline void clear_has_from_ip();
  inline void set_has_from_port();
  inline void clear_has_from_port();
  inline void set_has_from_router_cluster();
  inline void clear_has_from_router_cluster();
  inline void set_has_from_active_time();
  inline void clear_has_from_active_time();
  inline void set_has_from_active_packets_recv();
  inline void clear_has_from_active_packets_recv();
  inline void set_has_from_dropped_reason();
  inline void clear_has_from_dropped_reason();
  inline void set_has_gap_ms();
  inline void clear_has_gap_ms();
  inline void set_has_from_quality_now();
  inline void clear_has_from_quality_now();
  inline void set_has_to_quality_now();
  inline void clear_has_to_quality_now();
  inline void set_has_from_quality_then();
  inline void clear_has_from_quality_then();
  inline void set_has_to_quality_then();
  inline void clear_has_to_quality_then();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 from_ip_;
  ::google::protobuf::uint32 from_port_;
  ::google::protobuf::uint32 from_router_cluster_;
  ::google::protobuf::uint32 from_active_time_;
  ::google::protobuf::uint32 from_active_packets_recv_;
  ::std::string* from_dropped_reason_;
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_now_;
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_now_;
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_then_;
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_then_;
  ::google::protobuf::uint32 gap_ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramClientSwitchedPrimary* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectRequest : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectRequest();
  virtual ~CMsgSteamDatagramConnectRequest();

  CMsgSteamDatagramConnectRequest(const CMsgSteamDatagramConnectRequest& from);

  inline CMsgSteamDatagramConnectRequest& operator=(const CMsgSteamDatagramConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectRequest& default_instance();

  void Swap(CMsgSteamDatagramConnectRequest* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectRequest& from);
  void MergeFrom(const CMsgSteamDatagramConnectRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 client_steam_id = 3;
  inline bool has_client_steam_id() const;
  inline void clear_client_steam_id();
  static const int kClientSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 client_steam_id() const;
  inline void set_client_steam_id(::google::protobuf::uint64 value);

  // optional fixed64 my_timestamp = 4;
  inline bool has_my_timestamp() const;
  inline void clear_my_timestamp();
  static const int kMyTimestampFieldNumber = 4;
  inline ::google::protobuf::uint64 my_timestamp() const;
  inline void set_my_timestamp(::google::protobuf::uint64 value);

  // optional uint32 ping_est_ms = 5;
  inline bool has_ping_est_ms() const;
  inline void clear_ping_est_ms();
  static const int kPingEstMsFieldNumber = 5;
  inline ::google::protobuf::uint32 ping_est_ms() const;
  inline void set_ping_est_ms(::google::protobuf::uint32 value);

  // optional uint32 virtual_port = 9;
  inline bool has_virtual_port() const;
  inline void clear_virtual_port();
  static const int kVirtualPortFieldNumber = 9;
  inline ::google::protobuf::uint32 virtual_port() const;
  inline void set_virtual_port(::google::protobuf::uint32 value);

  // optional uint32 gameserver_relay_session_id = 2;
  inline bool has_gameserver_relay_session_id() const;
  inline void clear_gameserver_relay_session_id();
  static const int kGameserverRelaySessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gameserver_relay_session_id() const;
  inline void set_gameserver_relay_session_id(::google::protobuf::uint32 value);

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  inline bool has_crypt() const;
  inline void clear_crypt();
  static const int kCryptFieldNumber = 6;
  inline const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  inline void set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 7;
  inline const ::CMsgSteamDatagramCertificateSigned& cert() const;
  inline ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  inline ::CMsgSteamDatagramCertificateSigned* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional uint32 protocol_version = 8;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 8;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectRequest)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_client_steam_id();
  inline void clear_has_client_steam_id();
  inline void set_has_my_timestamp();
  inline void clear_has_my_timestamp();
  inline void set_has_ping_est_ms();
  inline void clear_has_ping_est_ms();
  inline void set_has_virtual_port();
  inline void clear_has_virtual_port();
  inline void set_has_gameserver_relay_session_id();
  inline void clear_has_gameserver_relay_session_id();
  inline void set_has_crypt();
  inline void clear_has_crypt();
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 client_steam_id_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 ping_est_ms_;
  ::google::protobuf::uint64 my_timestamp_;
  ::google::protobuf::uint32 virtual_port_;
  ::google::protobuf::uint32 gameserver_relay_session_id_;
  ::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::CMsgSteamDatagramCertificateSigned* cert_;
  ::google::protobuf::uint32 protocol_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectOK : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectOK();
  virtual ~CMsgSteamDatagramConnectOK();

  CMsgSteamDatagramConnectOK(const CMsgSteamDatagramConnectOK& from);

  inline CMsgSteamDatagramConnectOK& operator=(const CMsgSteamDatagramConnectOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectOK& default_instance();

  void Swap(CMsgSteamDatagramConnectOK* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectOK& from);
  void MergeFrom(const CMsgSteamDatagramConnectOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 client_connection_id = 1;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 7;
  inline bool has_server_connection_id() const;
  inline void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 7;
  inline ::google::protobuf::uint32 server_connection_id() const;
  inline void set_server_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 your_timestamp = 3;
  inline bool has_your_timestamp() const;
  inline void clear_your_timestamp();
  static const int kYourTimestampFieldNumber = 3;
  inline ::google::protobuf::uint64 your_timestamp() const;
  inline void set_your_timestamp(::google::protobuf::uint64 value);

  // optional uint32 delay_time_usec = 4;
  inline bool has_delay_time_usec() const;
  inline void clear_delay_time_usec();
  static const int kDelayTimeUsecFieldNumber = 4;
  inline ::google::protobuf::uint32 delay_time_usec() const;
  inline void set_delay_time_usec(::google::protobuf::uint32 value);

  // optional uint32 gameserver_relay_session_id = 2;
  inline bool has_gameserver_relay_session_id() const;
  inline void clear_gameserver_relay_session_id();
  static const int kGameserverRelaySessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 gameserver_relay_session_id() const;
  inline void set_gameserver_relay_session_id(::google::protobuf::uint32 value);

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  inline bool has_crypt() const;
  inline void clear_crypt();
  static const int kCryptFieldNumber = 5;
  inline const ::CMsgSteamDatagramSessionCryptInfoSigned& crypt() const;
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* mutable_crypt();
  inline ::CMsgSteamDatagramSessionCryptInfoSigned* release_crypt();
  inline void set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt);

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 6;
  inline const ::CMsgSteamDatagramCertificateSigned& cert() const;
  inline ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  inline ::CMsgSteamDatagramCertificateSigned* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional uint32 protocol_version = 8;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 8;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectOK)
 private:
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_server_connection_id();
  inline void clear_has_server_connection_id();
  inline void set_has_your_timestamp();
  inline void clear_has_your_timestamp();
  inline void set_has_delay_time_usec();
  inline void clear_has_delay_time_usec();
  inline void set_has_gameserver_relay_session_id();
  inline void clear_has_gameserver_relay_session_id();
  inline void set_has_crypt();
  inline void clear_has_crypt();
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 server_connection_id_;
  ::google::protobuf::uint64 your_timestamp_;
  ::google::protobuf::uint32 delay_time_usec_;
  ::google::protobuf::uint32 gameserver_relay_session_id_;
  ::CMsgSteamDatagramSessionCryptInfoSigned* crypt_;
  ::CMsgSteamDatagramCertificateSigned* cert_;
  ::google::protobuf::uint32 protocol_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectOK* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionClosed : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionClosed();
  virtual ~CMsgSteamDatagramConnectionClosed();

  CMsgSteamDatagramConnectionClosed(const CMsgSteamDatagramConnectionClosed& from);

  inline CMsgSteamDatagramConnectionClosed& operator=(const CMsgSteamDatagramConnectionClosed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionClosed& default_instance();

  void Swap(CMsgSteamDatagramConnectionClosed* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionClosed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionClosed& from);
  void MergeFrom(const CMsgSteamDatagramConnectionClosed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionClosed_ERelayMode ERelayMode;
  static const ERelayMode None = CMsgSteamDatagramConnectionClosed_ERelayMode_None;
  static const ERelayMode EndToEnd = CMsgSteamDatagramConnectionClosed_ERelayMode_EndToEnd;
  static const ERelayMode ClosedByPeer = CMsgSteamDatagramConnectionClosed_ERelayMode_ClosedByPeer;
  static inline bool ERelayMode_IsValid(int value) {
    return CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(value);
  }
  static const ERelayMode ERelayMode_MIN =
    CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MIN;
  static const ERelayMode ERelayMode_MAX =
    CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_MAX;
  static const int ERelayMode_ARRAYSIZE =
    CMsgSteamDatagramConnectionClosed_ERelayMode_ERelayMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ERelayMode_descriptor() {
    return CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor();
  }
  static inline const ::std::string& ERelayMode_Name(ERelayMode value) {
    return CMsgSteamDatagramConnectionClosed_ERelayMode_Name(value);
  }
  static inline bool ERelayMode_Parse(const ::std::string& name,
      ERelayMode* value) {
    return CMsgSteamDatagramConnectionClosed_ERelayMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional fixed32 to_connection_id = 7;
  inline bool has_to_connection_id() const;
  inline void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 7;
  inline ::google::protobuf::uint32 to_connection_id() const;
  inline void set_to_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 8;
  inline bool has_from_connection_id() const;
  inline void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 from_connection_id() const;
  inline void set_from_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 from_steam_id = 3;
  inline bool has_from_steam_id() const;
  inline void clear_from_steam_id();
  static const int kFromSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 from_steam_id() const;
  inline void set_from_steam_id(::google::protobuf::uint64 value);

  // optional uint32 legacy_gameserver_relay_session_id = 2;
  inline bool has_legacy_gameserver_relay_session_id() const;
  inline void clear_legacy_gameserver_relay_session_id();
  static const int kLegacyGameserverRelaySessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 legacy_gameserver_relay_session_id() const;
  inline void set_legacy_gameserver_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 to_relay_session_id = 9;
  inline bool has_to_relay_session_id() const;
  inline void clear_to_relay_session_id();
  static const int kToRelaySessionIdFieldNumber = 9;
  inline ::google::protobuf::uint32 to_relay_session_id() const;
  inline void set_to_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 from_relay_session_id = 10;
  inline bool has_from_relay_session_id() const;
  inline void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 10;
  inline ::google::protobuf::uint32 from_relay_session_id() const;
  inline void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional bytes forward_target_relay_routing_token = 11;
  inline bool has_forward_target_relay_routing_token() const;
  inline void clear_forward_target_relay_routing_token();
  static const int kForwardTargetRelayRoutingTokenFieldNumber = 11;
  inline const ::std::string& forward_target_relay_routing_token() const;
  inline void set_forward_target_relay_routing_token(const ::std::string& value);
  inline void set_forward_target_relay_routing_token(const char* value);
  inline void set_forward_target_relay_routing_token(const void* value, size_t size);
  inline ::std::string* mutable_forward_target_relay_routing_token();
  inline ::std::string* release_forward_target_relay_routing_token();
  inline void set_allocated_forward_target_relay_routing_token(::std::string* forward_target_relay_routing_token);

  // optional uint32 forward_target_revision = 12;
  inline bool has_forward_target_revision() const;
  inline void clear_forward_target_revision();
  static const int kForwardTargetRevisionFieldNumber = 12;
  inline ::google::protobuf::uint32 forward_target_revision() const;
  inline void set_forward_target_revision(::google::protobuf::uint32 value);

  // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  inline bool has_relay_mode() const;
  inline void clear_relay_mode();
  static const int kRelayModeFieldNumber = 4;
  inline ::CMsgSteamDatagramConnectionClosed_ERelayMode relay_mode() const;
  inline void set_relay_mode(::CMsgSteamDatagramConnectionClosed_ERelayMode value);

  // optional string debug = 5;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 5;
  inline const ::std::string& debug() const;
  inline void set_debug(const ::std::string& value);
  inline void set_debug(const char* value);
  inline void set_debug(const char* value, size_t size);
  inline ::std::string* mutable_debug();
  inline ::std::string* release_debug();
  inline void set_allocated_debug(::std::string* debug);

  // optional uint32 reason_code = 6;
  inline bool has_reason_code() const;
  inline void clear_reason_code();
  static const int kReasonCodeFieldNumber = 6;
  inline ::google::protobuf::uint32 reason_code() const;
  inline void set_reason_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionClosed)
 private:
  inline void set_has_to_connection_id();
  inline void clear_has_to_connection_id();
  inline void set_has_from_connection_id();
  inline void clear_has_from_connection_id();
  inline void set_has_from_steam_id();
  inline void clear_has_from_steam_id();
  inline void set_has_legacy_gameserver_relay_session_id();
  inline void clear_has_legacy_gameserver_relay_session_id();
  inline void set_has_to_relay_session_id();
  inline void clear_has_to_relay_session_id();
  inline void set_has_from_relay_session_id();
  inline void clear_has_from_relay_session_id();
  inline void set_has_forward_target_relay_routing_token();
  inline void clear_has_forward_target_relay_routing_token();
  inline void set_has_forward_target_revision();
  inline void clear_has_forward_target_revision();
  inline void set_has_relay_mode();
  inline void clear_has_relay_mode();
  inline void set_has_debug();
  inline void clear_has_debug();
  inline void set_has_reason_code();
  inline void clear_has_reason_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint64 from_steam_id_;
  ::google::protobuf::uint32 legacy_gameserver_relay_session_id_;
  ::google::protobuf::uint32 to_relay_session_id_;
  ::std::string* forward_target_relay_routing_token_;
  ::google::protobuf::uint32 from_relay_session_id_;
  ::google::protobuf::uint32 forward_target_revision_;
  ::std::string* debug_;
  int relay_mode_;
  ::google::protobuf::uint32 reason_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionClosed* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramNoConnection : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramNoConnection();
  virtual ~CMsgSteamDatagramNoConnection();

  CMsgSteamDatagramNoConnection(const CMsgSteamDatagramNoConnection& from);

  inline CMsgSteamDatagramNoConnection& operator=(const CMsgSteamDatagramNoConnection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramNoConnection& default_instance();

  void Swap(CMsgSteamDatagramNoConnection* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramNoConnection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramNoConnection& from);
  void MergeFrom(const CMsgSteamDatagramNoConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 to_connection_id = 5;
  inline bool has_to_connection_id() const;
  inline void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 5;
  inline ::google::protobuf::uint32 to_connection_id() const;
  inline void set_to_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 from_connection_id = 6;
  inline bool has_from_connection_id() const;
  inline void clear_from_connection_id();
  static const int kFromConnectionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 from_connection_id() const;
  inline void set_from_connection_id(::google::protobuf::uint32 value);

  // optional uint32 legacy_gameserver_relay_session_id = 2;
  inline bool has_legacy_gameserver_relay_session_id() const;
  inline void clear_legacy_gameserver_relay_session_id();
  static const int kLegacyGameserverRelaySessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 legacy_gameserver_relay_session_id() const;
  inline void set_legacy_gameserver_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 to_relay_session_id = 9;
  inline bool has_to_relay_session_id() const;
  inline void clear_to_relay_session_id();
  static const int kToRelaySessionIdFieldNumber = 9;
  inline ::google::protobuf::uint32 to_relay_session_id() const;
  inline void set_to_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 from_relay_session_id = 10;
  inline bool has_from_relay_session_id() const;
  inline void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 10;
  inline ::google::protobuf::uint32 from_relay_session_id() const;
  inline void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed64 from_steam_id = 3;
  inline bool has_from_steam_id() const;
  inline void clear_from_steam_id();
  static const int kFromSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 from_steam_id() const;
  inline void set_from_steam_id(::google::protobuf::uint64 value);

  // optional bool end_to_end = 4;
  inline bool has_end_to_end() const;
  inline void clear_end_to_end();
  static const int kEndToEndFieldNumber = 4;
  inline bool end_to_end() const;
  inline void set_end_to_end(bool value);

  // optional fixed32 dummy_pad = 1023;
  inline bool has_dummy_pad() const;
  inline void clear_dummy_pad();
  static const int kDummyPadFieldNumber = 1023;
  inline ::google::protobuf::uint32 dummy_pad() const;
  inline void set_dummy_pad(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramNoConnection)
 private:
  inline void set_has_to_connection_id();
  inline void clear_has_to_connection_id();
  inline void set_has_from_connection_id();
  inline void clear_has_from_connection_id();
  inline void set_has_legacy_gameserver_relay_session_id();
  inline void clear_has_legacy_gameserver_relay_session_id();
  inline void set_has_to_relay_session_id();
  inline void clear_has_to_relay_session_id();
  inline void set_has_from_relay_session_id();
  inline void clear_has_from_relay_session_id();
  inline void set_has_from_steam_id();
  inline void clear_has_from_steam_id();
  inline void set_has_end_to_end();
  inline void clear_has_end_to_end();
  inline void set_has_dummy_pad();
  inline void clear_has_dummy_pad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 from_connection_id_;
  ::google::protobuf::uint32 legacy_gameserver_relay_session_id_;
  ::google::protobuf::uint32 to_relay_session_id_;
  ::google::protobuf::uint64 from_steam_id_;
  ::google::protobuf::uint32 from_relay_session_id_;
  bool end_to_end_;
  ::google::protobuf::uint32 dummy_pad_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramNoConnection* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramGameserverSessionRequest : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramGameserverSessionRequest();
  virtual ~CMsgSteamDatagramGameserverSessionRequest();

  CMsgSteamDatagramGameserverSessionRequest(const CMsgSteamDatagramGameserverSessionRequest& from);

  inline CMsgSteamDatagramGameserverSessionRequest& operator=(const CMsgSteamDatagramGameserverSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramGameserverSessionRequest& default_instance();

  void Swap(CMsgSteamDatagramGameserverSessionRequest* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramGameserverSessionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from);
  void MergeFrom(const CMsgSteamDatagramGameserverSessionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes ticket = 1;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 1;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const void* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // optional fixed32 challenge_time = 3;
  inline bool has_challenge_time() const;
  inline void clear_challenge_time();
  static const int kChallengeTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 challenge_time() const;
  inline void set_challenge_time(::google::protobuf::uint32 value);

  // optional fixed64 challenge = 4;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 4;
  inline ::google::protobuf::uint64 challenge() const;
  inline void set_challenge(::google::protobuf::uint64 value);

  // optional fixed32 client_connection_id = 5;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 5;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 8;
  inline bool has_server_connection_id() const;
  inline void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 server_connection_id() const;
  inline void set_server_connection_id(::google::protobuf::uint32 value);

  // optional uint32 network_config_version = 6;
  inline bool has_network_config_version() const;
  inline void clear_network_config_version();
  static const int kNetworkConfigVersionFieldNumber = 6;
  inline ::google::protobuf::uint32 network_config_version() const;
  inline void set_network_config_version(::google::protobuf::uint32 value);

  // optional uint32 protocol_version = 7;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 7;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramGameserverSessionRequest)
 private:
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_challenge_time();
  inline void clear_has_challenge_time();
  inline void set_has_challenge();
  inline void clear_has_challenge();
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_server_connection_id();
  inline void clear_has_server_connection_id();
  inline void set_has_network_config_version();
  inline void clear_has_network_config_version();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ticket_;
  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 challenge_time_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 server_connection_id_;
  ::google::protobuf::uint32 network_config_version_;
  ::google::protobuf::uint32 protocol_version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramGameserverSessionRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramGameserverSessionEstablished : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramGameserverSessionEstablished();
  virtual ~CMsgSteamDatagramGameserverSessionEstablished();

  CMsgSteamDatagramGameserverSessionEstablished(const CMsgSteamDatagramGameserverSessionEstablished& from);

  inline CMsgSteamDatagramGameserverSessionEstablished& operator=(const CMsgSteamDatagramGameserverSessionEstablished& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramGameserverSessionEstablished& default_instance();

  void Swap(CMsgSteamDatagramGameserverSessionEstablished* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramGameserverSessionEstablished* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from);
  void MergeFrom(const CMsgSteamDatagramGameserverSessionEstablished& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 gameserver_steam_id = 3;
  inline bool has_gameserver_steam_id() const;
  inline void clear_gameserver_steam_id();
  static const int kGameserverSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 gameserver_steam_id() const;
  inline void set_gameserver_steam_id(::google::protobuf::uint64 value);

  // optional uint32 seconds_until_shutdown = 4;
  inline bool has_seconds_until_shutdown() const;
  inline void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 4;
  inline ::google::protobuf::uint32 seconds_until_shutdown() const;
  inline void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2c = 6;
  inline bool has_seq_num_r2c() const;
  inline void clear_seq_num_r2c();
  static const int kSeqNumR2CFieldNumber = 6;
  inline ::google::protobuf::uint32 seq_num_r2c() const;
  inline void set_seq_num_r2c(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramGameserverSessionEstablished)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_gameserver_steam_id();
  inline void clear_has_gameserver_steam_id();
  inline void set_has_seconds_until_shutdown();
  inline void clear_has_seconds_until_shutdown();
  inline void set_has_seq_num_r2c();
  inline void clear_has_seq_num_r2c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gameserver_steam_id_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 seq_num_r2c_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramGameserverSessionEstablished* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsClientToRouter : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionStatsClientToRouter();
  virtual ~CMsgSteamDatagramConnectionStatsClientToRouter();

  CMsgSteamDatagramConnectionStatsClientToRouter(const CMsgSteamDatagramConnectionStatsClientToRouter& from);

  inline CMsgSteamDatagramConnectionStatsClientToRouter& operator=(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionStatsClientToRouter& default_instance();

  void Swap(CMsgSteamDatagramConnectionStatsClientToRouter* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionStatsClientToRouter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsClientToRouter_Flags Flags;
  static const Flags ACK_REQUEST_RELAY = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE = CMsgSteamDatagramConnectionStatsClientToRouter_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsClientToRouter_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  inline bool has_quality_relay() const;
  inline void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  inline void set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  inline bool has_quality_e2e() const;
  inline void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  inline void set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // repeated fixed32 ack_relay = 4;
  inline int ack_relay_size() const;
  inline void clear_ack_relay();
  static const int kAckRelayFieldNumber = 4;
  inline ::google::protobuf::uint32 ack_relay(int index) const;
  inline void set_ack_relay(int index, ::google::protobuf::uint32 value);
  inline void add_ack_relay(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 5;
  inline int legacy_ack_e2e_size() const;
  inline void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 5;
  inline ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  inline void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  inline void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional uint32 flags = 6;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 6;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 8;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_c2r = 9;
  inline bool has_seq_num_c2r() const;
  inline void clear_seq_num_c2r();
  static const int kSeqNumC2RFieldNumber = 9;
  inline ::google::protobuf::uint32 seq_num_c2r() const;
  inline void set_seq_num_c2r(::google::protobuf::uint32 value);

  // optional uint32 seq_num_c2s = 10;
  inline bool has_seq_num_c2s() const;
  inline void clear_seq_num_c2s();
  static const int kSeqNumC2SFieldNumber = 10;
  inline ::google::protobuf::uint32 seq_num_c2s() const;
  inline void set_seq_num_c2s(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionStatsClientToRouter)
 private:
  inline void set_has_quality_relay();
  inline void clear_has_quality_relay();
  inline void set_has_quality_e2e();
  inline void clear_has_quality_e2e();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_seq_num_c2r();
  inline void clear_has_seq_num_c2r();
  inline void set_has_seq_num_c2s();
  inline void clear_has_seq_num_c2s();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 seq_num_c2r_;
  ::google::protobuf::uint32 seq_num_c2s_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionStatsClientToRouter* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsRouterToClient : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionStatsRouterToClient();
  virtual ~CMsgSteamDatagramConnectionStatsRouterToClient();

  CMsgSteamDatagramConnectionStatsRouterToClient(const CMsgSteamDatagramConnectionStatsRouterToClient& from);

  inline CMsgSteamDatagramConnectionStatsRouterToClient& operator=(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionStatsRouterToClient& default_instance();

  void Swap(CMsgSteamDatagramConnectionStatsRouterToClient* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionStatsRouterToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsRouterToClient_Flags Flags;
  static const Flags ACK_REQUEST_RELAY = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE = CMsgSteamDatagramConnectionStatsRouterToClient_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsRouterToClient_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  inline bool has_quality_relay() const;
  inline void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  inline void set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  inline bool has_quality_e2e() const;
  inline void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  inline void set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 seconds_until_shutdown = 6;
  inline bool has_seconds_until_shutdown() const;
  inline void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 6;
  inline ::google::protobuf::uint32 seconds_until_shutdown() const;
  inline void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional fixed32 migrate_request_ip = 10;
  inline bool has_migrate_request_ip() const;
  inline void clear_migrate_request_ip();
  static const int kMigrateRequestIpFieldNumber = 10;
  inline ::google::protobuf::uint32 migrate_request_ip() const;
  inline void set_migrate_request_ip(::google::protobuf::uint32 value);

  // optional uint32 migrate_request_port = 11;
  inline bool has_migrate_request_port() const;
  inline void clear_migrate_request_port();
  static const int kMigrateRequestPortFieldNumber = 11;
  inline ::google::protobuf::uint32 migrate_request_port() const;
  inline void set_migrate_request_port(::google::protobuf::uint32 value);

  // optional uint32 scoring_penalty_relay_cluster = 12;
  inline bool has_scoring_penalty_relay_cluster() const;
  inline void clear_scoring_penalty_relay_cluster();
  static const int kScoringPenaltyRelayClusterFieldNumber = 12;
  inline ::google::protobuf::uint32 scoring_penalty_relay_cluster() const;
  inline void set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value);

  // repeated fixed32 ack_relay = 13;
  inline int ack_relay_size() const;
  inline void clear_ack_relay();
  static const int kAckRelayFieldNumber = 13;
  inline ::google::protobuf::uint32 ack_relay(int index) const;
  inline void set_ack_relay(int index, ::google::protobuf::uint32 value);
  inline void add_ack_relay(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 14;
  inline int legacy_ack_e2e_size() const;
  inline void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 14;
  inline ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  inline void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  inline void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional uint32 flags = 15;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 15;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 7;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 7;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2c = 8;
  inline bool has_seq_num_r2c() const;
  inline void clear_seq_num_r2c();
  static const int kSeqNumR2CFieldNumber = 8;
  inline ::google::protobuf::uint32 seq_num_r2c() const;
  inline void set_seq_num_r2c(::google::protobuf::uint32 value);

  // optional uint32 seq_num_s2c = 9;
  inline bool has_seq_num_s2c() const;
  inline void clear_seq_num_s2c();
  static const int kSeqNumS2CFieldNumber = 9;
  inline ::google::protobuf::uint32 seq_num_s2c() const;
  inline void set_seq_num_s2c(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionStatsRouterToClient)
 private:
  inline void set_has_quality_relay();
  inline void clear_has_quality_relay();
  inline void set_has_quality_e2e();
  inline void clear_has_quality_e2e();
  inline void set_has_seconds_until_shutdown();
  inline void clear_has_seconds_until_shutdown();
  inline void set_has_migrate_request_ip();
  inline void clear_has_migrate_request_ip();
  inline void set_has_migrate_request_port();
  inline void clear_has_migrate_request_port();
  inline void set_has_scoring_penalty_relay_cluster();
  inline void clear_has_scoring_penalty_relay_cluster();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_seq_num_r2c();
  inline void clear_has_seq_num_r2c();
  inline void set_has_seq_num_s2c();
  inline void clear_has_seq_num_s2c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 migrate_request_ip_;
  ::google::protobuf::uint32 migrate_request_port_;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 seq_num_r2c_;
  ::google::protobuf::uint32 seq_num_s2c_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionStatsRouterToClient* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsRouterToServer : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionStatsRouterToServer();
  virtual ~CMsgSteamDatagramConnectionStatsRouterToServer();

  CMsgSteamDatagramConnectionStatsRouterToServer(const CMsgSteamDatagramConnectionStatsRouterToServer& from);

  inline CMsgSteamDatagramConnectionStatsRouterToServer& operator=(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionStatsRouterToServer& default_instance();

  void Swap(CMsgSteamDatagramConnectionStatsRouterToServer* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionStatsRouterToServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsRouterToServer_Flags Flags;
  static const Flags ACK_REQUEST_RELAY = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE = CMsgSteamDatagramConnectionStatsRouterToServer_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsRouterToServer_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  inline bool has_quality_relay() const;
  inline void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  inline void set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  inline bool has_quality_e2e() const;
  inline void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  inline void set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // repeated fixed32 ack_relay = 10;
  inline int ack_relay_size() const;
  inline void clear_ack_relay();
  static const int kAckRelayFieldNumber = 10;
  inline ::google::protobuf::uint32 ack_relay(int index) const;
  inline void set_ack_relay(int index, ::google::protobuf::uint32 value);
  inline void add_ack_relay(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 11;
  inline int legacy_ack_e2e_size() const;
  inline void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 11;
  inline ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  inline void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  inline void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional uint32 flags = 12;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 12;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2s = 5;
  inline bool has_seq_num_r2s() const;
  inline void clear_seq_num_r2s();
  static const int kSeqNumR2SFieldNumber = 5;
  inline ::google::protobuf::uint32 seq_num_r2s() const;
  inline void set_seq_num_r2s(::google::protobuf::uint32 value);

  // optional uint32 seq_num_c2s = 6;
  inline bool has_seq_num_c2s() const;
  inline void clear_seq_num_c2s();
  static const int kSeqNumC2SFieldNumber = 6;
  inline ::google::protobuf::uint32 seq_num_c2s() const;
  inline void set_seq_num_c2s(::google::protobuf::uint32 value);

  // optional fixed64 client_steam_id = 7;
  inline bool has_client_steam_id() const;
  inline void clear_client_steam_id();
  static const int kClientSteamIdFieldNumber = 7;
  inline ::google::protobuf::uint64 client_steam_id() const;
  inline void set_client_steam_id(::google::protobuf::uint64 value);

  // optional uint32 relay_session_id = 8;
  inline bool has_relay_session_id() const;
  inline void clear_relay_session_id();
  static const int kRelaySessionIdFieldNumber = 8;
  inline ::google::protobuf::uint32 relay_session_id() const;
  inline void set_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 9;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 9;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 13;
  inline bool has_server_connection_id() const;
  inline void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 13;
  inline ::google::protobuf::uint32 server_connection_id() const;
  inline void set_server_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionStatsRouterToServer)
 private:
  inline void set_has_quality_relay();
  inline void clear_has_quality_relay();
  inline void set_has_quality_e2e();
  inline void clear_has_quality_e2e();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_seq_num_r2s();
  inline void clear_has_seq_num_r2s();
  inline void set_has_seq_num_c2s();
  inline void clear_has_seq_num_c2s();
  inline void set_has_client_steam_id();
  inline void clear_has_client_steam_id();
  inline void set_has_relay_session_id();
  inline void clear_has_relay_session_id();
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_server_connection_id();
  inline void clear_has_server_connection_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 seq_num_r2s_;
  ::google::protobuf::uint64 client_steam_id_;
  ::google::protobuf::uint32 seq_num_c2s_;
  ::google::protobuf::uint32 relay_session_id_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 server_connection_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionStatsRouterToServer* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsServerToRouter : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionStatsServerToRouter();
  virtual ~CMsgSteamDatagramConnectionStatsServerToRouter();

  CMsgSteamDatagramConnectionStatsServerToRouter(const CMsgSteamDatagramConnectionStatsServerToRouter& from);

  inline CMsgSteamDatagramConnectionStatsServerToRouter& operator=(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionStatsServerToRouter& default_instance();

  void Swap(CMsgSteamDatagramConnectionStatsServerToRouter* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionStatsServerToRouter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsServerToRouter_Flags Flags;
  static const Flags ACK_REQUEST_RELAY = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE = CMsgSteamDatagramConnectionStatsServerToRouter_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsServerToRouter_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  inline bool has_quality_relay() const;
  inline void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  inline void set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  inline bool has_quality_e2e() const;
  inline void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  inline void set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // repeated fixed32 ack_relay = 8;
  inline int ack_relay_size() const;
  inline void clear_ack_relay();
  static const int kAckRelayFieldNumber = 8;
  inline ::google::protobuf::uint32 ack_relay(int index) const;
  inline void set_ack_relay(int index, ::google::protobuf::uint32 value);
  inline void add_ack_relay(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 9;
  inline int legacy_ack_e2e_size() const;
  inline void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 9;
  inline ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  inline void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  inline void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional uint32 flags = 10;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 10;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 seq_num_s2r = 3;
  inline bool has_seq_num_s2r() const;
  inline void clear_seq_num_s2r();
  static const int kSeqNumS2RFieldNumber = 3;
  inline ::google::protobuf::uint32 seq_num_s2r() const;
  inline void set_seq_num_s2r(::google::protobuf::uint32 value);

  // optional uint32 seq_num_s2c = 4;
  inline bool has_seq_num_s2c() const;
  inline void clear_seq_num_s2c();
  static const int kSeqNumS2CFieldNumber = 4;
  inline ::google::protobuf::uint32 seq_num_s2c() const;
  inline void set_seq_num_s2c(::google::protobuf::uint32 value);

  // optional fixed64 client_steam_id = 5;
  inline bool has_client_steam_id() const;
  inline void clear_client_steam_id();
  static const int kClientSteamIdFieldNumber = 5;
  inline ::google::protobuf::uint64 client_steam_id() const;
  inline void set_client_steam_id(::google::protobuf::uint64 value);

  // optional uint32 relay_session_id = 6;
  inline bool has_relay_session_id() const;
  inline void clear_relay_session_id();
  static const int kRelaySessionIdFieldNumber = 6;
  inline ::google::protobuf::uint32 relay_session_id() const;
  inline void set_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 client_connection_id = 7;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 7;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional fixed32 server_connection_id = 11;
  inline bool has_server_connection_id() const;
  inline void clear_server_connection_id();
  static const int kServerConnectionIdFieldNumber = 11;
  inline ::google::protobuf::uint32 server_connection_id() const;
  inline void set_server_connection_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionStatsServerToRouter)
 private:
  inline void set_has_quality_relay();
  inline void clear_has_quality_relay();
  inline void set_has_quality_e2e();
  inline void clear_has_quality_e2e();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_seq_num_s2r();
  inline void clear_has_seq_num_s2r();
  inline void set_has_seq_num_s2c();
  inline void clear_has_seq_num_s2c();
  inline void set_has_client_steam_id();
  inline void clear_has_client_steam_id();
  inline void set_has_relay_session_id();
  inline void clear_has_relay_session_id();
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_server_connection_id();
  inline void clear_has_server_connection_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 seq_num_s2r_;
  ::google::protobuf::uint64 client_steam_id_;
  ::google::protobuf::uint32 seq_num_s2c_;
  ::google::protobuf::uint32 relay_session_id_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint32 server_connection_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionStatsServerToRouter* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PSessionRequestBody : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PSessionRequestBody();
  virtual ~CMsgSteamDatagramP2PSessionRequestBody();

  CMsgSteamDatagramP2PSessionRequestBody(const CMsgSteamDatagramP2PSessionRequestBody& from);

  inline CMsgSteamDatagramP2PSessionRequestBody& operator=(const CMsgSteamDatagramP2PSessionRequestBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PSessionRequestBody& default_instance();

  void Swap(CMsgSteamDatagramP2PSessionRequestBody* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PSessionRequestBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody& from);
  void MergeFrom(const CMsgSteamDatagramP2PSessionRequestBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 challenge_time = 1;
  inline bool has_challenge_time() const;
  inline void clear_challenge_time();
  static const int kChallengeTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 challenge_time() const;
  inline void set_challenge_time(::google::protobuf::uint32 value);

  // optional fixed64 challenge = 2;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 2;
  inline ::google::protobuf::uint64 challenge() const;
  inline void set_challenge(::google::protobuf::uint64 value);

  // optional fixed32 client_connection_id = 3;
  inline bool has_client_connection_id() const;
  inline void clear_client_connection_id();
  static const int kClientConnectionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 client_connection_id() const;
  inline void set_client_connection_id(::google::protobuf::uint32 value);

  // optional fixed64 peer_steam_id = 4;
  inline bool has_peer_steam_id() const;
  inline void clear_peer_steam_id();
  static const int kPeerSteamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 peer_steam_id() const;
  inline void set_peer_steam_id(::google::protobuf::uint64 value);

  // optional fixed32 peer_connection_id = 5;
  inline bool has_peer_connection_id() const;
  inline void clear_peer_connection_id();
  static const int kPeerConnectionIdFieldNumber = 5;
  inline ::google::protobuf::uint32 peer_connection_id() const;
  inline void set_peer_connection_id(::google::protobuf::uint32 value);

  // optional uint32 protocol_version = 8;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 8;
  inline ::google::protobuf::uint32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::uint32 value);

  // optional uint32 network_config_version = 9;
  inline bool has_network_config_version() const;
  inline void clear_network_config_version();
  static const int kNetworkConfigVersionFieldNumber = 9;
  inline ::google::protobuf::uint32 network_config_version() const;
  inline void set_network_config_version(::google::protobuf::uint32 value);

  // optional fixed32 public_ip = 10;
  inline bool has_public_ip() const;
  inline void clear_public_ip();
  static const int kPublicIpFieldNumber = 10;
  inline ::google::protobuf::uint32 public_ip() const;
  inline void set_public_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PSessionRequestBody)
 private:
  inline void set_has_challenge_time();
  inline void clear_has_challenge_time();
  inline void set_has_challenge();
  inline void clear_has_challenge();
  inline void set_has_client_connection_id();
  inline void clear_has_client_connection_id();
  inline void set_has_peer_steam_id();
  inline void clear_has_peer_steam_id();
  inline void set_has_peer_connection_id();
  inline void clear_has_peer_connection_id();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_network_config_version();
  inline void clear_has_network_config_version();
  inline void set_has_public_ip();
  inline void clear_has_public_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 challenge_;
  ::google::protobuf::uint32 challenge_time_;
  ::google::protobuf::uint32 client_connection_id_;
  ::google::protobuf::uint64 peer_steam_id_;
  ::google::protobuf::uint32 peer_connection_id_;
  ::google::protobuf::uint32 protocol_version_;
  ::google::protobuf::uint32 network_config_version_;
  ::google::protobuf::uint32 public_ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PSessionRequestBody* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PSessionRequest : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PSessionRequest();
  virtual ~CMsgSteamDatagramP2PSessionRequest();

  CMsgSteamDatagramP2PSessionRequest(const CMsgSteamDatagramP2PSessionRequest& from);

  inline CMsgSteamDatagramP2PSessionRequest& operator=(const CMsgSteamDatagramP2PSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PSessionRequest& default_instance();

  void Swap(CMsgSteamDatagramP2PSessionRequest* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PSessionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PSessionRequest& from);
  void MergeFrom(const CMsgSteamDatagramP2PSessionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  inline bool has_cert() const;
  inline void clear_cert();
  static const int kCertFieldNumber = 1;
  inline const ::CMsgSteamDatagramCertificateSigned& cert() const;
  inline ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  inline ::CMsgSteamDatagramCertificateSigned* release_cert();
  inline void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);

  // optional bytes body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional bytes signature = 3;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 3;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PSessionRequest)
 private:
  inline void set_has_cert();
  inline void clear_has_cert();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramCertificateSigned* cert_;
  ::std::string* body_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PSessionRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PSessionEstablished : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PSessionEstablished();
  virtual ~CMsgSteamDatagramP2PSessionEstablished();

  CMsgSteamDatagramP2PSessionEstablished(const CMsgSteamDatagramP2PSessionEstablished& from);

  inline CMsgSteamDatagramP2PSessionEstablished& operator=(const CMsgSteamDatagramP2PSessionEstablished& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PSessionEstablished& default_instance();

  void Swap(CMsgSteamDatagramP2PSessionEstablished* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PSessionEstablished* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PSessionEstablished& from);
  void MergeFrom(const CMsgSteamDatagramP2PSessionEstablished& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seconds_until_shutdown = 3;
  inline bool has_seconds_until_shutdown() const;
  inline void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 3;
  inline ::google::protobuf::uint32 seconds_until_shutdown() const;
  inline void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional bytes relay_routing_token = 4;
  inline bool has_relay_routing_token() const;
  inline void clear_relay_routing_token();
  static const int kRelayRoutingTokenFieldNumber = 4;
  inline const ::std::string& relay_routing_token() const;
  inline void set_relay_routing_token(const ::std::string& value);
  inline void set_relay_routing_token(const char* value);
  inline void set_relay_routing_token(const void* value, size_t size);
  inline ::std::string* mutable_relay_routing_token();
  inline ::std::string* release_relay_routing_token();
  inline void set_allocated_relay_routing_token(::std::string* relay_routing_token);

  // optional uint32 seq_num_r2c = 5;
  inline bool has_seq_num_r2c() const;
  inline void clear_seq_num_r2c();
  static const int kSeqNumR2CFieldNumber = 5;
  inline ::google::protobuf::uint32 seq_num_r2c() const;
  inline void set_seq_num_r2c(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PSessionEstablished)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_seconds_until_shutdown();
  inline void clear_has_seconds_until_shutdown();
  inline void set_has_relay_routing_token();
  inline void clear_has_relay_routing_token();
  inline void set_has_seq_num_r2c();
  inline void clear_has_seq_num_r2c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::std::string* relay_routing_token_;
  ::google::protobuf::uint32 seq_num_r2c_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PSessionEstablished* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PRoutes_RelayCluster : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PRoutes_RelayCluster();
  virtual ~CMsgSteamDatagramP2PRoutes_RelayCluster();

  CMsgSteamDatagramP2PRoutes_RelayCluster(const CMsgSteamDatagramP2PRoutes_RelayCluster& from);

  inline CMsgSteamDatagramP2PRoutes_RelayCluster& operator=(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PRoutes_RelayCluster& default_instance();

  void Swap(CMsgSteamDatagramP2PRoutes_RelayCluster* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PRoutes_RelayCluster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from);
  void MergeFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 pop_id = 1;
  inline bool has_pop_id() const;
  inline void clear_pop_id();
  static const int kPopIdFieldNumber = 1;
  inline ::google::protobuf::uint32 pop_id() const;
  inline void set_pop_id(::google::protobuf::uint32 value);

  // optional uint32 ping_ms = 2;
  inline bool has_ping_ms() const;
  inline void clear_ping_ms();
  static const int kPingMsFieldNumber = 2;
  inline ::google::protobuf::uint32 ping_ms() const;
  inline void set_ping_ms(::google::protobuf::uint32 value);

  // optional uint32 score_penalty = 3;
  inline bool has_score_penalty() const;
  inline void clear_score_penalty();
  static const int kScorePenaltyFieldNumber = 3;
  inline ::google::protobuf::uint32 score_penalty() const;
  inline void set_score_penalty(::google::protobuf::uint32 value);

  // optional bytes session_relay_routing_token = 4;
  inline bool has_session_relay_routing_token() const;
  inline void clear_session_relay_routing_token();
  static const int kSessionRelayRoutingTokenFieldNumber = 4;
  inline const ::std::string& session_relay_routing_token() const;
  inline void set_session_relay_routing_token(const ::std::string& value);
  inline void set_session_relay_routing_token(const char* value);
  inline void set_session_relay_routing_token(const void* value, size_t size);
  inline ::std::string* mutable_session_relay_routing_token();
  inline ::std::string* release_session_relay_routing_token();
  inline void set_allocated_session_relay_routing_token(::std::string* session_relay_routing_token);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PRoutes.RelayCluster)
 private:
  inline void set_has_pop_id();
  inline void clear_has_pop_id();
  inline void set_has_ping_ms();
  inline void clear_has_ping_ms();
  inline void set_has_score_penalty();
  inline void clear_has_score_penalty();
  inline void set_has_session_relay_routing_token();
  inline void clear_has_session_relay_routing_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pop_id_;
  ::google::protobuf::uint32 ping_ms_;
  ::std::string* session_relay_routing_token_;
  ::google::protobuf::uint32 score_penalty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PRoutes_RelayCluster* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PRoutes_Route : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PRoutes_Route();
  virtual ~CMsgSteamDatagramP2PRoutes_Route();

  CMsgSteamDatagramP2PRoutes_Route(const CMsgSteamDatagramP2PRoutes_Route& from);

  inline CMsgSteamDatagramP2PRoutes_Route& operator=(const CMsgSteamDatagramP2PRoutes_Route& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PRoutes_Route& default_instance();

  void Swap(CMsgSteamDatagramP2PRoutes_Route* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PRoutes_Route* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PRoutes_Route& from);
  void MergeFrom(const CMsgSteamDatagramP2PRoutes_Route& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 my_pop_id = 1;
  inline bool has_my_pop_id() const;
  inline void clear_my_pop_id();
  static const int kMyPopIdFieldNumber = 1;
  inline ::google::protobuf::uint32 my_pop_id() const;
  inline void set_my_pop_id(::google::protobuf::uint32 value);

  // optional fixed32 your_pop_id = 2;
  inline bool has_your_pop_id() const;
  inline void clear_your_pop_id();
  static const int kYourPopIdFieldNumber = 2;
  inline ::google::protobuf::uint32 your_pop_id() const;
  inline void set_your_pop_id(::google::protobuf::uint32 value);

  // optional uint32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PRoutes.Route)
 private:
  inline void set_has_my_pop_id();
  inline void clear_has_my_pop_id();
  inline void set_has_your_pop_id();
  inline void clear_has_your_pop_id();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 my_pop_id_;
  ::google::protobuf::uint32 your_pop_id_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PRoutes_Route* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PRoutes : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PRoutes();
  virtual ~CMsgSteamDatagramP2PRoutes();

  CMsgSteamDatagramP2PRoutes(const CMsgSteamDatagramP2PRoutes& from);

  inline CMsgSteamDatagramP2PRoutes& operator=(const CMsgSteamDatagramP2PRoutes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PRoutes& default_instance();

  void Swap(CMsgSteamDatagramP2PRoutes* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PRoutes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PRoutes& from);
  void MergeFrom(const CMsgSteamDatagramP2PRoutes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramP2PRoutes_RelayCluster RelayCluster;
  typedef CMsgSteamDatagramP2PRoutes_Route Route;

  // accessors -------------------------------------------------------

  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  inline int relay_clusters_size() const;
  inline void clear_relay_clusters();
  static const int kRelayClustersFieldNumber = 1;
  inline const ::CMsgSteamDatagramP2PRoutes_RelayCluster& relay_clusters(int index) const;
  inline ::CMsgSteamDatagramP2PRoutes_RelayCluster* mutable_relay_clusters(int index);
  inline ::CMsgSteamDatagramP2PRoutes_RelayCluster* add_relay_clusters();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_RelayCluster >&
      relay_clusters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_RelayCluster >*
      mutable_relay_clusters();

  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  inline int routes_size() const;
  inline void clear_routes();
  static const int kRoutesFieldNumber = 2;
  inline const ::CMsgSteamDatagramP2PRoutes_Route& routes(int index) const;
  inline ::CMsgSteamDatagramP2PRoutes_Route* mutable_routes(int index);
  inline ::CMsgSteamDatagramP2PRoutes_Route* add_routes();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_Route >&
      routes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_Route >*
      mutable_routes();

  // optional uint32 revision = 3;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 3;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PRoutes)
 private:
  inline void set_has_revision();
  inline void clear_has_revision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_RelayCluster > relay_clusters_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_Route > routes_;
  ::google::protobuf::uint32 revision_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PRoutes* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PRendezvous : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PRendezvous();
  virtual ~CMsgSteamDatagramP2PRendezvous();

  CMsgSteamDatagramP2PRendezvous(const CMsgSteamDatagramP2PRendezvous& from);

  inline CMsgSteamDatagramP2PRendezvous& operator=(const CMsgSteamDatagramP2PRendezvous& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PRendezvous& default_instance();

  void Swap(CMsgSteamDatagramP2PRendezvous* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PRendezvous* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PRendezvous& from);
  void MergeFrom(const CMsgSteamDatagramP2PRendezvous& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 to_connection_id = 1;
  inline bool has_to_connection_id() const;
  inline void clear_to_connection_id();
  static const int kToConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 to_connection_id() const;
  inline void set_to_connection_id(::google::protobuf::uint32 value);

  // optional .CMsgSteamDatagramP2PRoutes routes = 2;
  inline bool has_routes() const;
  inline void clear_routes();
  static const int kRoutesFieldNumber = 2;
  inline const ::CMsgSteamDatagramP2PRoutes& routes() const;
  inline ::CMsgSteamDatagramP2PRoutes* mutable_routes();
  inline ::CMsgSteamDatagramP2PRoutes* release_routes();
  inline void set_allocated_routes(::CMsgSteamDatagramP2PRoutes* routes);

  // optional uint32 ack_peer_routes_revision = 3;
  inline bool has_ack_peer_routes_revision() const;
  inline void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 3;
  inline ::google::protobuf::uint32 ack_peer_routes_revision() const;
  inline void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // optional .CMsgSteamDatagramConnectRequest connect_request = 4;
  inline bool has_connect_request() const;
  inline void clear_connect_request();
  static const int kConnectRequestFieldNumber = 4;
  inline const ::CMsgSteamDatagramConnectRequest& connect_request() const;
  inline ::CMsgSteamDatagramConnectRequest* mutable_connect_request();
  inline ::CMsgSteamDatagramConnectRequest* release_connect_request();
  inline void set_allocated_connect_request(::CMsgSteamDatagramConnectRequest* connect_request);

  // optional .CMsgSteamDatagramConnectOK connect_ok = 5;
  inline bool has_connect_ok() const;
  inline void clear_connect_ok();
  static const int kConnectOkFieldNumber = 5;
  inline const ::CMsgSteamDatagramConnectOK& connect_ok() const;
  inline ::CMsgSteamDatagramConnectOK* mutable_connect_ok();
  inline ::CMsgSteamDatagramConnectOK* release_connect_ok();
  inline void set_allocated_connect_ok(::CMsgSteamDatagramConnectOK* connect_ok);

  // optional .CMsgSteamDatagramConnectionClosed connection_closed = 6;
  inline bool has_connection_closed() const;
  inline void clear_connection_closed();
  static const int kConnectionClosedFieldNumber = 6;
  inline const ::CMsgSteamDatagramConnectionClosed& connection_closed() const;
  inline ::CMsgSteamDatagramConnectionClosed* mutable_connection_closed();
  inline ::CMsgSteamDatagramConnectionClosed* release_connection_closed();
  inline void set_allocated_connection_closed(::CMsgSteamDatagramConnectionClosed* connection_closed);

  // optional bytes failed_relay_routing_token = 7;
  inline bool has_failed_relay_routing_token() const;
  inline void clear_failed_relay_routing_token();
  static const int kFailedRelayRoutingTokenFieldNumber = 7;
  inline const ::std::string& failed_relay_routing_token() const;
  inline void set_failed_relay_routing_token(const ::std::string& value);
  inline void set_failed_relay_routing_token(const char* value);
  inline void set_failed_relay_routing_token(const void* value, size_t size);
  inline ::std::string* mutable_failed_relay_routing_token();
  inline ::std::string* release_failed_relay_routing_token();
  inline void set_allocated_failed_relay_routing_token(::std::string* failed_relay_routing_token);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PRendezvous)
 private:
  inline void set_has_to_connection_id();
  inline void clear_has_to_connection_id();
  inline void set_has_routes();
  inline void clear_has_routes();
  inline void set_has_ack_peer_routes_revision();
  inline void clear_has_ack_peer_routes_revision();
  inline void set_has_connect_request();
  inline void clear_has_connect_request();
  inline void set_has_connect_ok();
  inline void clear_has_connect_ok();
  inline void set_has_connection_closed();
  inline void clear_has_connection_closed();
  inline void set_has_failed_relay_routing_token();
  inline void clear_has_failed_relay_routing_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramP2PRoutes* routes_;
  ::google::protobuf::uint32 to_connection_id_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  ::CMsgSteamDatagramConnectRequest* connect_request_;
  ::CMsgSteamDatagramConnectOK* connect_ok_;
  ::CMsgSteamDatagramConnectionClosed* connection_closed_;
  ::std::string* failed_relay_routing_token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PRendezvous* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsP2PClientToRouter : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionStatsP2PClientToRouter();
  virtual ~CMsgSteamDatagramConnectionStatsP2PClientToRouter();

  CMsgSteamDatagramConnectionStatsP2PClientToRouter(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from);

  inline CMsgSteamDatagramConnectionStatsP2PClientToRouter& operator=(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionStatsP2PClientToRouter& default_instance();

  void Swap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionStatsP2PClientToRouter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags Flags;
  static const Flags ACK_REQUEST_RELAY = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  inline bool has_quality_relay() const;
  inline void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  inline void set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  inline bool has_quality_e2e() const;
  inline void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  inline void set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // repeated fixed32 ack_relay = 3;
  inline int ack_relay_size() const;
  inline void clear_ack_relay();
  static const int kAckRelayFieldNumber = 3;
  inline ::google::protobuf::uint32 ack_relay(int index) const;
  inline void set_ack_relay(int index, ::google::protobuf::uint32 value);
  inline void add_ack_relay(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 4;
  inline int legacy_ack_e2e_size() const;
  inline void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 4;
  inline ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  inline void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  inline void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional uint32 flags = 5;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 5;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional bytes forward_target_relay_routing_token = 6;
  inline bool has_forward_target_relay_routing_token() const;
  inline void clear_forward_target_relay_routing_token();
  static const int kForwardTargetRelayRoutingTokenFieldNumber = 6;
  inline const ::std::string& forward_target_relay_routing_token() const;
  inline void set_forward_target_relay_routing_token(const ::std::string& value);
  inline void set_forward_target_relay_routing_token(const char* value);
  inline void set_forward_target_relay_routing_token(const void* value, size_t size);
  inline ::std::string* mutable_forward_target_relay_routing_token();
  inline ::std::string* release_forward_target_relay_routing_token();
  inline void set_allocated_forward_target_relay_routing_token(::std::string* forward_target_relay_routing_token);

  // optional uint32 forward_target_revision = 7;
  inline bool has_forward_target_revision() const;
  inline void clear_forward_target_revision();
  static const int kForwardTargetRevisionFieldNumber = 7;
  inline ::google::protobuf::uint32 forward_target_revision() const;
  inline void set_forward_target_revision(::google::protobuf::uint32 value);

  // optional bytes routes = 8;
  inline bool has_routes() const;
  inline void clear_routes();
  static const int kRoutesFieldNumber = 8;
  inline const ::std::string& routes() const;
  inline void set_routes(const ::std::string& value);
  inline void set_routes(const char* value);
  inline void set_routes(const void* value, size_t size);
  inline ::std::string* mutable_routes();
  inline ::std::string* release_routes();
  inline void set_allocated_routes(::std::string* routes);

  // optional uint32 ack_peer_routes_revision = 9;
  inline bool has_ack_peer_routes_revision() const;
  inline void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 9;
  inline ::google::protobuf::uint32 ack_peer_routes_revision() const;
  inline void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // optional fixed32 connection_id = 10;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 10;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_c2r = 11;
  inline bool has_seq_num_c2r() const;
  inline void clear_seq_num_c2r();
  static const int kSeqNumC2RFieldNumber = 11;
  inline ::google::protobuf::uint32 seq_num_c2r() const;
  inline void set_seq_num_c2r(::google::protobuf::uint32 value);

  // optional uint32 seq_num_e2e = 12;
  inline bool has_seq_num_e2e() const;
  inline void clear_seq_num_e2e();
  static const int kSeqNumE2EFieldNumber = 12;
  inline ::google::protobuf::uint32 seq_num_e2e() const;
  inline void set_seq_num_e2e(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
 private:
  inline void set_has_quality_relay();
  inline void clear_has_quality_relay();
  inline void set_has_quality_e2e();
  inline void clear_has_quality_e2e();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_forward_target_relay_routing_token();
  inline void clear_has_forward_target_relay_routing_token();
  inline void set_has_forward_target_revision();
  inline void clear_has_forward_target_revision();
  inline void set_has_routes();
  inline void clear_has_routes();
  inline void set_has_ack_peer_routes_revision();
  inline void clear_has_ack_peer_routes_revision();
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_seq_num_c2r();
  inline void clear_has_seq_num_c2r();
  inline void set_has_seq_num_e2e();
  inline void clear_has_seq_num_e2e();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::std::string* forward_target_relay_routing_token_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 forward_target_revision_;
  ::std::string* routes_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 seq_num_c2r_;
  ::google::protobuf::uint32 seq_num_e2e_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionStatsP2PClientToRouter* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsP2PRouterToClient : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionStatsP2PRouterToClient();
  virtual ~CMsgSteamDatagramConnectionStatsP2PRouterToClient();

  CMsgSteamDatagramConnectionStatsP2PRouterToClient(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from);

  inline CMsgSteamDatagramConnectionStatsP2PRouterToClient& operator=(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionStatsP2PRouterToClient& default_instance();

  void Swap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionStatsP2PRouterToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags Flags;
  static const Flags ACK_REQUEST_RELAY = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  inline bool has_quality_relay() const;
  inline void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  inline void set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  inline bool has_quality_e2e() const;
  inline void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  inline void set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // optional uint32 seconds_until_shutdown = 3;
  inline bool has_seconds_until_shutdown() const;
  inline void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 3;
  inline ::google::protobuf::uint32 seconds_until_shutdown() const;
  inline void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional fixed32 migrate_request_ip = 4;
  inline bool has_migrate_request_ip() const;
  inline void clear_migrate_request_ip();
  static const int kMigrateRequestIpFieldNumber = 4;
  inline ::google::protobuf::uint32 migrate_request_ip() const;
  inline void set_migrate_request_ip(::google::protobuf::uint32 value);

  // optional uint32 migrate_request_port = 5;
  inline bool has_migrate_request_port() const;
  inline void clear_migrate_request_port();
  static const int kMigrateRequestPortFieldNumber = 5;
  inline ::google::protobuf::uint32 migrate_request_port() const;
  inline void set_migrate_request_port(::google::protobuf::uint32 value);

  // optional uint32 scoring_penalty_relay_cluster = 6;
  inline bool has_scoring_penalty_relay_cluster() const;
  inline void clear_scoring_penalty_relay_cluster();
  static const int kScoringPenaltyRelayClusterFieldNumber = 6;
  inline ::google::protobuf::uint32 scoring_penalty_relay_cluster() const;
  inline void set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value);

  // repeated fixed32 ack_relay = 7;
  inline int ack_relay_size() const;
  inline void clear_ack_relay();
  static const int kAckRelayFieldNumber = 7;
  inline ::google::protobuf::uint32 ack_relay(int index) const;
  inline void set_ack_relay(int index, ::google::protobuf::uint32 value);
  inline void add_ack_relay(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 8;
  inline int legacy_ack_e2e_size() const;
  inline void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 8;
  inline ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  inline void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  inline void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional uint32 flags = 9;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 9;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 ack_forward_target_revision = 10;
  inline bool has_ack_forward_target_revision() const;
  inline void clear_ack_forward_target_revision();
  static const int kAckForwardTargetRevisionFieldNumber = 10;
  inline ::google::protobuf::uint32 ack_forward_target_revision() const;
  inline void set_ack_forward_target_revision(::google::protobuf::uint32 value);

  // optional bytes routes = 11;
  inline bool has_routes() const;
  inline void clear_routes();
  static const int kRoutesFieldNumber = 11;
  inline const ::std::string& routes() const;
  inline void set_routes(const ::std::string& value);
  inline void set_routes(const char* value);
  inline void set_routes(const void* value, size_t size);
  inline ::std::string* mutable_routes();
  inline ::std::string* release_routes();
  inline void set_allocated_routes(::std::string* routes);

  // optional uint32 ack_peer_routes_revision = 12;
  inline bool has_ack_peer_routes_revision() const;
  inline void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 12;
  inline ::google::protobuf::uint32 ack_peer_routes_revision() const;
  inline void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // optional fixed32 connection_id = 13;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 13;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2c = 14;
  inline bool has_seq_num_r2c() const;
  inline void clear_seq_num_r2c();
  static const int kSeqNumR2CFieldNumber = 14;
  inline ::google::protobuf::uint32 seq_num_r2c() const;
  inline void set_seq_num_r2c(::google::protobuf::uint32 value);

  // optional uint32 seq_num_e2e = 15;
  inline bool has_seq_num_e2e() const;
  inline void clear_seq_num_e2e();
  static const int kSeqNumE2EFieldNumber = 15;
  inline ::google::protobuf::uint32 seq_num_e2e() const;
  inline void set_seq_num_e2e(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
 private:
  inline void set_has_quality_relay();
  inline void clear_has_quality_relay();
  inline void set_has_quality_e2e();
  inline void clear_has_quality_e2e();
  inline void set_has_seconds_until_shutdown();
  inline void clear_has_seconds_until_shutdown();
  inline void set_has_migrate_request_ip();
  inline void clear_has_migrate_request_ip();
  inline void set_has_migrate_request_port();
  inline void clear_has_migrate_request_port();
  inline void set_has_scoring_penalty_relay_cluster();
  inline void clear_has_scoring_penalty_relay_cluster();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_ack_forward_target_revision();
  inline void clear_has_ack_forward_target_revision();
  inline void set_has_routes();
  inline void clear_has_routes();
  inline void set_has_ack_peer_routes_revision();
  inline void clear_has_ack_peer_routes_revision();
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_seq_num_r2c();
  inline void clear_has_seq_num_r2c();
  inline void set_has_seq_num_e2e();
  inline void clear_has_seq_num_e2e();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  ::google::protobuf::uint32 migrate_request_ip_;
  ::google::protobuf::uint32 migrate_request_port_;
  ::google::protobuf::uint32 scoring_penalty_relay_cluster_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 ack_forward_target_revision_;
  ::std::string* routes_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 seq_num_r2c_;
  ::google::protobuf::uint32 seq_num_e2e_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionStatsP2PRouterToClient* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PBadRouteRouterToClient : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PBadRouteRouterToClient();
  virtual ~CMsgSteamDatagramP2PBadRouteRouterToClient();

  CMsgSteamDatagramP2PBadRouteRouterToClient(const CMsgSteamDatagramP2PBadRouteRouterToClient& from);

  inline CMsgSteamDatagramP2PBadRouteRouterToClient& operator=(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PBadRouteRouterToClient& default_instance();

  void Swap(CMsgSteamDatagramP2PBadRouteRouterToClient* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PBadRouteRouterToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from);
  void MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 connection_id = 1;
  inline bool has_connection_id() const;
  inline void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 connection_id() const;
  inline void set_connection_id(::google::protobuf::uint32 value);

  // optional bytes failed_relay_routing_token = 2;
  inline bool has_failed_relay_routing_token() const;
  inline void clear_failed_relay_routing_token();
  static const int kFailedRelayRoutingTokenFieldNumber = 2;
  inline const ::std::string& failed_relay_routing_token() const;
  inline void set_failed_relay_routing_token(const ::std::string& value);
  inline void set_failed_relay_routing_token(const char* value);
  inline void set_failed_relay_routing_token(const void* value, size_t size);
  inline ::std::string* mutable_failed_relay_routing_token();
  inline ::std::string* release_failed_relay_routing_token();
  inline void set_allocated_failed_relay_routing_token(::std::string* failed_relay_routing_token);

  // optional uint32 ack_forward_target_revision = 3;
  inline bool has_ack_forward_target_revision() const;
  inline void clear_ack_forward_target_revision();
  static const int kAckForwardTargetRevisionFieldNumber = 3;
  inline ::google::protobuf::uint32 ack_forward_target_revision() const;
  inline void set_ack_forward_target_revision(::google::protobuf::uint32 value);

  // optional fixed64 kludge_pad = 99;
  inline bool has_kludge_pad() const;
  inline void clear_kludge_pad();
  static const int kKludgePadFieldNumber = 99;
  inline ::google::protobuf::uint64 kludge_pad() const;
  inline void set_kludge_pad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PBadRouteRouterToClient)
 private:
  inline void set_has_connection_id();
  inline void clear_has_connection_id();
  inline void set_has_failed_relay_routing_token();
  inline void clear_has_failed_relay_routing_token();
  inline void set_has_ack_forward_target_revision();
  inline void clear_has_ack_forward_target_revision();
  inline void set_has_kludge_pad();
  inline void clear_has_kludge_pad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* failed_relay_routing_token_;
  ::google::protobuf::uint32 connection_id_;
  ::google::protobuf::uint32 ack_forward_target_revision_;
  ::google::protobuf::uint64 kludge_pad_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PBadRouteRouterToClient* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRelayToRelayPing : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramRelayToRelayPing();
  virtual ~CMsgSteamDatagramRelayToRelayPing();

  CMsgSteamDatagramRelayToRelayPing(const CMsgSteamDatagramRelayToRelayPing& from);

  inline CMsgSteamDatagramRelayToRelayPing& operator=(const CMsgSteamDatagramRelayToRelayPing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramRelayToRelayPing& default_instance();

  void Swap(CMsgSteamDatagramRelayToRelayPing* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramRelayToRelayPing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramRelayToRelayPing& from);
  void MergeFrom(const CMsgSteamDatagramRelayToRelayPing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 request_timestamp = 1;
  inline bool has_request_timestamp() const;
  inline void clear_request_timestamp();
  static const int kRequestTimestampFieldNumber = 1;
  inline ::google::protobuf::uint32 request_timestamp() const;
  inline void set_request_timestamp(::google::protobuf::uint32 value);

  // optional fixed32 request_date = 2;
  inline bool has_request_date() const;
  inline void clear_request_date();
  static const int kRequestDateFieldNumber = 2;
  inline ::google::protobuf::uint32 request_date() const;
  inline void set_request_date(::google::protobuf::uint32 value);

  // optional fixed32 my_pop_id = 3;
  inline bool has_my_pop_id() const;
  inline void clear_my_pop_id();
  static const int kMyPopIdFieldNumber = 3;
  inline ::google::protobuf::uint32 my_pop_id() const;
  inline void set_my_pop_id(::google::protobuf::uint32 value);

  // optional fixed32 your_pop_id = 4;
  inline bool has_your_pop_id() const;
  inline void clear_your_pop_id();
  static const int kYourPopIdFieldNumber = 4;
  inline ::google::protobuf::uint32 your_pop_id() const;
  inline void set_your_pop_id(::google::protobuf::uint32 value);

  // optional fixed32 checksum = 5;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 5;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRelayToRelayPing)
 private:
  inline void set_has_request_timestamp();
  inline void clear_has_request_timestamp();
  inline void set_has_request_date();
  inline void clear_has_request_date();
  inline void set_has_my_pop_id();
  inline void clear_has_my_pop_id();
  inline void set_has_your_pop_id();
  inline void clear_has_your_pop_id();
  inline void set_has_checksum();
  inline void clear_has_checksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 request_timestamp_;
  ::google::protobuf::uint32 request_date_;
  ::google::protobuf::uint32 my_pop_id_;
  ::google::protobuf::uint32 your_pop_id_;
  ::google::protobuf::uint32 checksum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramRelayToRelayPing* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDataCenterState_Server : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramDataCenterState_Server();
  virtual ~CMsgSteamDatagramDataCenterState_Server();

  CMsgSteamDatagramDataCenterState_Server(const CMsgSteamDatagramDataCenterState_Server& from);

  inline CMsgSteamDatagramDataCenterState_Server& operator=(const CMsgSteamDatagramDataCenterState_Server& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramDataCenterState_Server& default_instance();

  void Swap(CMsgSteamDatagramDataCenterState_Server* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramDataCenterState_Server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramDataCenterState_Server& from);
  void MergeFrom(const CMsgSteamDatagramDataCenterState_Server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional uint32 ping_ms = 2;
  inline bool has_ping_ms() const;
  inline void clear_ping_ms();
  static const int kPingMsFieldNumber = 2;
  inline ::google::protobuf::uint32 ping_ms() const;
  inline void set_ping_ms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramDataCenterState.Server)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_ping_ms();
  inline void clear_has_ping_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* address_;
  ::google::protobuf::uint32 ping_ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramDataCenterState_Server* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDataCenterState_DataCenter : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramDataCenterState_DataCenter();
  virtual ~CMsgSteamDatagramDataCenterState_DataCenter();

  CMsgSteamDatagramDataCenterState_DataCenter(const CMsgSteamDatagramDataCenterState_DataCenter& from);

  inline CMsgSteamDatagramDataCenterState_DataCenter& operator=(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramDataCenterState_DataCenter& default_instance();

  void Swap(CMsgSteamDatagramDataCenterState_DataCenter* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramDataCenterState_DataCenter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from);
  void MergeFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  inline int server_sample_size() const;
  inline void clear_server_sample();
  static const int kServerSampleFieldNumber = 2;
  inline const ::CMsgSteamDatagramDataCenterState_Server& server_sample(int index) const;
  inline ::CMsgSteamDatagramDataCenterState_Server* mutable_server_sample(int index);
  inline ::CMsgSteamDatagramDataCenterState_Server* add_server_sample();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server >&
      server_sample() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server >*
      mutable_server_sample();

  // repeated .CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
  inline int relay_sample_size() const;
  inline void clear_relay_sample();
  static const int kRelaySampleFieldNumber = 3;
  inline const ::CMsgSteamDatagramDataCenterState_Server& relay_sample(int index) const;
  inline ::CMsgSteamDatagramDataCenterState_Server* mutable_relay_sample(int index);
  inline ::CMsgSteamDatagramDataCenterState_Server* add_relay_sample();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server >&
      relay_sample() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server >*
      mutable_relay_sample();

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramDataCenterState.DataCenter)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server > server_sample_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server > relay_sample_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramDataCenterState_DataCenter* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDataCenterState : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramDataCenterState();
  virtual ~CMsgSteamDatagramDataCenterState();

  CMsgSteamDatagramDataCenterState(const CMsgSteamDatagramDataCenterState& from);

  inline CMsgSteamDatagramDataCenterState& operator=(const CMsgSteamDatagramDataCenterState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramDataCenterState& default_instance();

  void Swap(CMsgSteamDatagramDataCenterState* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramDataCenterState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramDataCenterState& from);
  void MergeFrom(const CMsgSteamDatagramDataCenterState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramDataCenterState_Server Server;
  typedef CMsgSteamDatagramDataCenterState_DataCenter DataCenter;

  // accessors -------------------------------------------------------

  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  inline int data_centers_size() const;
  inline void clear_data_centers();
  static const int kDataCentersFieldNumber = 1;
  inline const ::CMsgSteamDatagramDataCenterState_DataCenter& data_centers(int index) const;
  inline ::CMsgSteamDatagramDataCenterState_DataCenter* mutable_data_centers(int index);
  inline ::CMsgSteamDatagramDataCenterState_DataCenter* add_data_centers();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_DataCenter >&
      data_centers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_DataCenter >*
      mutable_data_centers();

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramDataCenterState)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_DataCenter > data_centers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramDataCenterState* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRouterHealth_DataCenter : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramRouterHealth_DataCenter();
  virtual ~CMsgSteamDatagramRouterHealth_DataCenter();

  CMsgSteamDatagramRouterHealth_DataCenter(const CMsgSteamDatagramRouterHealth_DataCenter& from);

  inline CMsgSteamDatagramRouterHealth_DataCenter& operator=(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramRouterHealth_DataCenter& default_instance();

  void Swap(CMsgSteamDatagramRouterHealth_DataCenter* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramRouterHealth_DataCenter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from);
  void MergeFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 datacenter_id = 1;
  inline bool has_datacenter_id() const;
  inline void clear_datacenter_id();
  static const int kDatacenterIdFieldNumber = 1;
  inline ::google::protobuf::uint32 datacenter_id() const;
  inline void set_datacenter_id(::google::protobuf::uint32 value);

  // optional uint32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRouterHealth.DataCenter)
 private:
  inline void set_has_datacenter_id();
  inline void clear_has_datacenter_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 datacenter_id_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramRouterHealth_DataCenter* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRouterHealth : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramRouterHealth();
  virtual ~CMsgSteamDatagramRouterHealth();

  CMsgSteamDatagramRouterHealth(const CMsgSteamDatagramRouterHealth& from);

  inline CMsgSteamDatagramRouterHealth& operator=(const CMsgSteamDatagramRouterHealth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramRouterHealth& default_instance();

  void Swap(CMsgSteamDatagramRouterHealth* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramRouterHealth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramRouterHealth& from);
  void MergeFrom(const CMsgSteamDatagramRouterHealth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramRouterHealth_DataCenter DataCenter;

  // accessors -------------------------------------------------------

  // optional float cpu_load = 1;
  inline bool has_cpu_load() const;
  inline void clear_cpu_load();
  static const int kCpuLoadFieldNumber = 1;
  inline float cpu_load() const;
  inline void set_cpu_load(float value);

  // optional uint32 active_sessions = 2;
  inline bool has_active_sessions() const;
  inline void clear_active_sessions();
  static const int kActiveSessionsFieldNumber = 2;
  inline ::google::protobuf::uint32 active_sessions() const;
  inline void set_active_sessions(::google::protobuf::uint32 value);

  // optional uint32 data_pkts_sec = 3;
  inline bool has_data_pkts_sec() const;
  inline void clear_data_pkts_sec();
  static const int kDataPktsSecFieldNumber = 3;
  inline ::google::protobuf::uint32 data_pkts_sec() const;
  inline void set_data_pkts_sec(::google::protobuf::uint32 value);

  // optional uint32 other_pkts_sec = 4;
  inline bool has_other_pkts_sec() const;
  inline void clear_other_pkts_sec();
  static const int kOtherPktsSecFieldNumber = 4;
  inline ::google::protobuf::uint32 other_pkts_sec() const;
  inline void set_other_pkts_sec(::google::protobuf::uint32 value);

  // optional uint32 seconds_until_shutdown = 5;
  inline bool has_seconds_until_shutdown() const;
  inline void clear_seconds_until_shutdown();
  static const int kSecondsUntilShutdownFieldNumber = 5;
  inline ::google::protobuf::uint32 seconds_until_shutdown() const;
  inline void set_seconds_until_shutdown(::google::protobuf::uint32 value);

  // optional float cpu_cost_per_user = 8;
  inline bool has_cpu_cost_per_user() const;
  inline void clear_cpu_cost_per_user();
  static const int kCpuCostPerUserFieldNumber = 8;
  inline float cpu_cost_per_user() const;
  inline void set_cpu_cost_per_user(float value);

  // optional float cpu_cost_per_packet = 9;
  inline bool has_cpu_cost_per_packet() const;
  inline void clear_cpu_cost_per_packet();
  static const int kCpuCostPerPacketFieldNumber = 9;
  inline float cpu_cost_per_packet() const;
  inline void set_cpu_cost_per_packet(float value);

  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  inline int data_centers_size() const;
  inline void clear_data_centers();
  static const int kDataCentersFieldNumber = 6;
  inline const ::CMsgSteamDatagramRouterHealth_DataCenter& data_centers(int index) const;
  inline ::CMsgSteamDatagramRouterHealth_DataCenter* mutable_data_centers(int index);
  inline ::CMsgSteamDatagramRouterHealth_DataCenter* add_data_centers();
  inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterHealth_DataCenter >&
      data_centers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterHealth_DataCenter >*
      mutable_data_centers();

  // optional fixed64 magic = 7;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 7;
  inline ::google::protobuf::uint64 magic() const;
  inline void set_magic(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRouterHealth)
 private:
  inline void set_has_cpu_load();
  inline void clear_has_cpu_load();
  inline void set_has_active_sessions();
  inline void clear_has_active_sessions();
  inline void set_has_data_pkts_sec();
  inline void clear_has_data_pkts_sec();
  inline void set_has_other_pkts_sec();
  inline void clear_has_other_pkts_sec();
  inline void set_has_seconds_until_shutdown();
  inline void clear_has_seconds_until_shutdown();
  inline void set_has_cpu_cost_per_user();
  inline void clear_has_cpu_cost_per_user();
  inline void set_has_cpu_cost_per_packet();
  inline void clear_has_cpu_cost_per_packet();
  inline void set_has_magic();
  inline void clear_has_magic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float cpu_load_;
  ::google::protobuf::uint32 active_sessions_;
  ::google::protobuf::uint32 data_pkts_sec_;
  ::google::protobuf::uint32 other_pkts_sec_;
  ::google::protobuf::uint32 seconds_until_shutdown_;
  float cpu_cost_per_user_;
  ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterHealth_DataCenter > data_centers_;
  ::google::protobuf::uint64 magic_;
  float cpu_cost_per_packet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramRouterHealth* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionStatsP2PRouterToRouter : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramConnectionStatsP2PRouterToRouter();
  virtual ~CMsgSteamDatagramConnectionStatsP2PRouterToRouter();

  CMsgSteamDatagramConnectionStatsP2PRouterToRouter(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from);

  inline CMsgSteamDatagramConnectionStatsP2PRouterToRouter& operator=(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& default_instance();

  void Swap(CMsgSteamDatagramConnectionStatsP2PRouterToRouter* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramConnectionStatsP2PRouterToRouter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from);
  void MergeFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToRouter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags Flags;
  static const Flags ACK_REQUEST_RELAY = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_RELAY;
  static const Flags ACK_REQUEST_E2E = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_E2E;
  static const Flags ACK_REQUEST_IMMEDIATE = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_ACK_REQUEST_IMMEDIATE;
  static inline bool Flags_IsValid(int value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Flags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flags_descriptor() {
    return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor();
  }
  static inline const ::std::string& Flags_Name(Flags value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Name(value);
  }
  static inline bool Flags_Parse(const ::std::string& name,
      Flags* value) {
    return CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  inline bool has_quality_relay() const;
  inline void clear_quality_relay();
  static const int kQualityRelayFieldNumber = 1;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_relay() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_relay();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_relay();
  inline void set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay);

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  inline bool has_quality_e2e() const;
  inline void clear_quality_e2e();
  static const int kQualityE2EFieldNumber = 2;
  inline const ::CMsgSteamDatagramConnectionQuality& quality_e2e() const;
  inline ::CMsgSteamDatagramConnectionQuality* mutable_quality_e2e();
  inline ::CMsgSteamDatagramConnectionQuality* release_quality_e2e();
  inline void set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e);

  // repeated fixed32 ack_relay = 3;
  inline int ack_relay_size() const;
  inline void clear_ack_relay();
  static const int kAckRelayFieldNumber = 3;
  inline ::google::protobuf::uint32 ack_relay(int index) const;
  inline void set_ack_relay(int index, ::google::protobuf::uint32 value);
  inline void add_ack_relay(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ack_relay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ack_relay();

  // repeated fixed32 legacy_ack_e2e = 4;
  inline int legacy_ack_e2e_size() const;
  inline void clear_legacy_ack_e2e();
  static const int kLegacyAckE2EFieldNumber = 4;
  inline ::google::protobuf::uint32 legacy_ack_e2e(int index) const;
  inline void set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value);
  inline void add_legacy_ack_e2e(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      legacy_ack_e2e() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_legacy_ack_e2e();

  // optional uint32 flags = 5;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 5;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint32 ack_forward_target_revision = 6;
  inline bool has_ack_forward_target_revision() const;
  inline void clear_ack_forward_target_revision();
  static const int kAckForwardTargetRevisionFieldNumber = 6;
  inline ::google::protobuf::uint32 ack_forward_target_revision() const;
  inline void set_ack_forward_target_revision(::google::protobuf::uint32 value);

  // optional bytes routes = 7;
  inline bool has_routes() const;
  inline void clear_routes();
  static const int kRoutesFieldNumber = 7;
  inline const ::std::string& routes() const;
  inline void set_routes(const ::std::string& value);
  inline void set_routes(const char* value);
  inline void set_routes(const void* value, size_t size);
  inline ::std::string* mutable_routes();
  inline ::std::string* release_routes();
  inline void set_allocated_routes(::std::string* routes);

  // optional uint32 ack_peer_routes_revision = 8;
  inline bool has_ack_peer_routes_revision() const;
  inline void clear_ack_peer_routes_revision();
  static const int kAckPeerRoutesRevisionFieldNumber = 8;
  inline ::google::protobuf::uint32 ack_peer_routes_revision() const;
  inline void set_ack_peer_routes_revision(::google::protobuf::uint32 value);

  // optional uint32 seq_num_r2r = 26;
  inline bool has_seq_num_r2r() const;
  inline void clear_seq_num_r2r();
  static const int kSeqNumR2RFieldNumber = 26;
  inline ::google::protobuf::uint32 seq_num_r2r() const;
  inline void set_seq_num_r2r(::google::protobuf::uint32 value);

  // optional uint32 seq_num_e2e = 27;
  inline bool has_seq_num_e2e() const;
  inline void clear_seq_num_e2e();
  static const int kSeqNumE2EFieldNumber = 27;
  inline ::google::protobuf::uint32 seq_num_e2e() const;
  inline void set_seq_num_e2e(::google::protobuf::uint32 value);

  // optional fixed32 from_relay_session_id = 22;
  inline bool has_from_relay_session_id() const;
  inline void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 22;
  inline ::google::protobuf::uint32 from_relay_session_id() const;
  inline void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed32 to_relay_session_id = 25;
  inline bool has_to_relay_session_id() const;
  inline void clear_to_relay_session_id();
  static const int kToRelaySessionIdFieldNumber = 25;
  inline ::google::protobuf::uint32 to_relay_session_id() const;
  inline void set_to_relay_session_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionStatsP2PRouterToRouter)
 private:
  inline void set_has_quality_relay();
  inline void clear_has_quality_relay();
  inline void set_has_quality_e2e();
  inline void clear_has_quality_e2e();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_ack_forward_target_revision();
  inline void clear_has_ack_forward_target_revision();
  inline void set_has_routes();
  inline void clear_has_routes();
  inline void set_has_ack_peer_routes_revision();
  inline void clear_has_ack_peer_routes_revision();
  inline void set_has_seq_num_r2r();
  inline void clear_has_seq_num_r2r();
  inline void set_has_seq_num_e2e();
  inline void clear_has_seq_num_e2e();
  inline void set_has_from_relay_session_id();
  inline void clear_has_from_relay_session_id();
  inline void set_has_to_relay_session_id();
  inline void clear_has_to_relay_session_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CMsgSteamDatagramConnectionQuality* quality_relay_;
  ::CMsgSteamDatagramConnectionQuality* quality_e2e_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ack_relay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > legacy_ack_e2e_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 ack_forward_target_revision_;
  ::std::string* routes_;
  ::google::protobuf::uint32 ack_peer_routes_revision_;
  ::google::protobuf::uint32 seq_num_r2r_;
  ::google::protobuf::uint32 seq_num_e2e_;
  ::google::protobuf::uint32 from_relay_session_id_;
  ::google::protobuf::uint32 to_relay_session_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramConnectionStatsP2PRouterToRouter* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramP2PBadRouteRouterToRouter : public ::google::protobuf::Message {
 public:
  CMsgSteamDatagramP2PBadRouteRouterToRouter();
  virtual ~CMsgSteamDatagramP2PBadRouteRouterToRouter();

  CMsgSteamDatagramP2PBadRouteRouterToRouter(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from);

  inline CMsgSteamDatagramP2PBadRouteRouterToRouter& operator=(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSteamDatagramP2PBadRouteRouterToRouter& default_instance();

  void Swap(CMsgSteamDatagramP2PBadRouteRouterToRouter* other);

  // implements Message ----------------------------------------------

  CMsgSteamDatagramP2PBadRouteRouterToRouter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from);
  void MergeFrom(const CMsgSteamDatagramP2PBadRouteRouterToRouter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 from_relay_session_id = 1;
  inline bool has_from_relay_session_id() const;
  inline void clear_from_relay_session_id();
  static const int kFromRelaySessionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_relay_session_id() const;
  inline void set_from_relay_session_id(::google::protobuf::uint32 value);

  // optional fixed64 kludge_pad = 99;
  inline bool has_kludge_pad() const;
  inline void clear_kludge_pad();
  static const int kKludgePadFieldNumber = 99;
  inline ::google::protobuf::uint64 kludge_pad() const;
  inline void set_kludge_pad(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramP2PBadRouteRouterToRouter)
 private:
  inline void set_has_from_relay_session_id();
  inline void clear_has_from_relay_session_id();
  inline void set_has_kludge_pad();
  inline void clear_has_kludge_pad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 kludge_pad_;
  ::google::protobuf::uint32 from_relay_session_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_AssignDesc_steamdatagram_5fmessages_5fsdr_2eproto();
  friend void protobuf_ShutdownFile_steamdatagram_5fmessages_5fsdr_2eproto();

  void InitAsDefaultInstance();
  static CMsgSteamDatagramP2PBadRouteRouterToRouter* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgSteamDatagramGameserverPing

// optional fixed32 router_timestamp = 4;
inline bool CMsgSteamDatagramGameserverPing::has_router_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramGameserverPing::set_has_router_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramGameserverPing::clear_has_router_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramGameserverPing::clear_router_timestamp() {
  router_timestamp_ = 0u;
  clear_has_router_timestamp();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverPing::router_timestamp() const {
  return router_timestamp_;
}
inline void CMsgSteamDatagramGameserverPing::set_router_timestamp(::google::protobuf::uint32 value) {
  set_has_router_timestamp();
  router_timestamp_ = value;
}

// optional fixed64 dummy_pad = 99;
inline bool CMsgSteamDatagramGameserverPing::has_dummy_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramGameserverPing::set_has_dummy_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramGameserverPing::clear_has_dummy_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramGameserverPing::clear_dummy_pad() {
  dummy_pad_ = GOOGLE_ULONGLONG(0);
  clear_has_dummy_pad();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramGameserverPing::dummy_pad() const {
  return dummy_pad_;
}
inline void CMsgSteamDatagramGameserverPing::set_dummy_pad(::google::protobuf::uint64 value) {
  set_has_dummy_pad();
  dummy_pad_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramNoSessionRelayToClient

// optional fixed32 connection_id = 7;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToClient::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional fixed32 your_public_ip = 2;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_your_public_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_has_your_public_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_has_your_public_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_your_public_ip() {
  your_public_ip_ = 0u;
  clear_has_your_public_ip();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToClient::your_public_ip() const {
  return your_public_ip_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_your_public_ip(::google::protobuf::uint32 value) {
  set_has_your_public_ip();
  your_public_ip_ = value;
}

// optional fixed32 server_time = 3;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_server_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_has_server_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToClient::server_time() const {
  return server_time_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
}

// optional fixed64 challenge = 4;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_challenge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_has_challenge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_challenge() {
  challenge_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramNoSessionRelayToClient::challenge() const {
  return challenge_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_challenge(::google::protobuf::uint64 value) {
  set_has_challenge();
  challenge_ = value;
}

// optional uint32 seconds_until_shutdown = 5;
inline bool CMsgSteamDatagramNoSessionRelayToClient::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_has_seconds_until_shutdown() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_has_seconds_until_shutdown() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  clear_has_seconds_until_shutdown();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToClient::seconds_until_shutdown() const {
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramNoSessionRelayToClient::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  set_has_seconds_until_shutdown();
  seconds_until_shutdown_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramNoSessionRelayToPeer

// optional uint32 legacy_relay_session_id = 1;
inline bool CMsgSteamDatagramNoSessionRelayToPeer::has_legacy_relay_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_has_legacy_relay_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_has_legacy_relay_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_legacy_relay_session_id() {
  legacy_relay_session_id_ = 0u;
  clear_has_legacy_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToPeer::legacy_relay_session_id() const {
  return legacy_relay_session_id_;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_legacy_relay_session_id(::google::protobuf::uint32 value) {
  set_has_legacy_relay_session_id();
  legacy_relay_session_id_ = value;
}

// optional fixed32 from_relay_session_id = 2;
inline bool CMsgSteamDatagramNoSessionRelayToPeer::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_has_from_relay_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_has_from_relay_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  clear_has_from_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToPeer::from_relay_session_id() const {
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_from_relay_session_id(::google::protobuf::uint32 value) {
  set_has_from_relay_session_id();
  from_relay_session_id_ = value;
}

// optional fixed32 from_connection_id = 7;
inline bool CMsgSteamDatagramNoSessionRelayToPeer::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoSessionRelayToPeer::from_connection_id() const {
  return from_connection_id_;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
}

// optional fixed64 kludge_pad = 99;
inline bool CMsgSteamDatagramNoSessionRelayToPeer::has_kludge_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_has_kludge_pad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_has_kludge_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::clear_kludge_pad() {
  kludge_pad_ = GOOGLE_ULONGLONG(0);
  clear_has_kludge_pad();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramNoSessionRelayToPeer::kludge_pad() const {
  return kludge_pad_;
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::set_kludge_pad(::google::protobuf::uint64 value) {
  set_has_kludge_pad();
  kludge_pad_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientPingSampleRequest

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramClientPingSampleRequest::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleRequest::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramClientPingSampleRequest::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramClientPingSampleRequest::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleRequest::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramClientPingSampleRequest::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientPingSampleReply_RoutingCluster

// optional fixed32 id = 1;
inline bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_RoutingCluster::id() const {
  return id_;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 front_ping_ms = 2;
inline bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::has_front_ping_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_has_front_ping_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_has_front_ping_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_front_ping_ms() {
  front_ping_ms_ = 0u;
  clear_has_front_ping_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_RoutingCluster::front_ping_ms() const {
  return front_ping_ms_;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_front_ping_ms(::google::protobuf::uint32 value) {
  set_has_front_ping_ms();
  front_ping_ms_ = value;
}

// optional uint32 e2e_ping_ms = 3;
inline bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::has_e2e_ping_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_has_e2e_ping_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_has_e2e_ping_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::clear_e2e_ping_ms() {
  e2e_ping_ms_ = 0u;
  clear_has_e2e_ping_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_RoutingCluster::e2e_ping_ms() const {
  return e2e_ping_ms_;
}
inline void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::set_e2e_ping_ms(::google::protobuf::uint32 value) {
  set_has_e2e_ping_ms();
  e2e_ping_ms_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientPingSampleReply_DataCenter

// optional fixed32 data_center_id = 1;
inline bool CMsgSteamDatagramClientPingSampleReply_DataCenter::has_data_center_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_has_data_center_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_has_data_center_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_data_center_id() {
  data_center_id_ = 0u;
  clear_has_data_center_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_DataCenter::data_center_id() const {
  return data_center_id_;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_data_center_id(::google::protobuf::uint32 value) {
  set_has_data_center_id();
  data_center_id_ = value;
}

// optional fixed32 via_relay_id = 2;
inline bool CMsgSteamDatagramClientPingSampleReply_DataCenter::has_via_relay_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_has_via_relay_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_has_via_relay_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_via_relay_id() {
  via_relay_id_ = 0u;
  clear_has_via_relay_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_DataCenter::via_relay_id() const {
  return via_relay_id_;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_via_relay_id(::google::protobuf::uint32 value) {
  set_has_via_relay_id();
  via_relay_id_ = value;
}

// optional uint32 e2e_ping_ms = 3;
inline bool CMsgSteamDatagramClientPingSampleReply_DataCenter::has_e2e_ping_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_has_e2e_ping_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_has_e2e_ping_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::clear_e2e_ping_ms() {
  e2e_ping_ms_ = 0u;
  clear_has_e2e_ping_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply_DataCenter::e2e_ping_ms() const {
  return e2e_ping_ms_;
}
inline void CMsgSteamDatagramClientPingSampleReply_DataCenter::set_e2e_ping_ms(::google::protobuf::uint32 value) {
  set_has_e2e_ping_ms();
  e2e_ping_ms_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientPingSampleReply

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramClientPingSampleReply::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientPingSampleReply::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramClientPingSampleReply::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramClientPingSampleReply::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientPingSampleReply::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramClientPingSampleReply::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
inline int CMsgSteamDatagramClientPingSampleReply::routing_clusters_size() const {
  return routing_clusters_.size();
}
inline void CMsgSteamDatagramClientPingSampleReply::clear_routing_clusters() {
  routing_clusters_.Clear();
}
inline const ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster& CMsgSteamDatagramClientPingSampleReply::routing_clusters(int index) const {
  return routing_clusters_.Get(index);
}
inline ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply::mutable_routing_clusters(int index) {
  return routing_clusters_.Mutable(index);
}
inline ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply::add_routing_clusters() {
  return routing_clusters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >&
CMsgSteamDatagramClientPingSampleReply::routing_clusters() const {
  return routing_clusters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster >*
CMsgSteamDatagramClientPingSampleReply::mutable_routing_clusters() {
  return &routing_clusters_;
}

// repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
inline int CMsgSteamDatagramClientPingSampleReply::data_centers_size() const {
  return data_centers_.size();
}
inline void CMsgSteamDatagramClientPingSampleReply::clear_data_centers() {
  data_centers_.Clear();
}
inline const ::CMsgSteamDatagramClientPingSampleReply_DataCenter& CMsgSteamDatagramClientPingSampleReply::data_centers(int index) const {
  return data_centers_.Get(index);
}
inline ::CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply::mutable_data_centers(int index) {
  return data_centers_.Mutable(index);
}
inline ::CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply::add_data_centers() {
  return data_centers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_DataCenter >&
CMsgSteamDatagramClientPingSampleReply::data_centers() const {
  return data_centers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramClientPingSampleReply_DataCenter >*
CMsgSteamDatagramClientPingSampleReply::mutable_data_centers() {
  return &data_centers_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientSwitchedPrimary_RouterQuality

// optional uint32 score = 1;
inline bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::score() const {
  return score_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 front_ping = 2;
inline bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::has_front_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_has_front_ping() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_has_front_ping() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_front_ping() {
  front_ping_ = 0u;
  clear_has_front_ping();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::front_ping() const {
  return front_ping_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_front_ping(::google::protobuf::uint32 value) {
  set_has_front_ping();
  front_ping_ = value;
}

// optional uint32 back_ping = 3;
inline bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::has_back_ping() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_has_back_ping() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_has_back_ping() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_back_ping() {
  back_ping_ = 0u;
  clear_has_back_ping();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::back_ping() const {
  return back_ping_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_back_ping(::google::protobuf::uint32 value) {
  set_has_back_ping();
  back_ping_ = value;
}

// optional uint32 seconds_until_down = 4;
inline bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::has_seconds_until_down() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_has_seconds_until_down() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_has_seconds_until_down() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::clear_seconds_until_down() {
  seconds_until_down_ = 0u;
  clear_has_seconds_until_down();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::seconds_until_down() const {
  return seconds_until_down_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::set_seconds_until_down(::google::protobuf::uint32 value) {
  set_has_seconds_until_down();
  seconds_until_down_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramClientSwitchedPrimary

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional fixed32 from_ip = 2;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_from_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_from_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_ip() {
  from_ip_ = 0u;
  clear_has_from_ip();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_ip() const {
  return from_ip_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_ip(::google::protobuf::uint32 value) {
  set_has_from_ip();
  from_ip_ = value;
}

// optional uint32 from_port = 3;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_from_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_from_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_port() {
  from_port_ = 0u;
  clear_has_from_port();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_port() const {
  return from_port_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_port(::google::protobuf::uint32 value) {
  set_has_from_port();
  from_port_ = value;
}

// optional fixed32 from_router_cluster = 4;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_router_cluster() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_from_router_cluster() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_from_router_cluster() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_router_cluster() {
  from_router_cluster_ = 0u;
  clear_has_from_router_cluster();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_router_cluster() const {
  return from_router_cluster_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_router_cluster(::google::protobuf::uint32 value) {
  set_has_from_router_cluster();
  from_router_cluster_ = value;
}

// optional uint32 from_active_time = 5;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_active_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_from_active_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_from_active_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_active_time() {
  from_active_time_ = 0u;
  clear_has_from_active_time();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_active_time() const {
  return from_active_time_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_active_time(::google::protobuf::uint32 value) {
  set_has_from_active_time();
  from_active_time_ = value;
}

// optional uint32 from_active_packets_recv = 6;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_active_packets_recv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_from_active_packets_recv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_from_active_packets_recv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_active_packets_recv() {
  from_active_packets_recv_ = 0u;
  clear_has_from_active_packets_recv();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::from_active_packets_recv() const {
  return from_active_packets_recv_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_active_packets_recv(::google::protobuf::uint32 value) {
  set_has_from_active_packets_recv();
  from_active_packets_recv_ = value;
}

// optional string from_dropped_reason = 7;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_dropped_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_from_dropped_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_from_dropped_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_dropped_reason() {
  if (from_dropped_reason_ != &::google::protobuf::internal::kEmptyString) {
    from_dropped_reason_->clear();
  }
  clear_has_from_dropped_reason();
}
inline const ::std::string& CMsgSteamDatagramClientSwitchedPrimary::from_dropped_reason() const {
  return *from_dropped_reason_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_dropped_reason(const ::std::string& value) {
  set_has_from_dropped_reason();
  if (from_dropped_reason_ == &::google::protobuf::internal::kEmptyString) {
    from_dropped_reason_ = new ::std::string;
  }
  from_dropped_reason_->assign(value);
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_dropped_reason(const char* value) {
  set_has_from_dropped_reason();
  if (from_dropped_reason_ == &::google::protobuf::internal::kEmptyString) {
    from_dropped_reason_ = new ::std::string;
  }
  from_dropped_reason_->assign(value);
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_from_dropped_reason(const char* value, size_t size) {
  set_has_from_dropped_reason();
  if (from_dropped_reason_ == &::google::protobuf::internal::kEmptyString) {
    from_dropped_reason_ = new ::std::string;
  }
  from_dropped_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramClientSwitchedPrimary::mutable_from_dropped_reason() {
  set_has_from_dropped_reason();
  if (from_dropped_reason_ == &::google::protobuf::internal::kEmptyString) {
    from_dropped_reason_ = new ::std::string;
  }
  return from_dropped_reason_;
}
inline ::std::string* CMsgSteamDatagramClientSwitchedPrimary::release_from_dropped_reason() {
  clear_has_from_dropped_reason();
  if (from_dropped_reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_dropped_reason_;
    from_dropped_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_from_dropped_reason(::std::string* from_dropped_reason) {
  if (from_dropped_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete from_dropped_reason_;
  }
  if (from_dropped_reason) {
    set_has_from_dropped_reason();
    from_dropped_reason_ = from_dropped_reason;
  } else {
    clear_has_from_dropped_reason();
    from_dropped_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 gap_ms = 8;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_gap_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_gap_ms() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_gap_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_gap_ms() {
  gap_ms_ = 0u;
  clear_has_gap_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramClientSwitchedPrimary::gap_ms() const {
  return gap_ms_;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_gap_ms(::google::protobuf::uint32 value) {
  set_has_gap_ms();
  gap_ms_ = value;
}

// optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_quality_now() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_from_quality_now() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_from_quality_now() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_quality_now() {
  if (from_quality_now_ != NULL) from_quality_now_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
  clear_has_from_quality_now();
}
inline const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::from_quality_now() const {
  return from_quality_now_ != NULL ? *from_quality_now_ : *default_instance_->from_quality_now_;
}
inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::mutable_from_quality_now() {
  set_has_from_quality_now();
  if (from_quality_now_ == NULL) from_quality_now_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
  return from_quality_now_;
}
inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::release_from_quality_now() {
  clear_has_from_quality_now();
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* temp = from_quality_now_;
  from_quality_now_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_from_quality_now(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_now) {
  delete from_quality_now_;
  from_quality_now_ = from_quality_now;
  if (from_quality_now) {
    set_has_from_quality_now();
  } else {
    clear_has_from_quality_now();
  }
}

// optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_to_quality_now() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_to_quality_now() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_to_quality_now() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_to_quality_now() {
  if (to_quality_now_ != NULL) to_quality_now_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
  clear_has_to_quality_now();
}
inline const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::to_quality_now() const {
  return to_quality_now_ != NULL ? *to_quality_now_ : *default_instance_->to_quality_now_;
}
inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::mutable_to_quality_now() {
  set_has_to_quality_now();
  if (to_quality_now_ == NULL) to_quality_now_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
  return to_quality_now_;
}
inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::release_to_quality_now() {
  clear_has_to_quality_now();
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* temp = to_quality_now_;
  to_quality_now_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_to_quality_now(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_now) {
  delete to_quality_now_;
  to_quality_now_ = to_quality_now;
  if (to_quality_now) {
    set_has_to_quality_now();
  } else {
    clear_has_to_quality_now();
  }
}

// optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_from_quality_then() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_from_quality_then() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_from_quality_then() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_from_quality_then() {
  if (from_quality_then_ != NULL) from_quality_then_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
  clear_has_from_quality_then();
}
inline const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::from_quality_then() const {
  return from_quality_then_ != NULL ? *from_quality_then_ : *default_instance_->from_quality_then_;
}
inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::mutable_from_quality_then() {
  set_has_from_quality_then();
  if (from_quality_then_ == NULL) from_quality_then_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
  return from_quality_then_;
}
inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::release_from_quality_then() {
  clear_has_from_quality_then();
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* temp = from_quality_then_;
  from_quality_then_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_from_quality_then(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* from_quality_then) {
  delete from_quality_then_;
  from_quality_then_ = from_quality_then;
  if (from_quality_then) {
    set_has_from_quality_then();
  } else {
    clear_has_from_quality_then();
  }
}

// optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
inline bool CMsgSteamDatagramClientSwitchedPrimary::has_to_quality_then() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_has_to_quality_then() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_has_to_quality_then() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::clear_to_quality_then() {
  if (to_quality_then_ != NULL) to_quality_then_->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear();
  clear_has_to_quality_then();
}
inline const ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary::to_quality_then() const {
  return to_quality_then_ != NULL ? *to_quality_then_ : *default_instance_->to_quality_then_;
}
inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::mutable_to_quality_then() {
  set_has_to_quality_then();
  if (to_quality_then_ == NULL) to_quality_then_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
  return to_quality_then_;
}
inline ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary::release_to_quality_then() {
  clear_has_to_quality_then();
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* temp = to_quality_then_;
  to_quality_then_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramClientSwitchedPrimary::set_allocated_to_quality_then(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* to_quality_then) {
  delete to_quality_then_;
  to_quality_then_ = to_quality_then;
  if (to_quality_then) {
    set_has_to_quality_then();
  } else {
    clear_has_to_quality_then();
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectRequest

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramConnectRequest::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectRequest::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramConnectRequest::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional fixed64 client_steam_id = 3;
inline bool CMsgSteamDatagramConnectRequest::has_client_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_client_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_client_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectRequest::clear_client_steam_id() {
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectRequest::client_steam_id() const {
  return client_steam_id_;
}
inline void CMsgSteamDatagramConnectRequest::set_client_steam_id(::google::protobuf::uint64 value) {
  set_has_client_steam_id();
  client_steam_id_ = value;
}

// optional fixed64 my_timestamp = 4;
inline bool CMsgSteamDatagramConnectRequest::has_my_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_my_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_my_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramConnectRequest::clear_my_timestamp() {
  my_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_my_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectRequest::my_timestamp() const {
  return my_timestamp_;
}
inline void CMsgSteamDatagramConnectRequest::set_my_timestamp(::google::protobuf::uint64 value) {
  set_has_my_timestamp();
  my_timestamp_ = value;
}

// optional uint32 ping_est_ms = 5;
inline bool CMsgSteamDatagramConnectRequest::has_ping_est_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_ping_est_ms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_ping_est_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramConnectRequest::clear_ping_est_ms() {
  ping_est_ms_ = 0u;
  clear_has_ping_est_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::ping_est_ms() const {
  return ping_est_ms_;
}
inline void CMsgSteamDatagramConnectRequest::set_ping_est_ms(::google::protobuf::uint32 value) {
  set_has_ping_est_ms();
  ping_est_ms_ = value;
}

// optional uint32 virtual_port = 9;
inline bool CMsgSteamDatagramConnectRequest::has_virtual_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_virtual_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_virtual_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectRequest::clear_virtual_port() {
  virtual_port_ = 0u;
  clear_has_virtual_port();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::virtual_port() const {
  return virtual_port_;
}
inline void CMsgSteamDatagramConnectRequest::set_virtual_port(::google::protobuf::uint32 value) {
  set_has_virtual_port();
  virtual_port_ = value;
}

// optional uint32 gameserver_relay_session_id = 2;
inline bool CMsgSteamDatagramConnectRequest::has_gameserver_relay_session_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_gameserver_relay_session_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_gameserver_relay_session_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectRequest::clear_gameserver_relay_session_id() {
  gameserver_relay_session_id_ = 0u;
  clear_has_gameserver_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::gameserver_relay_session_id() const {
  return gameserver_relay_session_id_;
}
inline void CMsgSteamDatagramConnectRequest::set_gameserver_relay_session_id(::google::protobuf::uint32 value) {
  set_has_gameserver_relay_session_id();
  gameserver_relay_session_id_ = value;
}

// optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
inline bool CMsgSteamDatagramConnectRequest::has_crypt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_crypt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_crypt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramConnectRequest::clear_crypt() {
  if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
  clear_has_crypt();
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramConnectRequest::crypt() const {
  return crypt_ != NULL ? *crypt_ : *default_instance_->crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramConnectRequest::mutable_crypt() {
  set_has_crypt();
  if (crypt_ == NULL) crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned;
  return crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramConnectRequest::release_crypt() {
  clear_has_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectRequest::set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  delete crypt_;
  crypt_ = crypt;
  if (crypt) {
    set_has_crypt();
  } else {
    clear_has_crypt();
  }
}

// optional .CMsgSteamDatagramCertificateSigned cert = 7;
inline bool CMsgSteamDatagramConnectRequest::has_cert() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_cert() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_cert() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramConnectRequest::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramConnectRequest::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramConnectRequest::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificateSigned;
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramConnectRequest::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectRequest::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}

// optional uint32 protocol_version = 8;
inline bool CMsgSteamDatagramConnectRequest::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectRequest::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramConnectRequest::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramConnectRequest::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectRequest::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamDatagramConnectRequest::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectOK

// optional fixed32 client_connection_id = 1;
inline bool CMsgSteamDatagramConnectOK::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectOK::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectOK::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectOK::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectOK::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional fixed32 server_connection_id = 7;
inline bool CMsgSteamDatagramConnectOK::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectOK::set_has_server_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectOK::clear_has_server_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectOK::clear_server_connection_id() {
  server_connection_id_ = 0u;
  clear_has_server_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::server_connection_id() const {
  return server_connection_id_;
}
inline void CMsgSteamDatagramConnectOK::set_server_connection_id(::google::protobuf::uint32 value) {
  set_has_server_connection_id();
  server_connection_id_ = value;
}

// optional fixed64 your_timestamp = 3;
inline bool CMsgSteamDatagramConnectOK::has_your_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectOK::set_has_your_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramConnectOK::clear_has_your_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramConnectOK::clear_your_timestamp() {
  your_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_your_timestamp();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectOK::your_timestamp() const {
  return your_timestamp_;
}
inline void CMsgSteamDatagramConnectOK::set_your_timestamp(::google::protobuf::uint64 value) {
  set_has_your_timestamp();
  your_timestamp_ = value;
}

// optional uint32 delay_time_usec = 4;
inline bool CMsgSteamDatagramConnectOK::has_delay_time_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectOK::set_has_delay_time_usec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramConnectOK::clear_has_delay_time_usec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramConnectOK::clear_delay_time_usec() {
  delay_time_usec_ = 0u;
  clear_has_delay_time_usec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::delay_time_usec() const {
  return delay_time_usec_;
}
inline void CMsgSteamDatagramConnectOK::set_delay_time_usec(::google::protobuf::uint32 value) {
  set_has_delay_time_usec();
  delay_time_usec_ = value;
}

// optional uint32 gameserver_relay_session_id = 2;
inline bool CMsgSteamDatagramConnectOK::has_gameserver_relay_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectOK::set_has_gameserver_relay_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectOK::clear_has_gameserver_relay_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectOK::clear_gameserver_relay_session_id() {
  gameserver_relay_session_id_ = 0u;
  clear_has_gameserver_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::gameserver_relay_session_id() const {
  return gameserver_relay_session_id_;
}
inline void CMsgSteamDatagramConnectOK::set_gameserver_relay_session_id(::google::protobuf::uint32 value) {
  set_has_gameserver_relay_session_id();
  gameserver_relay_session_id_ = value;
}

// optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
inline bool CMsgSteamDatagramConnectOK::has_crypt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectOK::set_has_crypt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectOK::clear_has_crypt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectOK::clear_crypt() {
  if (crypt_ != NULL) crypt_->::CMsgSteamDatagramSessionCryptInfoSigned::Clear();
  clear_has_crypt();
}
inline const ::CMsgSteamDatagramSessionCryptInfoSigned& CMsgSteamDatagramConnectOK::crypt() const {
  return crypt_ != NULL ? *crypt_ : *default_instance_->crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramConnectOK::mutable_crypt() {
  set_has_crypt();
  if (crypt_ == NULL) crypt_ = new ::CMsgSteamDatagramSessionCryptInfoSigned;
  return crypt_;
}
inline ::CMsgSteamDatagramSessionCryptInfoSigned* CMsgSteamDatagramConnectOK::release_crypt() {
  clear_has_crypt();
  ::CMsgSteamDatagramSessionCryptInfoSigned* temp = crypt_;
  crypt_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectOK::set_allocated_crypt(::CMsgSteamDatagramSessionCryptInfoSigned* crypt) {
  delete crypt_;
  crypt_ = crypt;
  if (crypt) {
    set_has_crypt();
  } else {
    clear_has_crypt();
  }
}

// optional .CMsgSteamDatagramCertificateSigned cert = 6;
inline bool CMsgSteamDatagramConnectOK::has_cert() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectOK::set_has_cert() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramConnectOK::clear_has_cert() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramConnectOK::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramConnectOK::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramConnectOK::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificateSigned;
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramConnectOK::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectOK::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}

// optional uint32 protocol_version = 8;
inline bool CMsgSteamDatagramConnectOK::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectOK::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramConnectOK::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramConnectOK::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectOK::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamDatagramConnectOK::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionClosed

// optional fixed32 to_connection_id = 7;
inline bool CMsgSteamDatagramConnectionClosed::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::to_connection_id() const {
  return to_connection_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
}

// optional fixed32 from_connection_id = 8;
inline bool CMsgSteamDatagramConnectionClosed::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::from_connection_id() const {
  return from_connection_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
}

// optional fixed64 from_steam_id = 3;
inline bool CMsgSteamDatagramConnectionClosed::has_from_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_from_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_from_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_from_steam_id() {
  from_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectionClosed::from_steam_id() const {
  return from_steam_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_from_steam_id(::google::protobuf::uint64 value) {
  set_has_from_steam_id();
  from_steam_id_ = value;
}

// optional uint32 legacy_gameserver_relay_session_id = 2;
inline bool CMsgSteamDatagramConnectionClosed::has_legacy_gameserver_relay_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_legacy_gameserver_relay_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_legacy_gameserver_relay_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_legacy_gameserver_relay_session_id() {
  legacy_gameserver_relay_session_id_ = 0u;
  clear_has_legacy_gameserver_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::legacy_gameserver_relay_session_id() const {
  return legacy_gameserver_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_legacy_gameserver_relay_session_id(::google::protobuf::uint32 value) {
  set_has_legacy_gameserver_relay_session_id();
  legacy_gameserver_relay_session_id_ = value;
}

// optional fixed32 to_relay_session_id = 9;
inline bool CMsgSteamDatagramConnectionClosed::has_to_relay_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_to_relay_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_to_relay_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_to_relay_session_id() {
  to_relay_session_id_ = 0u;
  clear_has_to_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::to_relay_session_id() const {
  return to_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_to_relay_session_id(::google::protobuf::uint32 value) {
  set_has_to_relay_session_id();
  to_relay_session_id_ = value;
}

// optional fixed32 from_relay_session_id = 10;
inline bool CMsgSteamDatagramConnectionClosed::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_from_relay_session_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_from_relay_session_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  clear_has_from_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::from_relay_session_id() const {
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionClosed::set_from_relay_session_id(::google::protobuf::uint32 value) {
  set_has_from_relay_session_id();
  from_relay_session_id_ = value;
}

// optional bytes forward_target_relay_routing_token = 11;
inline bool CMsgSteamDatagramConnectionClosed::has_forward_target_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_forward_target_relay_routing_token() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_forward_target_relay_routing_token() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_forward_target_relay_routing_token() {
  if (forward_target_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_->clear();
  }
  clear_has_forward_target_relay_routing_token();
}
inline const ::std::string& CMsgSteamDatagramConnectionClosed::forward_target_relay_routing_token() const {
  return *forward_target_relay_routing_token_;
}
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_relay_routing_token(const ::std::string& value) {
  set_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_ = new ::std::string;
  }
  forward_target_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_relay_routing_token(const char* value) {
  set_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_ = new ::std::string;
  }
  forward_target_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_relay_routing_token(const void* value, size_t size) {
  set_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_ = new ::std::string;
  }
  forward_target_relay_routing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramConnectionClosed::mutable_forward_target_relay_routing_token() {
  set_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_ = new ::std::string;
  }
  return forward_target_relay_routing_token_;
}
inline ::std::string* CMsgSteamDatagramConnectionClosed::release_forward_target_relay_routing_token() {
  clear_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = forward_target_relay_routing_token_;
    forward_target_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramConnectionClosed::set_allocated_forward_target_relay_routing_token(::std::string* forward_target_relay_routing_token) {
  if (forward_target_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete forward_target_relay_routing_token_;
  }
  if (forward_target_relay_routing_token) {
    set_has_forward_target_relay_routing_token();
    forward_target_relay_routing_token_ = forward_target_relay_routing_token;
  } else {
    clear_has_forward_target_relay_routing_token();
    forward_target_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 forward_target_revision = 12;
inline bool CMsgSteamDatagramConnectionClosed::has_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_forward_target_revision() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_forward_target_revision() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_forward_target_revision() {
  forward_target_revision_ = 0u;
  clear_has_forward_target_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::forward_target_revision() const {
  return forward_target_revision_;
}
inline void CMsgSteamDatagramConnectionClosed::set_forward_target_revision(::google::protobuf::uint32 value) {
  set_has_forward_target_revision();
  forward_target_revision_ = value;
}

// optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
inline bool CMsgSteamDatagramConnectionClosed::has_relay_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_relay_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_relay_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_relay_mode() {
  relay_mode_ = 0;
  clear_has_relay_mode();
}
inline ::CMsgSteamDatagramConnectionClosed_ERelayMode CMsgSteamDatagramConnectionClosed::relay_mode() const {
  return static_cast< ::CMsgSteamDatagramConnectionClosed_ERelayMode >(relay_mode_);
}
inline void CMsgSteamDatagramConnectionClosed::set_relay_mode(::CMsgSteamDatagramConnectionClosed_ERelayMode value) {
  assert(::CMsgSteamDatagramConnectionClosed_ERelayMode_IsValid(value));
  set_has_relay_mode();
  relay_mode_ = value;
}

// optional string debug = 5;
inline bool CMsgSteamDatagramConnectionClosed::has_debug() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_debug() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_debug() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_debug() {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    debug_->clear();
  }
  clear_has_debug();
}
inline const ::std::string& CMsgSteamDatagramConnectionClosed::debug() const {
  return *debug_;
}
inline void CMsgSteamDatagramConnectionClosed::set_debug(const ::std::string& value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void CMsgSteamDatagramConnectionClosed::set_debug(const char* value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void CMsgSteamDatagramConnectionClosed::set_debug(const char* value, size_t size) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramConnectionClosed::mutable_debug() {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  return debug_;
}
inline ::std::string* CMsgSteamDatagramConnectionClosed::release_debug() {
  clear_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_;
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramConnectionClosed::set_allocated_debug(::std::string* debug) {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (debug) {
    set_has_debug();
    debug_ = debug;
  } else {
    clear_has_debug();
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 reason_code = 6;
inline bool CMsgSteamDatagramConnectionClosed::has_reason_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionClosed::set_has_reason_code() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_has_reason_code() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramConnectionClosed::clear_reason_code() {
  reason_code_ = 0u;
  clear_has_reason_code();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionClosed::reason_code() const {
  return reason_code_;
}
inline void CMsgSteamDatagramConnectionClosed::set_reason_code(::google::protobuf::uint32 value) {
  set_has_reason_code();
  reason_code_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramNoConnection

// optional fixed32 to_connection_id = 5;
inline bool CMsgSteamDatagramNoConnection::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramNoConnection::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramNoConnection::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramNoConnection::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::to_connection_id() const {
  return to_connection_id_;
}
inline void CMsgSteamDatagramNoConnection::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
}

// optional fixed32 from_connection_id = 6;
inline bool CMsgSteamDatagramNoConnection::has_from_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramNoConnection::set_has_from_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramNoConnection::clear_has_from_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramNoConnection::clear_from_connection_id() {
  from_connection_id_ = 0u;
  clear_has_from_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::from_connection_id() const {
  return from_connection_id_;
}
inline void CMsgSteamDatagramNoConnection::set_from_connection_id(::google::protobuf::uint32 value) {
  set_has_from_connection_id();
  from_connection_id_ = value;
}

// optional uint32 legacy_gameserver_relay_session_id = 2;
inline bool CMsgSteamDatagramNoConnection::has_legacy_gameserver_relay_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramNoConnection::set_has_legacy_gameserver_relay_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramNoConnection::clear_has_legacy_gameserver_relay_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramNoConnection::clear_legacy_gameserver_relay_session_id() {
  legacy_gameserver_relay_session_id_ = 0u;
  clear_has_legacy_gameserver_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::legacy_gameserver_relay_session_id() const {
  return legacy_gameserver_relay_session_id_;
}
inline void CMsgSteamDatagramNoConnection::set_legacy_gameserver_relay_session_id(::google::protobuf::uint32 value) {
  set_has_legacy_gameserver_relay_session_id();
  legacy_gameserver_relay_session_id_ = value;
}

// optional fixed32 to_relay_session_id = 9;
inline bool CMsgSteamDatagramNoConnection::has_to_relay_session_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramNoConnection::set_has_to_relay_session_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramNoConnection::clear_has_to_relay_session_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramNoConnection::clear_to_relay_session_id() {
  to_relay_session_id_ = 0u;
  clear_has_to_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::to_relay_session_id() const {
  return to_relay_session_id_;
}
inline void CMsgSteamDatagramNoConnection::set_to_relay_session_id(::google::protobuf::uint32 value) {
  set_has_to_relay_session_id();
  to_relay_session_id_ = value;
}

// optional fixed32 from_relay_session_id = 10;
inline bool CMsgSteamDatagramNoConnection::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramNoConnection::set_has_from_relay_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramNoConnection::clear_has_from_relay_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramNoConnection::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  clear_has_from_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::from_relay_session_id() const {
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramNoConnection::set_from_relay_session_id(::google::protobuf::uint32 value) {
  set_has_from_relay_session_id();
  from_relay_session_id_ = value;
}

// optional fixed64 from_steam_id = 3;
inline bool CMsgSteamDatagramNoConnection::has_from_steam_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramNoConnection::set_has_from_steam_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramNoConnection::clear_has_from_steam_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramNoConnection::clear_from_steam_id() {
  from_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramNoConnection::from_steam_id() const {
  return from_steam_id_;
}
inline void CMsgSteamDatagramNoConnection::set_from_steam_id(::google::protobuf::uint64 value) {
  set_has_from_steam_id();
  from_steam_id_ = value;
}

// optional bool end_to_end = 4;
inline bool CMsgSteamDatagramNoConnection::has_end_to_end() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramNoConnection::set_has_end_to_end() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramNoConnection::clear_has_end_to_end() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramNoConnection::clear_end_to_end() {
  end_to_end_ = false;
  clear_has_end_to_end();
}
inline bool CMsgSteamDatagramNoConnection::end_to_end() const {
  return end_to_end_;
}
inline void CMsgSteamDatagramNoConnection::set_end_to_end(bool value) {
  set_has_end_to_end();
  end_to_end_ = value;
}

// optional fixed32 dummy_pad = 1023;
inline bool CMsgSteamDatagramNoConnection::has_dummy_pad() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramNoConnection::set_has_dummy_pad() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramNoConnection::clear_has_dummy_pad() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramNoConnection::clear_dummy_pad() {
  dummy_pad_ = 0u;
  clear_has_dummy_pad();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramNoConnection::dummy_pad() const {
  return dummy_pad_;
}
inline void CMsgSteamDatagramNoConnection::set_dummy_pad(::google::protobuf::uint32 value) {
  set_has_dummy_pad();
  dummy_pad_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramGameserverSessionRequest

// optional bytes ticket = 1;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& CMsgSteamDatagramGameserverSessionRequest::ticket() const {
  return *ticket_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramGameserverSessionRequest::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}
inline ::std::string* CMsgSteamDatagramGameserverSessionRequest::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 challenge_time = 3;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_challenge_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_has_challenge_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_has_challenge_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_challenge_time() {
  challenge_time_ = 0u;
  clear_has_challenge_time();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::challenge_time() const {
  return challenge_time_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_challenge_time(::google::protobuf::uint32 value) {
  set_has_challenge_time();
  challenge_time_ = value;
}

// optional fixed64 challenge = 4;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_challenge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_has_challenge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_challenge() {
  challenge_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramGameserverSessionRequest::challenge() const {
  return challenge_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_challenge(::google::protobuf::uint64 value) {
  set_has_challenge();
  challenge_ = value;
}

// optional fixed32 client_connection_id = 5;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional fixed32 server_connection_id = 8;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_has_server_connection_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_has_server_connection_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_server_connection_id() {
  server_connection_id_ = 0u;
  clear_has_server_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::server_connection_id() const {
  return server_connection_id_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_server_connection_id(::google::protobuf::uint32 value) {
  set_has_server_connection_id();
  server_connection_id_ = value;
}

// optional uint32 network_config_version = 6;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_network_config_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_has_network_config_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_has_network_config_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_network_config_version() {
  network_config_version_ = 0u;
  clear_has_network_config_version();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::network_config_version() const {
  return network_config_version_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_network_config_version(::google::protobuf::uint32 value) {
  set_has_network_config_version();
  network_config_version_ = value;
}

// optional uint32 protocol_version = 7;
inline bool CMsgSteamDatagramGameserverSessionRequest::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramGameserverSessionRequest::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionRequest::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamDatagramGameserverSessionRequest::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramGameserverSessionEstablished

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramGameserverSessionEstablished::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionEstablished::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional fixed64 gameserver_steam_id = 3;
inline bool CMsgSteamDatagramGameserverSessionEstablished::has_gameserver_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_has_gameserver_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_has_gameserver_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_gameserver_steam_id() {
  gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gameserver_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramGameserverSessionEstablished::gameserver_steam_id() const {
  return gameserver_steam_id_;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_gameserver_steam_id(::google::protobuf::uint64 value) {
  set_has_gameserver_steam_id();
  gameserver_steam_id_ = value;
}

// optional uint32 seconds_until_shutdown = 4;
inline bool CMsgSteamDatagramGameserverSessionEstablished::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_has_seconds_until_shutdown() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_has_seconds_until_shutdown() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  clear_has_seconds_until_shutdown();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionEstablished::seconds_until_shutdown() const {
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  set_has_seconds_until_shutdown();
  seconds_until_shutdown_ = value;
}

// optional uint32 seq_num_r2c = 6;
inline bool CMsgSteamDatagramGameserverSessionEstablished::has_seq_num_r2c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_has_seq_num_r2c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_has_seq_num_r2c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::clear_seq_num_r2c() {
  seq_num_r2c_ = 0u;
  clear_has_seq_num_r2c();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramGameserverSessionEstablished::seq_num_r2c() const {
  return seq_num_r2c_;
}
inline void CMsgSteamDatagramGameserverSessionEstablished::set_seq_num_r2c(::google::protobuf::uint32 value) {
  set_has_seq_num_r2c();
  seq_num_r2c_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsClientToRouter

// optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_has_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_has_quality_relay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_relay() {
  if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_relay();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsClientToRouter::quality_relay() const {
  return quality_relay_ != NULL ? *quality_relay_ : *default_instance_->quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsClientToRouter::mutable_quality_relay() {
  set_has_quality_relay();
  if (quality_relay_ == NULL) quality_relay_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsClientToRouter::release_quality_relay() {
  clear_has_quality_relay();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay) {
  delete quality_relay_;
  quality_relay_ = quality_relay;
  if (quality_relay) {
    set_has_quality_relay();
  } else {
    clear_has_quality_relay();
  }
}

// optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_has_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_has_quality_e2e() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_e2e() {
  if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_e2e();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsClientToRouter::quality_e2e() const {
  return quality_e2e_ != NULL ? *quality_e2e_ : *default_instance_->quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsClientToRouter::mutable_quality_e2e() {
  set_has_quality_e2e();
  if (quality_e2e_ == NULL) quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsClientToRouter::release_quality_e2e() {
  clear_has_quality_e2e();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  delete quality_e2e_;
  quality_e2e_ = quality_e2e;
  if (quality_e2e) {
    set_has_quality_e2e();
  } else {
    clear_has_quality_e2e();
  }
}

// repeated fixed32 ack_relay = 4;
inline int CMsgSteamDatagramConnectionStatsClientToRouter::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::ack_relay(int index) const {
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsClientToRouter::ack_relay() const {
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsClientToRouter::mutable_ack_relay() {
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 5;
inline int CMsgSteamDatagramConnectionStatsClientToRouter::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::legacy_ack_e2e(int index) const {
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsClientToRouter::legacy_ack_e2e() const {
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsClientToRouter::mutable_legacy_ack_e2e() {
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 6;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::flags() const {
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional fixed32 client_connection_id = 8;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional uint32 seq_num_c2r = 9;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_seq_num_c2r() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_has_seq_num_c2r() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_has_seq_num_c2r() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_seq_num_c2r() {
  seq_num_c2r_ = 0u;
  clear_has_seq_num_c2r();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::seq_num_c2r() const {
  return seq_num_c2r_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_seq_num_c2r(::google::protobuf::uint32 value) {
  set_has_seq_num_c2r();
  seq_num_c2r_ = value;
}

// optional uint32 seq_num_c2s = 10;
inline bool CMsgSteamDatagramConnectionStatsClientToRouter::has_seq_num_c2s() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_has_seq_num_c2s() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_has_seq_num_c2s() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::clear_seq_num_c2s() {
  seq_num_c2s_ = 0u;
  clear_has_seq_num_c2s();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsClientToRouter::seq_num_c2s() const {
  return seq_num_c2s_;
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::set_seq_num_c2s(::google::protobuf::uint32 value) {
  set_has_seq_num_c2s();
  seq_num_c2s_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsRouterToClient

// optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_quality_relay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_relay() {
  if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_relay();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToClient::quality_relay() const {
  return quality_relay_ != NULL ? *quality_relay_ : *default_instance_->quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToClient::mutable_quality_relay() {
  set_has_quality_relay();
  if (quality_relay_ == NULL) quality_relay_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToClient::release_quality_relay() {
  clear_has_quality_relay();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay) {
  delete quality_relay_;
  quality_relay_ = quality_relay;
  if (quality_relay) {
    set_has_quality_relay();
  } else {
    clear_has_quality_relay();
  }
}

// optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_quality_e2e() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_e2e() {
  if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_e2e();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToClient::quality_e2e() const {
  return quality_e2e_ != NULL ? *quality_e2e_ : *default_instance_->quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToClient::mutable_quality_e2e() {
  set_has_quality_e2e();
  if (quality_e2e_ == NULL) quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToClient::release_quality_e2e() {
  clear_has_quality_e2e();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  delete quality_e2e_;
  quality_e2e_ = quality_e2e;
  if (quality_e2e) {
    set_has_quality_e2e();
  } else {
    clear_has_quality_e2e();
  }
}

// optional uint32 seconds_until_shutdown = 6;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_seconds_until_shutdown() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_seconds_until_shutdown() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  clear_has_seconds_until_shutdown();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::seconds_until_shutdown() const {
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  set_has_seconds_until_shutdown();
  seconds_until_shutdown_ = value;
}

// optional fixed32 migrate_request_ip = 10;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_migrate_request_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_migrate_request_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_migrate_request_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_migrate_request_ip() {
  migrate_request_ip_ = 0u;
  clear_has_migrate_request_ip();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::migrate_request_ip() const {
  return migrate_request_ip_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_migrate_request_ip(::google::protobuf::uint32 value) {
  set_has_migrate_request_ip();
  migrate_request_ip_ = value;
}

// optional uint32 migrate_request_port = 11;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_migrate_request_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_migrate_request_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_migrate_request_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_migrate_request_port() {
  migrate_request_port_ = 0u;
  clear_has_migrate_request_port();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::migrate_request_port() const {
  return migrate_request_port_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_migrate_request_port(::google::protobuf::uint32 value) {
  set_has_migrate_request_port();
  migrate_request_port_ = value;
}

// optional uint32 scoring_penalty_relay_cluster = 12;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_scoring_penalty_relay_cluster() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_scoring_penalty_relay_cluster() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_scoring_penalty_relay_cluster() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_scoring_penalty_relay_cluster() {
  scoring_penalty_relay_cluster_ = 0u;
  clear_has_scoring_penalty_relay_cluster();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::scoring_penalty_relay_cluster() const {
  return scoring_penalty_relay_cluster_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value) {
  set_has_scoring_penalty_relay_cluster();
  scoring_penalty_relay_cluster_ = value;
}

// repeated fixed32 ack_relay = 13;
inline int CMsgSteamDatagramConnectionStatsRouterToClient::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::ack_relay(int index) const {
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsRouterToClient::ack_relay() const {
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsRouterToClient::mutable_ack_relay() {
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 14;
inline int CMsgSteamDatagramConnectionStatsRouterToClient::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::legacy_ack_e2e(int index) const {
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsRouterToClient::legacy_ack_e2e() const {
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsRouterToClient::mutable_legacy_ack_e2e() {
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 15;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_flags() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_flags() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::flags() const {
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional fixed32 client_connection_id = 7;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional uint32 seq_num_r2c = 8;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_seq_num_r2c() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_seq_num_r2c() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_seq_num_r2c() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_seq_num_r2c() {
  seq_num_r2c_ = 0u;
  clear_has_seq_num_r2c();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::seq_num_r2c() const {
  return seq_num_r2c_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_seq_num_r2c(::google::protobuf::uint32 value) {
  set_has_seq_num_r2c();
  seq_num_r2c_ = value;
}

// optional uint32 seq_num_s2c = 9;
inline bool CMsgSteamDatagramConnectionStatsRouterToClient::has_seq_num_s2c() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_has_seq_num_s2c() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_has_seq_num_s2c() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::clear_seq_num_s2c() {
  seq_num_s2c_ = 0u;
  clear_has_seq_num_s2c();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToClient::seq_num_s2c() const {
  return seq_num_s2c_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::set_seq_num_s2c(::google::protobuf::uint32 value) {
  set_has_seq_num_s2c();
  seq_num_s2c_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsRouterToServer

// optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_quality_relay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_relay() {
  if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_relay();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToServer::quality_relay() const {
  return quality_relay_ != NULL ? *quality_relay_ : *default_instance_->quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToServer::mutable_quality_relay() {
  set_has_quality_relay();
  if (quality_relay_ == NULL) quality_relay_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToServer::release_quality_relay() {
  clear_has_quality_relay();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay) {
  delete quality_relay_;
  quality_relay_ = quality_relay;
  if (quality_relay) {
    set_has_quality_relay();
  } else {
    clear_has_quality_relay();
  }
}

// optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_quality_e2e() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_e2e() {
  if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_e2e();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsRouterToServer::quality_e2e() const {
  return quality_e2e_ != NULL ? *quality_e2e_ : *default_instance_->quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToServer::mutable_quality_e2e() {
  set_has_quality_e2e();
  if (quality_e2e_ == NULL) quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsRouterToServer::release_quality_e2e() {
  clear_has_quality_e2e();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  delete quality_e2e_;
  quality_e2e_ = quality_e2e;
  if (quality_e2e) {
    set_has_quality_e2e();
  } else {
    clear_has_quality_e2e();
  }
}

// repeated fixed32 ack_relay = 10;
inline int CMsgSteamDatagramConnectionStatsRouterToServer::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::ack_relay(int index) const {
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsRouterToServer::ack_relay() const {
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsRouterToServer::mutable_ack_relay() {
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 11;
inline int CMsgSteamDatagramConnectionStatsRouterToServer::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::legacy_ack_e2e(int index) const {
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsRouterToServer::legacy_ack_e2e() const {
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsRouterToServer::mutable_legacy_ack_e2e() {
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 12;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::flags() const {
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint32 seq_num_r2s = 5;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_seq_num_r2s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_seq_num_r2s() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_seq_num_r2s() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_seq_num_r2s() {
  seq_num_r2s_ = 0u;
  clear_has_seq_num_r2s();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::seq_num_r2s() const {
  return seq_num_r2s_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_seq_num_r2s(::google::protobuf::uint32 value) {
  set_has_seq_num_r2s();
  seq_num_r2s_ = value;
}

// optional uint32 seq_num_c2s = 6;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_seq_num_c2s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_seq_num_c2s() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_seq_num_c2s() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_seq_num_c2s() {
  seq_num_c2s_ = 0u;
  clear_has_seq_num_c2s();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::seq_num_c2s() const {
  return seq_num_c2s_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_seq_num_c2s(::google::protobuf::uint32 value) {
  set_has_seq_num_c2s();
  seq_num_c2s_ = value;
}

// optional fixed64 client_steam_id = 7;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_client_steam_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_client_steam_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_client_steam_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_client_steam_id() {
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectionStatsRouterToServer::client_steam_id() const {
  return client_steam_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_client_steam_id(::google::protobuf::uint64 value) {
  set_has_client_steam_id();
  client_steam_id_ = value;
}

// optional uint32 relay_session_id = 8;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_relay_session_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_relay_session_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_relay_session_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_relay_session_id() {
  relay_session_id_ = 0u;
  clear_has_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::relay_session_id() const {
  return relay_session_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_relay_session_id(::google::protobuf::uint32 value) {
  set_has_relay_session_id();
  relay_session_id_ = value;
}

// optional fixed32 client_connection_id = 9;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional fixed32 server_connection_id = 13;
inline bool CMsgSteamDatagramConnectionStatsRouterToServer::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_has_server_connection_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_has_server_connection_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::clear_server_connection_id() {
  server_connection_id_ = 0u;
  clear_has_server_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsRouterToServer::server_connection_id() const {
  return server_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::set_server_connection_id(::google::protobuf::uint32 value) {
  set_has_server_connection_id();
  server_connection_id_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsServerToRouter

// optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_quality_relay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_relay() {
  if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_relay();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsServerToRouter::quality_relay() const {
  return quality_relay_ != NULL ? *quality_relay_ : *default_instance_->quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsServerToRouter::mutable_quality_relay() {
  set_has_quality_relay();
  if (quality_relay_ == NULL) quality_relay_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsServerToRouter::release_quality_relay() {
  clear_has_quality_relay();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay) {
  delete quality_relay_;
  quality_relay_ = quality_relay;
  if (quality_relay) {
    set_has_quality_relay();
  } else {
    clear_has_quality_relay();
  }
}

// optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_quality_e2e() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_e2e() {
  if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_e2e();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsServerToRouter::quality_e2e() const {
  return quality_e2e_ != NULL ? *quality_e2e_ : *default_instance_->quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsServerToRouter::mutable_quality_e2e() {
  set_has_quality_e2e();
  if (quality_e2e_ == NULL) quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsServerToRouter::release_quality_e2e() {
  clear_has_quality_e2e();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  delete quality_e2e_;
  quality_e2e_ = quality_e2e;
  if (quality_e2e) {
    set_has_quality_e2e();
  } else {
    clear_has_quality_e2e();
  }
}

// repeated fixed32 ack_relay = 8;
inline int CMsgSteamDatagramConnectionStatsServerToRouter::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::ack_relay(int index) const {
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsServerToRouter::ack_relay() const {
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsServerToRouter::mutable_ack_relay() {
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 9;
inline int CMsgSteamDatagramConnectionStatsServerToRouter::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::legacy_ack_e2e(int index) const {
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsServerToRouter::legacy_ack_e2e() const {
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsServerToRouter::mutable_legacy_ack_e2e() {
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 10;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::flags() const {
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint32 seq_num_s2r = 3;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_seq_num_s2r() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_seq_num_s2r() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_seq_num_s2r() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_seq_num_s2r() {
  seq_num_s2r_ = 0u;
  clear_has_seq_num_s2r();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::seq_num_s2r() const {
  return seq_num_s2r_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_seq_num_s2r(::google::protobuf::uint32 value) {
  set_has_seq_num_s2r();
  seq_num_s2r_ = value;
}

// optional uint32 seq_num_s2c = 4;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_seq_num_s2c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_seq_num_s2c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_seq_num_s2c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_seq_num_s2c() {
  seq_num_s2c_ = 0u;
  clear_has_seq_num_s2c();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::seq_num_s2c() const {
  return seq_num_s2c_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_seq_num_s2c(::google::protobuf::uint32 value) {
  set_has_seq_num_s2c();
  seq_num_s2c_ = value;
}

// optional fixed64 client_steam_id = 5;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_client_steam_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_client_steam_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_client_steam_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_client_steam_id() {
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramConnectionStatsServerToRouter::client_steam_id() const {
  return client_steam_id_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_client_steam_id(::google::protobuf::uint64 value) {
  set_has_client_steam_id();
  client_steam_id_ = value;
}

// optional uint32 relay_session_id = 6;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_relay_session_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_relay_session_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_relay_session_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_relay_session_id() {
  relay_session_id_ = 0u;
  clear_has_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::relay_session_id() const {
  return relay_session_id_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_relay_session_id(::google::protobuf::uint32 value) {
  set_has_relay_session_id();
  relay_session_id_ = value;
}

// optional fixed32 client_connection_id = 7;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional fixed32 server_connection_id = 11;
inline bool CMsgSteamDatagramConnectionStatsServerToRouter::has_server_connection_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_has_server_connection_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_has_server_connection_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::clear_server_connection_id() {
  server_connection_id_ = 0u;
  clear_has_server_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsServerToRouter::server_connection_id() const {
  return server_connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::set_server_connection_id(::google::protobuf::uint32 value) {
  set_has_server_connection_id();
  server_connection_id_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PSessionRequestBody

// optional fixed32 challenge_time = 1;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_challenge_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_has_challenge_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_has_challenge_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_challenge_time() {
  challenge_time_ = 0u;
  clear_has_challenge_time();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::challenge_time() const {
  return challenge_time_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_challenge_time(::google::protobuf::uint32 value) {
  set_has_challenge_time();
  challenge_time_ = value;
}

// optional fixed64 challenge = 2;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_challenge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_has_challenge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_challenge() {
  challenge_ = GOOGLE_ULONGLONG(0);
  clear_has_challenge();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramP2PSessionRequestBody::challenge() const {
  return challenge_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_challenge(::google::protobuf::uint64 value) {
  set_has_challenge();
  challenge_ = value;
}

// optional fixed32 client_connection_id = 3;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_client_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_has_client_connection_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_has_client_connection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_client_connection_id() {
  client_connection_id_ = 0u;
  clear_has_client_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::client_connection_id() const {
  return client_connection_id_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_client_connection_id(::google::protobuf::uint32 value) {
  set_has_client_connection_id();
  client_connection_id_ = value;
}

// optional fixed64 peer_steam_id = 4;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_peer_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_has_peer_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_has_peer_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_peer_steam_id() {
  peer_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_peer_steam_id();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramP2PSessionRequestBody::peer_steam_id() const {
  return peer_steam_id_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_peer_steam_id(::google::protobuf::uint64 value) {
  set_has_peer_steam_id();
  peer_steam_id_ = value;
}

// optional fixed32 peer_connection_id = 5;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_peer_connection_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_has_peer_connection_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_has_peer_connection_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_peer_connection_id() {
  peer_connection_id_ = 0u;
  clear_has_peer_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::peer_connection_id() const {
  return peer_connection_id_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_peer_connection_id(::google::protobuf::uint32 value) {
  set_has_peer_connection_id();
  peer_connection_id_ = value;
}

// optional uint32 protocol_version = 8;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_protocol_version() {
  protocol_version_ = 0u;
  clear_has_protocol_version();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::protocol_version() const {
  return protocol_version_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_protocol_version(::google::protobuf::uint32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// optional uint32 network_config_version = 9;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_network_config_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_has_network_config_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_has_network_config_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_network_config_version() {
  network_config_version_ = 0u;
  clear_has_network_config_version();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::network_config_version() const {
  return network_config_version_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_network_config_version(::google::protobuf::uint32 value) {
  set_has_network_config_version();
  network_config_version_ = value;
}

// optional fixed32 public_ip = 10;
inline bool CMsgSteamDatagramP2PSessionRequestBody::has_public_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_has_public_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionRequestBody::public_ip() const {
  return public_ip_;
}
inline void CMsgSteamDatagramP2PSessionRequestBody::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PSessionRequest

// optional .CMsgSteamDatagramCertificateSigned cert = 1;
inline bool CMsgSteamDatagramP2PSessionRequest::has_cert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequest::set_has_cert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramP2PSessionRequest::clear_has_cert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramP2PSessionRequest::clear_cert() {
  if (cert_ != NULL) cert_->::CMsgSteamDatagramCertificateSigned::Clear();
  clear_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramP2PSessionRequest::cert() const {
  return cert_ != NULL ? *cert_ : *default_instance_->cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramP2PSessionRequest::mutable_cert() {
  set_has_cert();
  if (cert_ == NULL) cert_ = new ::CMsgSteamDatagramCertificateSigned;
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramP2PSessionRequest::release_cert() {
  clear_has_cert();
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramP2PSessionRequest::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  delete cert_;
  cert_ = cert;
  if (cert) {
    set_has_cert();
  } else {
    clear_has_cert();
  }
}

// optional bytes body = 2;
inline bool CMsgSteamDatagramP2PSessionRequest::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequest::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramP2PSessionRequest::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramP2PSessionRequest::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& CMsgSteamDatagramP2PSessionRequest::body() const {
  return *body_;
}
inline void CMsgSteamDatagramP2PSessionRequest::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CMsgSteamDatagramP2PSessionRequest::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void CMsgSteamDatagramP2PSessionRequest::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramP2PSessionRequest::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* CMsgSteamDatagramP2PSessionRequest::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramP2PSessionRequest::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes signature = 3;
inline bool CMsgSteamDatagramP2PSessionRequest::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PSessionRequest::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramP2PSessionRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramP2PSessionRequest::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& CMsgSteamDatagramP2PSessionRequest::signature() const {
  return *signature_;
}
inline void CMsgSteamDatagramP2PSessionRequest::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramP2PSessionRequest::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void CMsgSteamDatagramP2PSessionRequest::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramP2PSessionRequest::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* CMsgSteamDatagramP2PSessionRequest::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramP2PSessionRequest::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PSessionEstablished

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramP2PSessionEstablished::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionEstablished::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional uint32 seconds_until_shutdown = 3;
inline bool CMsgSteamDatagramP2PSessionEstablished::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_has_seconds_until_shutdown() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_has_seconds_until_shutdown() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  clear_has_seconds_until_shutdown();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionEstablished::seconds_until_shutdown() const {
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  set_has_seconds_until_shutdown();
  seconds_until_shutdown_ = value;
}

// optional bytes relay_routing_token = 4;
inline bool CMsgSteamDatagramP2PSessionEstablished::has_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_has_relay_routing_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_has_relay_routing_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_relay_routing_token() {
  if (relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    relay_routing_token_->clear();
  }
  clear_has_relay_routing_token();
}
inline const ::std::string& CMsgSteamDatagramP2PSessionEstablished::relay_routing_token() const {
  return *relay_routing_token_;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_relay_routing_token(const ::std::string& value) {
  set_has_relay_routing_token();
  if (relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    relay_routing_token_ = new ::std::string;
  }
  relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_relay_routing_token(const char* value) {
  set_has_relay_routing_token();
  if (relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    relay_routing_token_ = new ::std::string;
  }
  relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_relay_routing_token(const void* value, size_t size) {
  set_has_relay_routing_token();
  if (relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    relay_routing_token_ = new ::std::string;
  }
  relay_routing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramP2PSessionEstablished::mutable_relay_routing_token() {
  set_has_relay_routing_token();
  if (relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    relay_routing_token_ = new ::std::string;
  }
  return relay_routing_token_;
}
inline ::std::string* CMsgSteamDatagramP2PSessionEstablished::release_relay_routing_token() {
  clear_has_relay_routing_token();
  if (relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relay_routing_token_;
    relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_allocated_relay_routing_token(::std::string* relay_routing_token) {
  if (relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete relay_routing_token_;
  }
  if (relay_routing_token) {
    set_has_relay_routing_token();
    relay_routing_token_ = relay_routing_token;
  } else {
    clear_has_relay_routing_token();
    relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 seq_num_r2c = 5;
inline bool CMsgSteamDatagramP2PSessionEstablished::has_seq_num_r2c() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_has_seq_num_r2c() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_has_seq_num_r2c() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramP2PSessionEstablished::clear_seq_num_r2c() {
  seq_num_r2c_ = 0u;
  clear_has_seq_num_r2c();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PSessionEstablished::seq_num_r2c() const {
  return seq_num_r2c_;
}
inline void CMsgSteamDatagramP2PSessionEstablished::set_seq_num_r2c(::google::protobuf::uint32 value) {
  set_has_seq_num_r2c();
  seq_num_r2c_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PRoutes_RelayCluster

// optional fixed32 pop_id = 1;
inline bool CMsgSteamDatagramP2PRoutes_RelayCluster::has_pop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_has_pop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_has_pop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_pop_id() {
  pop_id_ = 0u;
  clear_has_pop_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_RelayCluster::pop_id() const {
  return pop_id_;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_pop_id(::google::protobuf::uint32 value) {
  set_has_pop_id();
  pop_id_ = value;
}

// optional uint32 ping_ms = 2;
inline bool CMsgSteamDatagramP2PRoutes_RelayCluster::has_ping_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_has_ping_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_has_ping_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_ping_ms() {
  ping_ms_ = 0u;
  clear_has_ping_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_RelayCluster::ping_ms() const {
  return ping_ms_;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_ping_ms(::google::protobuf::uint32 value) {
  set_has_ping_ms();
  ping_ms_ = value;
}

// optional uint32 score_penalty = 3;
inline bool CMsgSteamDatagramP2PRoutes_RelayCluster::has_score_penalty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_has_score_penalty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_has_score_penalty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_score_penalty() {
  score_penalty_ = 0u;
  clear_has_score_penalty();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_RelayCluster::score_penalty() const {
  return score_penalty_;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_score_penalty(::google::protobuf::uint32 value) {
  set_has_score_penalty();
  score_penalty_ = value;
}

// optional bytes session_relay_routing_token = 4;
inline bool CMsgSteamDatagramP2PRoutes_RelayCluster::has_session_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_has_session_relay_routing_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_has_session_relay_routing_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::clear_session_relay_routing_token() {
  if (session_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    session_relay_routing_token_->clear();
  }
  clear_has_session_relay_routing_token();
}
inline const ::std::string& CMsgSteamDatagramP2PRoutes_RelayCluster::session_relay_routing_token() const {
  return *session_relay_routing_token_;
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_session_relay_routing_token(const ::std::string& value) {
  set_has_session_relay_routing_token();
  if (session_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    session_relay_routing_token_ = new ::std::string;
  }
  session_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_session_relay_routing_token(const char* value) {
  set_has_session_relay_routing_token();
  if (session_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    session_relay_routing_token_ = new ::std::string;
  }
  session_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_session_relay_routing_token(const void* value, size_t size) {
  set_has_session_relay_routing_token();
  if (session_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    session_relay_routing_token_ = new ::std::string;
  }
  session_relay_routing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramP2PRoutes_RelayCluster::mutable_session_relay_routing_token() {
  set_has_session_relay_routing_token();
  if (session_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    session_relay_routing_token_ = new ::std::string;
  }
  return session_relay_routing_token_;
}
inline ::std::string* CMsgSteamDatagramP2PRoutes_RelayCluster::release_session_relay_routing_token() {
  clear_has_session_relay_routing_token();
  if (session_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_relay_routing_token_;
    session_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::set_allocated_session_relay_routing_token(::std::string* session_relay_routing_token) {
  if (session_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete session_relay_routing_token_;
  }
  if (session_relay_routing_token) {
    set_has_session_relay_routing_token();
    session_relay_routing_token_ = session_relay_routing_token;
  } else {
    clear_has_session_relay_routing_token();
    session_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PRoutes_Route

// optional fixed32 my_pop_id = 1;
inline bool CMsgSteamDatagramP2PRoutes_Route::has_my_pop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_has_my_pop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_has_my_pop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_my_pop_id() {
  my_pop_id_ = 0u;
  clear_has_my_pop_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_Route::my_pop_id() const {
  return my_pop_id_;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_my_pop_id(::google::protobuf::uint32 value) {
  set_has_my_pop_id();
  my_pop_id_ = value;
}

// optional fixed32 your_pop_id = 2;
inline bool CMsgSteamDatagramP2PRoutes_Route::has_your_pop_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_has_your_pop_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_has_your_pop_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_your_pop_id() {
  your_pop_id_ = 0u;
  clear_has_your_pop_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_Route::your_pop_id() const {
  return your_pop_id_;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_your_pop_id(::google::protobuf::uint32 value) {
  set_has_your_pop_id();
  your_pop_id_ = value;
}

// optional uint32 score = 3;
inline bool CMsgSteamDatagramP2PRoutes_Route::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramP2PRoutes_Route::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes_Route::score() const {
  return score_;
}
inline void CMsgSteamDatagramP2PRoutes_Route::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PRoutes

// repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
inline int CMsgSteamDatagramP2PRoutes::relay_clusters_size() const {
  return relay_clusters_.size();
}
inline void CMsgSteamDatagramP2PRoutes::clear_relay_clusters() {
  relay_clusters_.Clear();
}
inline const ::CMsgSteamDatagramP2PRoutes_RelayCluster& CMsgSteamDatagramP2PRoutes::relay_clusters(int index) const {
  return relay_clusters_.Get(index);
}
inline ::CMsgSteamDatagramP2PRoutes_RelayCluster* CMsgSteamDatagramP2PRoutes::mutable_relay_clusters(int index) {
  return relay_clusters_.Mutable(index);
}
inline ::CMsgSteamDatagramP2PRoutes_RelayCluster* CMsgSteamDatagramP2PRoutes::add_relay_clusters() {
  return relay_clusters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_RelayCluster >&
CMsgSteamDatagramP2PRoutes::relay_clusters() const {
  return relay_clusters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_RelayCluster >*
CMsgSteamDatagramP2PRoutes::mutable_relay_clusters() {
  return &relay_clusters_;
}

// repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
inline int CMsgSteamDatagramP2PRoutes::routes_size() const {
  return routes_.size();
}
inline void CMsgSteamDatagramP2PRoutes::clear_routes() {
  routes_.Clear();
}
inline const ::CMsgSteamDatagramP2PRoutes_Route& CMsgSteamDatagramP2PRoutes::routes(int index) const {
  return routes_.Get(index);
}
inline ::CMsgSteamDatagramP2PRoutes_Route* CMsgSteamDatagramP2PRoutes::mutable_routes(int index) {
  return routes_.Mutable(index);
}
inline ::CMsgSteamDatagramP2PRoutes_Route* CMsgSteamDatagramP2PRoutes::add_routes() {
  return routes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_Route >&
CMsgSteamDatagramP2PRoutes::routes() const {
  return routes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramP2PRoutes_Route >*
CMsgSteamDatagramP2PRoutes::mutable_routes() {
  return &routes_;
}

// optional uint32 revision = 3;
inline bool CMsgSteamDatagramP2PRoutes::has_revision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PRoutes::set_has_revision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramP2PRoutes::clear_has_revision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramP2PRoutes::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRoutes::revision() const {
  return revision_;
}
inline void CMsgSteamDatagramP2PRoutes::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PRendezvous

// optional fixed32 to_connection_id = 1;
inline bool CMsgSteamDatagramP2PRendezvous::has_to_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::set_has_to_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_has_to_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_to_connection_id() {
  to_connection_id_ = 0u;
  clear_has_to_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRendezvous::to_connection_id() const {
  return to_connection_id_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_to_connection_id(::google::protobuf::uint32 value) {
  set_has_to_connection_id();
  to_connection_id_ = value;
}

// optional .CMsgSteamDatagramP2PRoutes routes = 2;
inline bool CMsgSteamDatagramP2PRendezvous::has_routes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::set_has_routes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_has_routes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_routes() {
  if (routes_ != NULL) routes_->::CMsgSteamDatagramP2PRoutes::Clear();
  clear_has_routes();
}
inline const ::CMsgSteamDatagramP2PRoutes& CMsgSteamDatagramP2PRendezvous::routes() const {
  return routes_ != NULL ? *routes_ : *default_instance_->routes_;
}
inline ::CMsgSteamDatagramP2PRoutes* CMsgSteamDatagramP2PRendezvous::mutable_routes() {
  set_has_routes();
  if (routes_ == NULL) routes_ = new ::CMsgSteamDatagramP2PRoutes;
  return routes_;
}
inline ::CMsgSteamDatagramP2PRoutes* CMsgSteamDatagramP2PRendezvous::release_routes() {
  clear_has_routes();
  ::CMsgSteamDatagramP2PRoutes* temp = routes_;
  routes_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_routes(::CMsgSteamDatagramP2PRoutes* routes) {
  delete routes_;
  routes_ = routes;
  if (routes) {
    set_has_routes();
  } else {
    clear_has_routes();
  }
}

// optional uint32 ack_peer_routes_revision = 3;
inline bool CMsgSteamDatagramP2PRendezvous::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::set_has_ack_peer_routes_revision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_has_ack_peer_routes_revision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  clear_has_ack_peer_routes_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PRendezvous::ack_peer_routes_revision() const {
  return ack_peer_routes_revision_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  set_has_ack_peer_routes_revision();
  ack_peer_routes_revision_ = value;
}

// optional .CMsgSteamDatagramConnectRequest connect_request = 4;
inline bool CMsgSteamDatagramP2PRendezvous::has_connect_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::set_has_connect_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_has_connect_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_connect_request() {
  if (connect_request_ != NULL) connect_request_->::CMsgSteamDatagramConnectRequest::Clear();
  clear_has_connect_request();
}
inline const ::CMsgSteamDatagramConnectRequest& CMsgSteamDatagramP2PRendezvous::connect_request() const {
  return connect_request_ != NULL ? *connect_request_ : *default_instance_->connect_request_;
}
inline ::CMsgSteamDatagramConnectRequest* CMsgSteamDatagramP2PRendezvous::mutable_connect_request() {
  set_has_connect_request();
  if (connect_request_ == NULL) connect_request_ = new ::CMsgSteamDatagramConnectRequest;
  return connect_request_;
}
inline ::CMsgSteamDatagramConnectRequest* CMsgSteamDatagramP2PRendezvous::release_connect_request() {
  clear_has_connect_request();
  ::CMsgSteamDatagramConnectRequest* temp = connect_request_;
  connect_request_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_connect_request(::CMsgSteamDatagramConnectRequest* connect_request) {
  delete connect_request_;
  connect_request_ = connect_request;
  if (connect_request) {
    set_has_connect_request();
  } else {
    clear_has_connect_request();
  }
}

// optional .CMsgSteamDatagramConnectOK connect_ok = 5;
inline bool CMsgSteamDatagramP2PRendezvous::has_connect_ok() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::set_has_connect_ok() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_has_connect_ok() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_connect_ok() {
  if (connect_ok_ != NULL) connect_ok_->::CMsgSteamDatagramConnectOK::Clear();
  clear_has_connect_ok();
}
inline const ::CMsgSteamDatagramConnectOK& CMsgSteamDatagramP2PRendezvous::connect_ok() const {
  return connect_ok_ != NULL ? *connect_ok_ : *default_instance_->connect_ok_;
}
inline ::CMsgSteamDatagramConnectOK* CMsgSteamDatagramP2PRendezvous::mutable_connect_ok() {
  set_has_connect_ok();
  if (connect_ok_ == NULL) connect_ok_ = new ::CMsgSteamDatagramConnectOK;
  return connect_ok_;
}
inline ::CMsgSteamDatagramConnectOK* CMsgSteamDatagramP2PRendezvous::release_connect_ok() {
  clear_has_connect_ok();
  ::CMsgSteamDatagramConnectOK* temp = connect_ok_;
  connect_ok_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_connect_ok(::CMsgSteamDatagramConnectOK* connect_ok) {
  delete connect_ok_;
  connect_ok_ = connect_ok;
  if (connect_ok) {
    set_has_connect_ok();
  } else {
    clear_has_connect_ok();
  }
}

// optional .CMsgSteamDatagramConnectionClosed connection_closed = 6;
inline bool CMsgSteamDatagramP2PRendezvous::has_connection_closed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::set_has_connection_closed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_has_connection_closed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_connection_closed() {
  if (connection_closed_ != NULL) connection_closed_->::CMsgSteamDatagramConnectionClosed::Clear();
  clear_has_connection_closed();
}
inline const ::CMsgSteamDatagramConnectionClosed& CMsgSteamDatagramP2PRendezvous::connection_closed() const {
  return connection_closed_ != NULL ? *connection_closed_ : *default_instance_->connection_closed_;
}
inline ::CMsgSteamDatagramConnectionClosed* CMsgSteamDatagramP2PRendezvous::mutable_connection_closed() {
  set_has_connection_closed();
  if (connection_closed_ == NULL) connection_closed_ = new ::CMsgSteamDatagramConnectionClosed;
  return connection_closed_;
}
inline ::CMsgSteamDatagramConnectionClosed* CMsgSteamDatagramP2PRendezvous::release_connection_closed() {
  clear_has_connection_closed();
  ::CMsgSteamDatagramConnectionClosed* temp = connection_closed_;
  connection_closed_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_connection_closed(::CMsgSteamDatagramConnectionClosed* connection_closed) {
  delete connection_closed_;
  connection_closed_ = connection_closed;
  if (connection_closed) {
    set_has_connection_closed();
  } else {
    clear_has_connection_closed();
  }
}

// optional bytes failed_relay_routing_token = 7;
inline bool CMsgSteamDatagramP2PRendezvous::has_failed_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramP2PRendezvous::set_has_failed_relay_routing_token() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_has_failed_relay_routing_token() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramP2PRendezvous::clear_failed_relay_routing_token() {
  if (failed_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_->clear();
  }
  clear_has_failed_relay_routing_token();
}
inline const ::std::string& CMsgSteamDatagramP2PRendezvous::failed_relay_routing_token() const {
  return *failed_relay_routing_token_;
}
inline void CMsgSteamDatagramP2PRendezvous::set_failed_relay_routing_token(const ::std::string& value) {
  set_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_ = new ::std::string;
  }
  failed_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramP2PRendezvous::set_failed_relay_routing_token(const char* value) {
  set_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_ = new ::std::string;
  }
  failed_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramP2PRendezvous::set_failed_relay_routing_token(const void* value, size_t size) {
  set_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_ = new ::std::string;
  }
  failed_relay_routing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramP2PRendezvous::mutable_failed_relay_routing_token() {
  set_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_ = new ::std::string;
  }
  return failed_relay_routing_token_;
}
inline ::std::string* CMsgSteamDatagramP2PRendezvous::release_failed_relay_routing_token() {
  clear_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = failed_relay_routing_token_;
    failed_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramP2PRendezvous::set_allocated_failed_relay_routing_token(::std::string* failed_relay_routing_token) {
  if (failed_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete failed_relay_routing_token_;
  }
  if (failed_relay_routing_token) {
    set_has_failed_relay_routing_token();
    failed_relay_routing_token_ = failed_relay_routing_token;
  } else {
    clear_has_failed_relay_routing_token();
    failed_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsP2PClientToRouter

// optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_quality_relay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_relay() {
  if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_relay();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PClientToRouter::quality_relay() const {
  return quality_relay_ != NULL ? *quality_relay_ : *default_instance_->quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_quality_relay() {
  set_has_quality_relay();
  if (quality_relay_ == NULL) quality_relay_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PClientToRouter::release_quality_relay() {
  clear_has_quality_relay();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay) {
  delete quality_relay_;
  quality_relay_ = quality_relay;
  if (quality_relay) {
    set_has_quality_relay();
  } else {
    clear_has_quality_relay();
  }
}

// optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_quality_e2e() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_e2e() {
  if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_e2e();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PClientToRouter::quality_e2e() const {
  return quality_e2e_ != NULL ? *quality_e2e_ : *default_instance_->quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_quality_e2e() {
  set_has_quality_e2e();
  if (quality_e2e_ == NULL) quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PClientToRouter::release_quality_e2e() {
  clear_has_quality_e2e();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  delete quality_e2e_;
  quality_e2e_ = quality_e2e;
  if (quality_e2e) {
    set_has_quality_e2e();
  } else {
    clear_has_quality_e2e();
  }
}

// repeated fixed32 ack_relay = 3;
inline int CMsgSteamDatagramConnectionStatsP2PClientToRouter::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::ack_relay(int index) const {
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::ack_relay() const {
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_ack_relay() {
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 4;
inline int CMsgSteamDatagramConnectionStatsP2PClientToRouter::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::legacy_ack_e2e(int index) const {
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PClientToRouter::legacy_ack_e2e() const {
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_legacy_ack_e2e() {
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 5;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::flags() const {
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional bytes forward_target_relay_routing_token = 6;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_forward_target_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_forward_target_relay_routing_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_forward_target_relay_routing_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_forward_target_relay_routing_token() {
  if (forward_target_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_->clear();
  }
  clear_has_forward_target_relay_routing_token();
}
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PClientToRouter::forward_target_relay_routing_token() const {
  return *forward_target_relay_routing_token_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_relay_routing_token(const ::std::string& value) {
  set_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_ = new ::std::string;
  }
  forward_target_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_relay_routing_token(const char* value) {
  set_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_ = new ::std::string;
  }
  forward_target_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_relay_routing_token(const void* value, size_t size) {
  set_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_ = new ::std::string;
  }
  forward_target_relay_routing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_forward_target_relay_routing_token() {
  set_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    forward_target_relay_routing_token_ = new ::std::string;
  }
  return forward_target_relay_routing_token_;
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PClientToRouter::release_forward_target_relay_routing_token() {
  clear_has_forward_target_relay_routing_token();
  if (forward_target_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = forward_target_relay_routing_token_;
    forward_target_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_allocated_forward_target_relay_routing_token(::std::string* forward_target_relay_routing_token) {
  if (forward_target_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete forward_target_relay_routing_token_;
  }
  if (forward_target_relay_routing_token) {
    set_has_forward_target_relay_routing_token();
    forward_target_relay_routing_token_ = forward_target_relay_routing_token;
  } else {
    clear_has_forward_target_relay_routing_token();
    forward_target_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 forward_target_revision = 7;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_forward_target_revision() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_forward_target_revision() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_forward_target_revision() {
  forward_target_revision_ = 0u;
  clear_has_forward_target_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::forward_target_revision() const {
  return forward_target_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_forward_target_revision(::google::protobuf::uint32 value) {
  set_has_forward_target_revision();
  forward_target_revision_ = value;
}

// optional bytes routes = 8;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_routes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_routes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_routes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_routes() {
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    routes_->clear();
  }
  clear_has_routes();
}
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PClientToRouter::routes() const {
  return *routes_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_routes(const ::std::string& value) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(value);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_routes(const char* value) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(value);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_routes(const void* value, size_t size) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PClientToRouter::mutable_routes() {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  return routes_;
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PClientToRouter::release_routes() {
  clear_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = routes_;
    routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_allocated_routes(::std::string* routes) {
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    delete routes_;
  }
  if (routes) {
    set_has_routes();
    routes_ = routes;
  } else {
    clear_has_routes();
    routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ack_peer_routes_revision = 9;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_ack_peer_routes_revision() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_ack_peer_routes_revision() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  clear_has_ack_peer_routes_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::ack_peer_routes_revision() const {
  return ack_peer_routes_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  set_has_ack_peer_routes_revision();
  ack_peer_routes_revision_ = value;
}

// optional fixed32 connection_id = 10;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_connection_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_connection_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional uint32 seq_num_c2r = 11;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_seq_num_c2r() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_seq_num_c2r() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_seq_num_c2r() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_seq_num_c2r() {
  seq_num_c2r_ = 0u;
  clear_has_seq_num_c2r();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::seq_num_c2r() const {
  return seq_num_c2r_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_seq_num_c2r(::google::protobuf::uint32 value) {
  set_has_seq_num_c2r();
  seq_num_c2r_ = value;
}

// optional uint32 seq_num_e2e = 12;
inline bool CMsgSteamDatagramConnectionStatsP2PClientToRouter::has_seq_num_e2e() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_has_seq_num_e2e() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_has_seq_num_e2e() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_seq_num_e2e() {
  seq_num_e2e_ = 0u;
  clear_has_seq_num_e2e();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PClientToRouter::seq_num_e2e() const {
  return seq_num_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::set_seq_num_e2e(::google::protobuf::uint32 value) {
  set_has_seq_num_e2e();
  seq_num_e2e_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsP2PRouterToClient

// optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_quality_relay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_relay() {
  if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_relay();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToClient::quality_relay() const {
  return quality_relay_ != NULL ? *quality_relay_ : *default_instance_->quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_quality_relay() {
  set_has_quality_relay();
  if (quality_relay_ == NULL) quality_relay_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToClient::release_quality_relay() {
  clear_has_quality_relay();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay) {
  delete quality_relay_;
  quality_relay_ = quality_relay;
  if (quality_relay) {
    set_has_quality_relay();
  } else {
    clear_has_quality_relay();
  }
}

// optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_quality_e2e() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_e2e() {
  if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_e2e();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToClient::quality_e2e() const {
  return quality_e2e_ != NULL ? *quality_e2e_ : *default_instance_->quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_quality_e2e() {
  set_has_quality_e2e();
  if (quality_e2e_ == NULL) quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToClient::release_quality_e2e() {
  clear_has_quality_e2e();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  delete quality_e2e_;
  quality_e2e_ = quality_e2e;
  if (quality_e2e) {
    set_has_quality_e2e();
  } else {
    clear_has_quality_e2e();
  }
}

// optional uint32 seconds_until_shutdown = 3;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_seconds_until_shutdown() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_seconds_until_shutdown() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  clear_has_seconds_until_shutdown();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::seconds_until_shutdown() const {
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  set_has_seconds_until_shutdown();
  seconds_until_shutdown_ = value;
}

// optional fixed32 migrate_request_ip = 4;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_migrate_request_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_migrate_request_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_migrate_request_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_migrate_request_ip() {
  migrate_request_ip_ = 0u;
  clear_has_migrate_request_ip();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::migrate_request_ip() const {
  return migrate_request_ip_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_migrate_request_ip(::google::protobuf::uint32 value) {
  set_has_migrate_request_ip();
  migrate_request_ip_ = value;
}

// optional uint32 migrate_request_port = 5;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_migrate_request_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_migrate_request_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_migrate_request_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_migrate_request_port() {
  migrate_request_port_ = 0u;
  clear_has_migrate_request_port();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::migrate_request_port() const {
  return migrate_request_port_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_migrate_request_port(::google::protobuf::uint32 value) {
  set_has_migrate_request_port();
  migrate_request_port_ = value;
}

// optional uint32 scoring_penalty_relay_cluster = 6;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_scoring_penalty_relay_cluster() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_scoring_penalty_relay_cluster() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_scoring_penalty_relay_cluster() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_scoring_penalty_relay_cluster() {
  scoring_penalty_relay_cluster_ = 0u;
  clear_has_scoring_penalty_relay_cluster();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::scoring_penalty_relay_cluster() const {
  return scoring_penalty_relay_cluster_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_scoring_penalty_relay_cluster(::google::protobuf::uint32 value) {
  set_has_scoring_penalty_relay_cluster();
  scoring_penalty_relay_cluster_ = value;
}

// repeated fixed32 ack_relay = 7;
inline int CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_relay(int index) const {
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_relay() const {
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_ack_relay() {
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 8;
inline int CMsgSteamDatagramConnectionStatsP2PRouterToClient::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::legacy_ack_e2e(int index) const {
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PRouterToClient::legacy_ack_e2e() const {
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_legacy_ack_e2e() {
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 9;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_flags() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_flags() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::flags() const {
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint32 ack_forward_target_revision = 10;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_ack_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_ack_forward_target_revision() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_ack_forward_target_revision() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_ack_forward_target_revision() {
  ack_forward_target_revision_ = 0u;
  clear_has_ack_forward_target_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_forward_target_revision() const {
  return ack_forward_target_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_ack_forward_target_revision(::google::protobuf::uint32 value) {
  set_has_ack_forward_target_revision();
  ack_forward_target_revision_ = value;
}

// optional bytes routes = 11;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_routes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_routes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_routes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_routes() {
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    routes_->clear();
  }
  clear_has_routes();
}
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PRouterToClient::routes() const {
  return *routes_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_routes(const ::std::string& value) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(value);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_routes(const char* value) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(value);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_routes(const void* value, size_t size) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PRouterToClient::mutable_routes() {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  return routes_;
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PRouterToClient::release_routes() {
  clear_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = routes_;
    routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_allocated_routes(::std::string* routes) {
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    delete routes_;
  }
  if (routes) {
    set_has_routes();
    routes_ = routes;
  } else {
    clear_has_routes();
    routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ack_peer_routes_revision = 12;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_ack_peer_routes_revision() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_ack_peer_routes_revision() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  clear_has_ack_peer_routes_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::ack_peer_routes_revision() const {
  return ack_peer_routes_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  set_has_ack_peer_routes_revision();
  ack_peer_routes_revision_ = value;
}

// optional fixed32 connection_id = 13;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_connection_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_connection_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional uint32 seq_num_r2c = 14;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_seq_num_r2c() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_seq_num_r2c() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_seq_num_r2c() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_seq_num_r2c() {
  seq_num_r2c_ = 0u;
  clear_has_seq_num_r2c();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::seq_num_r2c() const {
  return seq_num_r2c_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_seq_num_r2c(::google::protobuf::uint32 value) {
  set_has_seq_num_r2c();
  seq_num_r2c_ = value;
}

// optional uint32 seq_num_e2e = 15;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToClient::has_seq_num_e2e() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_has_seq_num_e2e() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_has_seq_num_e2e() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_seq_num_e2e() {
  seq_num_e2e_ = 0u;
  clear_has_seq_num_e2e();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToClient::seq_num_e2e() const {
  return seq_num_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::set_seq_num_e2e(::google::protobuf::uint32 value) {
  set_has_seq_num_e2e();
  seq_num_e2e_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PBadRouteRouterToClient

// optional fixed32 connection_id = 1;
inline bool CMsgSteamDatagramP2PBadRouteRouterToClient::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_connection_id() {
  connection_id_ = 0u;
  clear_has_connection_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PBadRouteRouterToClient::connection_id() const {
  return connection_id_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_connection_id(::google::protobuf::uint32 value) {
  set_has_connection_id();
  connection_id_ = value;
}

// optional bytes failed_relay_routing_token = 2;
inline bool CMsgSteamDatagramP2PBadRouteRouterToClient::has_failed_relay_routing_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_has_failed_relay_routing_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_has_failed_relay_routing_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_failed_relay_routing_token() {
  if (failed_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_->clear();
  }
  clear_has_failed_relay_routing_token();
}
inline const ::std::string& CMsgSteamDatagramP2PBadRouteRouterToClient::failed_relay_routing_token() const {
  return *failed_relay_routing_token_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_failed_relay_routing_token(const ::std::string& value) {
  set_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_ = new ::std::string;
  }
  failed_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_failed_relay_routing_token(const char* value) {
  set_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_ = new ::std::string;
  }
  failed_relay_routing_token_->assign(value);
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_failed_relay_routing_token(const void* value, size_t size) {
  set_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_ = new ::std::string;
  }
  failed_relay_routing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramP2PBadRouteRouterToClient::mutable_failed_relay_routing_token() {
  set_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    failed_relay_routing_token_ = new ::std::string;
  }
  return failed_relay_routing_token_;
}
inline ::std::string* CMsgSteamDatagramP2PBadRouteRouterToClient::release_failed_relay_routing_token() {
  clear_has_failed_relay_routing_token();
  if (failed_relay_routing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = failed_relay_routing_token_;
    failed_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_allocated_failed_relay_routing_token(::std::string* failed_relay_routing_token) {
  if (failed_relay_routing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete failed_relay_routing_token_;
  }
  if (failed_relay_routing_token) {
    set_has_failed_relay_routing_token();
    failed_relay_routing_token_ = failed_relay_routing_token;
  } else {
    clear_has_failed_relay_routing_token();
    failed_relay_routing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ack_forward_target_revision = 3;
inline bool CMsgSteamDatagramP2PBadRouteRouterToClient::has_ack_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_has_ack_forward_target_revision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_has_ack_forward_target_revision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_ack_forward_target_revision() {
  ack_forward_target_revision_ = 0u;
  clear_has_ack_forward_target_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PBadRouteRouterToClient::ack_forward_target_revision() const {
  return ack_forward_target_revision_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_ack_forward_target_revision(::google::protobuf::uint32 value) {
  set_has_ack_forward_target_revision();
  ack_forward_target_revision_ = value;
}

// optional fixed64 kludge_pad = 99;
inline bool CMsgSteamDatagramP2PBadRouteRouterToClient::has_kludge_pad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_has_kludge_pad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_has_kludge_pad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::clear_kludge_pad() {
  kludge_pad_ = GOOGLE_ULONGLONG(0);
  clear_has_kludge_pad();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramP2PBadRouteRouterToClient::kludge_pad() const {
  return kludge_pad_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::set_kludge_pad(::google::protobuf::uint64 value) {
  set_has_kludge_pad();
  kludge_pad_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRelayToRelayPing

// optional fixed32 request_timestamp = 1;
inline bool CMsgSteamDatagramRelayToRelayPing::has_request_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_has_request_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_has_request_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_request_timestamp() {
  request_timestamp_ = 0u;
  clear_has_request_timestamp();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::request_timestamp() const {
  return request_timestamp_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_request_timestamp(::google::protobuf::uint32 value) {
  set_has_request_timestamp();
  request_timestamp_ = value;
}

// optional fixed32 request_date = 2;
inline bool CMsgSteamDatagramRelayToRelayPing::has_request_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_has_request_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_has_request_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_request_date() {
  request_date_ = 0u;
  clear_has_request_date();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::request_date() const {
  return request_date_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_request_date(::google::protobuf::uint32 value) {
  set_has_request_date();
  request_date_ = value;
}

// optional fixed32 my_pop_id = 3;
inline bool CMsgSteamDatagramRelayToRelayPing::has_my_pop_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_has_my_pop_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_has_my_pop_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_my_pop_id() {
  my_pop_id_ = 0u;
  clear_has_my_pop_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::my_pop_id() const {
  return my_pop_id_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_my_pop_id(::google::protobuf::uint32 value) {
  set_has_my_pop_id();
  my_pop_id_ = value;
}

// optional fixed32 your_pop_id = 4;
inline bool CMsgSteamDatagramRelayToRelayPing::has_your_pop_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_has_your_pop_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_has_your_pop_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_your_pop_id() {
  your_pop_id_ = 0u;
  clear_has_your_pop_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::your_pop_id() const {
  return your_pop_id_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_your_pop_id(::google::protobuf::uint32 value) {
  set_has_your_pop_id();
  your_pop_id_ = value;
}

// optional fixed32 checksum = 5;
inline bool CMsgSteamDatagramRelayToRelayPing::has_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_has_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramRelayToRelayPing::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRelayToRelayPing::checksum() const {
  return checksum_;
}
inline void CMsgSteamDatagramRelayToRelayPing::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDataCenterState_Server

// optional string address = 1;
inline bool CMsgSteamDatagramDataCenterState_Server::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramDataCenterState_Server::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramDataCenterState_Server::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramDataCenterState_Server::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& CMsgSteamDatagramDataCenterState_Server::address() const {
  return *address_;
}
inline void CMsgSteamDatagramDataCenterState_Server::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void CMsgSteamDatagramDataCenterState_Server::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void CMsgSteamDatagramDataCenterState_Server::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramDataCenterState_Server::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* CMsgSteamDatagramDataCenterState_Server::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramDataCenterState_Server::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ping_ms = 2;
inline bool CMsgSteamDatagramDataCenterState_Server::has_ping_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramDataCenterState_Server::set_has_ping_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramDataCenterState_Server::clear_has_ping_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramDataCenterState_Server::clear_ping_ms() {
  ping_ms_ = 0u;
  clear_has_ping_ms();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramDataCenterState_Server::ping_ms() const {
  return ping_ms_;
}
inline void CMsgSteamDatagramDataCenterState_Server::set_ping_ms(::google::protobuf::uint32 value) {
  set_has_ping_ms();
  ping_ms_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDataCenterState_DataCenter

// optional string code = 1;
inline bool CMsgSteamDatagramDataCenterState_DataCenter::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CMsgSteamDatagramDataCenterState_DataCenter::code() const {
  return *code_;
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramDataCenterState_DataCenter::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CMsgSteamDatagramDataCenterState_DataCenter::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
inline int CMsgSteamDatagramDataCenterState_DataCenter::server_sample_size() const {
  return server_sample_.size();
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::clear_server_sample() {
  server_sample_.Clear();
}
inline const ::CMsgSteamDatagramDataCenterState_Server& CMsgSteamDatagramDataCenterState_DataCenter::server_sample(int index) const {
  return server_sample_.Get(index);
}
inline ::CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_DataCenter::mutable_server_sample(int index) {
  return server_sample_.Mutable(index);
}
inline ::CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_DataCenter::add_server_sample() {
  return server_sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server >&
CMsgSteamDatagramDataCenterState_DataCenter::server_sample() const {
  return server_sample_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server >*
CMsgSteamDatagramDataCenterState_DataCenter::mutable_server_sample() {
  return &server_sample_;
}

// repeated .CMsgSteamDatagramDataCenterState.Server relay_sample = 3;
inline int CMsgSteamDatagramDataCenterState_DataCenter::relay_sample_size() const {
  return relay_sample_.size();
}
inline void CMsgSteamDatagramDataCenterState_DataCenter::clear_relay_sample() {
  relay_sample_.Clear();
}
inline const ::CMsgSteamDatagramDataCenterState_Server& CMsgSteamDatagramDataCenterState_DataCenter::relay_sample(int index) const {
  return relay_sample_.Get(index);
}
inline ::CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_DataCenter::mutable_relay_sample(int index) {
  return relay_sample_.Mutable(index);
}
inline ::CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_DataCenter::add_relay_sample() {
  return relay_sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server >&
CMsgSteamDatagramDataCenterState_DataCenter::relay_sample() const {
  return relay_sample_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_Server >*
CMsgSteamDatagramDataCenterState_DataCenter::mutable_relay_sample() {
  return &relay_sample_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDataCenterState

// repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
inline int CMsgSteamDatagramDataCenterState::data_centers_size() const {
  return data_centers_.size();
}
inline void CMsgSteamDatagramDataCenterState::clear_data_centers() {
  data_centers_.Clear();
}
inline const ::CMsgSteamDatagramDataCenterState_DataCenter& CMsgSteamDatagramDataCenterState::data_centers(int index) const {
  return data_centers_.Get(index);
}
inline ::CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState::mutable_data_centers(int index) {
  return data_centers_.Mutable(index);
}
inline ::CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState::add_data_centers() {
  return data_centers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_DataCenter >&
CMsgSteamDatagramDataCenterState::data_centers() const {
  return data_centers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramDataCenterState_DataCenter >*
CMsgSteamDatagramDataCenterState::mutable_data_centers() {
  return &data_centers_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRouterHealth_DataCenter

// optional fixed32 datacenter_id = 1;
inline bool CMsgSteamDatagramRouterHealth_DataCenter::has_datacenter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::set_has_datacenter_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::clear_has_datacenter_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::clear_datacenter_id() {
  datacenter_id_ = 0u;
  clear_has_datacenter_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth_DataCenter::datacenter_id() const {
  return datacenter_id_;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::set_datacenter_id(::google::protobuf::uint32 value) {
  set_has_datacenter_id();
  datacenter_id_ = value;
}

// optional uint32 state = 2;
inline bool CMsgSteamDatagramRouterHealth_DataCenter::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth_DataCenter::state() const {
  return state_;
}
inline void CMsgSteamDatagramRouterHealth_DataCenter::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRouterHealth

// optional float cpu_load = 1;
inline bool CMsgSteamDatagramRouterHealth::has_cpu_load() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::set_has_cpu_load() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramRouterHealth::clear_has_cpu_load() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramRouterHealth::clear_cpu_load() {
  cpu_load_ = 0;
  clear_has_cpu_load();
}
inline float CMsgSteamDatagramRouterHealth::cpu_load() const {
  return cpu_load_;
}
inline void CMsgSteamDatagramRouterHealth::set_cpu_load(float value) {
  set_has_cpu_load();
  cpu_load_ = value;
}

// optional uint32 active_sessions = 2;
inline bool CMsgSteamDatagramRouterHealth::has_active_sessions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::set_has_active_sessions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramRouterHealth::clear_has_active_sessions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramRouterHealth::clear_active_sessions() {
  active_sessions_ = 0u;
  clear_has_active_sessions();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth::active_sessions() const {
  return active_sessions_;
}
inline void CMsgSteamDatagramRouterHealth::set_active_sessions(::google::protobuf::uint32 value) {
  set_has_active_sessions();
  active_sessions_ = value;
}

// optional uint32 data_pkts_sec = 3;
inline bool CMsgSteamDatagramRouterHealth::has_data_pkts_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::set_has_data_pkts_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgSteamDatagramRouterHealth::clear_has_data_pkts_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgSteamDatagramRouterHealth::clear_data_pkts_sec() {
  data_pkts_sec_ = 0u;
  clear_has_data_pkts_sec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth::data_pkts_sec() const {
  return data_pkts_sec_;
}
inline void CMsgSteamDatagramRouterHealth::set_data_pkts_sec(::google::protobuf::uint32 value) {
  set_has_data_pkts_sec();
  data_pkts_sec_ = value;
}

// optional uint32 other_pkts_sec = 4;
inline bool CMsgSteamDatagramRouterHealth::has_other_pkts_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::set_has_other_pkts_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgSteamDatagramRouterHealth::clear_has_other_pkts_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgSteamDatagramRouterHealth::clear_other_pkts_sec() {
  other_pkts_sec_ = 0u;
  clear_has_other_pkts_sec();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth::other_pkts_sec() const {
  return other_pkts_sec_;
}
inline void CMsgSteamDatagramRouterHealth::set_other_pkts_sec(::google::protobuf::uint32 value) {
  set_has_other_pkts_sec();
  other_pkts_sec_ = value;
}

// optional uint32 seconds_until_shutdown = 5;
inline bool CMsgSteamDatagramRouterHealth::has_seconds_until_shutdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::set_has_seconds_until_shutdown() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramRouterHealth::clear_has_seconds_until_shutdown() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramRouterHealth::clear_seconds_until_shutdown() {
  seconds_until_shutdown_ = 0u;
  clear_has_seconds_until_shutdown();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramRouterHealth::seconds_until_shutdown() const {
  return seconds_until_shutdown_;
}
inline void CMsgSteamDatagramRouterHealth::set_seconds_until_shutdown(::google::protobuf::uint32 value) {
  set_has_seconds_until_shutdown();
  seconds_until_shutdown_ = value;
}

// optional float cpu_cost_per_user = 8;
inline bool CMsgSteamDatagramRouterHealth::has_cpu_cost_per_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::set_has_cpu_cost_per_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramRouterHealth::clear_has_cpu_cost_per_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramRouterHealth::clear_cpu_cost_per_user() {
  cpu_cost_per_user_ = 0;
  clear_has_cpu_cost_per_user();
}
inline float CMsgSteamDatagramRouterHealth::cpu_cost_per_user() const {
  return cpu_cost_per_user_;
}
inline void CMsgSteamDatagramRouterHealth::set_cpu_cost_per_user(float value) {
  set_has_cpu_cost_per_user();
  cpu_cost_per_user_ = value;
}

// optional float cpu_cost_per_packet = 9;
inline bool CMsgSteamDatagramRouterHealth::has_cpu_cost_per_packet() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::set_has_cpu_cost_per_packet() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramRouterHealth::clear_has_cpu_cost_per_packet() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramRouterHealth::clear_cpu_cost_per_packet() {
  cpu_cost_per_packet_ = 0;
  clear_has_cpu_cost_per_packet();
}
inline float CMsgSteamDatagramRouterHealth::cpu_cost_per_packet() const {
  return cpu_cost_per_packet_;
}
inline void CMsgSteamDatagramRouterHealth::set_cpu_cost_per_packet(float value) {
  set_has_cpu_cost_per_packet();
  cpu_cost_per_packet_ = value;
}

// repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
inline int CMsgSteamDatagramRouterHealth::data_centers_size() const {
  return data_centers_.size();
}
inline void CMsgSteamDatagramRouterHealth::clear_data_centers() {
  data_centers_.Clear();
}
inline const ::CMsgSteamDatagramRouterHealth_DataCenter& CMsgSteamDatagramRouterHealth::data_centers(int index) const {
  return data_centers_.Get(index);
}
inline ::CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth::mutable_data_centers(int index) {
  return data_centers_.Mutable(index);
}
inline ::CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth::add_data_centers() {
  return data_centers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterHealth_DataCenter >&
CMsgSteamDatagramRouterHealth::data_centers() const {
  return data_centers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMsgSteamDatagramRouterHealth_DataCenter >*
CMsgSteamDatagramRouterHealth::mutable_data_centers() {
  return &data_centers_;
}

// optional fixed64 magic = 7;
inline bool CMsgSteamDatagramRouterHealth::has_magic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramRouterHealth::set_has_magic() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramRouterHealth::clear_has_magic() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramRouterHealth::clear_magic() {
  magic_ = GOOGLE_ULONGLONG(0);
  clear_has_magic();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramRouterHealth::magic() const {
  return magic_;
}
inline void CMsgSteamDatagramRouterHealth::set_magic(::google::protobuf::uint64 value) {
  set_has_magic();
  magic_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionStatsP2PRouterToRouter

// optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_quality_relay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_quality_relay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_quality_relay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_quality_relay() {
  if (quality_relay_ != NULL) quality_relay_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_relay();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToRouter::quality_relay() const {
  return quality_relay_ != NULL ? *quality_relay_ : *default_instance_->quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_quality_relay() {
  set_has_quality_relay();
  if (quality_relay_ == NULL) quality_relay_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_relay_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::release_quality_relay() {
  clear_has_quality_relay();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_relay_;
  quality_relay_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_allocated_quality_relay(::CMsgSteamDatagramConnectionQuality* quality_relay) {
  delete quality_relay_;
  quality_relay_ = quality_relay;
  if (quality_relay) {
    set_has_quality_relay();
  } else {
    clear_has_quality_relay();
  }
}

// optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_quality_e2e() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_quality_e2e() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_quality_e2e() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_quality_e2e() {
  if (quality_e2e_ != NULL) quality_e2e_->::CMsgSteamDatagramConnectionQuality::Clear();
  clear_has_quality_e2e();
}
inline const ::CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionStatsP2PRouterToRouter::quality_e2e() const {
  return quality_e2e_ != NULL ? *quality_e2e_ : *default_instance_->quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_quality_e2e() {
  set_has_quality_e2e();
  if (quality_e2e_ == NULL) quality_e2e_ = new ::CMsgSteamDatagramConnectionQuality;
  return quality_e2e_;
}
inline ::CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::release_quality_e2e() {
  clear_has_quality_e2e();
  ::CMsgSteamDatagramConnectionQuality* temp = quality_e2e_;
  quality_e2e_ = NULL;
  return temp;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_allocated_quality_e2e(::CMsgSteamDatagramConnectionQuality* quality_e2e) {
  delete quality_e2e_;
  quality_e2e_ = quality_e2e;
  if (quality_e2e) {
    set_has_quality_e2e();
  } else {
    clear_has_quality_e2e();
  }
}

// repeated fixed32 ack_relay = 3;
inline int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_relay_size() const {
  return ack_relay_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_ack_relay() {
  ack_relay_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_relay(int index) const {
  return ack_relay_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_ack_relay(int index, ::google::protobuf::uint32 value) {
  ack_relay_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::add_ack_relay(::google::protobuf::uint32 value) {
  ack_relay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_relay() const {
  return ack_relay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_ack_relay() {
  return &ack_relay_;
}

// repeated fixed32 legacy_ack_e2e = 4;
inline int CMsgSteamDatagramConnectionStatsP2PRouterToRouter::legacy_ack_e2e_size() const {
  return legacy_ack_e2e_.size();
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_legacy_ack_e2e() {
  legacy_ack_e2e_.Clear();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::legacy_ack_e2e(int index) const {
  return legacy_ack_e2e_.Get(index);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_legacy_ack_e2e(int index, ::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Set(index, value);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::add_legacy_ack_e2e(::google::protobuf::uint32 value) {
  legacy_ack_e2e_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::legacy_ack_e2e() const {
  return legacy_ack_e2e_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_legacy_ack_e2e() {
  return &legacy_ack_e2e_;
}

// optional uint32 flags = 5;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::flags() const {
  return flags_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint32 ack_forward_target_revision = 6;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_ack_forward_target_revision() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_ack_forward_target_revision() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_ack_forward_target_revision() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_ack_forward_target_revision() {
  ack_forward_target_revision_ = 0u;
  clear_has_ack_forward_target_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_forward_target_revision() const {
  return ack_forward_target_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_ack_forward_target_revision(::google::protobuf::uint32 value) {
  set_has_ack_forward_target_revision();
  ack_forward_target_revision_ = value;
}

// optional bytes routes = 7;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_routes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_routes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_routes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_routes() {
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    routes_->clear();
  }
  clear_has_routes();
}
inline const ::std::string& CMsgSteamDatagramConnectionStatsP2PRouterToRouter::routes() const {
  return *routes_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_routes(const ::std::string& value) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(value);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_routes(const char* value) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(value);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_routes(const void* value, size_t size) {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  routes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::mutable_routes() {
  set_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    routes_ = new ::std::string;
  }
  return routes_;
}
inline ::std::string* CMsgSteamDatagramConnectionStatsP2PRouterToRouter::release_routes() {
  clear_has_routes();
  if (routes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = routes_;
    routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_allocated_routes(::std::string* routes) {
  if (routes_ != &::google::protobuf::internal::kEmptyString) {
    delete routes_;
  }
  if (routes) {
    set_has_routes();
    routes_ = routes;
  } else {
    clear_has_routes();
    routes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ack_peer_routes_revision = 8;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_ack_peer_routes_revision() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_ack_peer_routes_revision() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_ack_peer_routes_revision() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_ack_peer_routes_revision() {
  ack_peer_routes_revision_ = 0u;
  clear_has_ack_peer_routes_revision();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::ack_peer_routes_revision() const {
  return ack_peer_routes_revision_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_ack_peer_routes_revision(::google::protobuf::uint32 value) {
  set_has_ack_peer_routes_revision();
  ack_peer_routes_revision_ = value;
}

// optional uint32 seq_num_r2r = 26;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_seq_num_r2r() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_seq_num_r2r() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_seq_num_r2r() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_seq_num_r2r() {
  seq_num_r2r_ = 0u;
  clear_has_seq_num_r2r();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::seq_num_r2r() const {
  return seq_num_r2r_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_seq_num_r2r(::google::protobuf::uint32 value) {
  set_has_seq_num_r2r();
  seq_num_r2r_ = value;
}

// optional uint32 seq_num_e2e = 27;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_seq_num_e2e() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_seq_num_e2e() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_seq_num_e2e() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_seq_num_e2e() {
  seq_num_e2e_ = 0u;
  clear_has_seq_num_e2e();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::seq_num_e2e() const {
  return seq_num_e2e_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_seq_num_e2e(::google::protobuf::uint32 value) {
  set_has_seq_num_e2e();
  seq_num_e2e_ = value;
}

// optional fixed32 from_relay_session_id = 22;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_from_relay_session_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_from_relay_session_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  clear_has_from_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::from_relay_session_id() const {
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_from_relay_session_id(::google::protobuf::uint32 value) {
  set_has_from_relay_session_id();
  from_relay_session_id_ = value;
}

// optional fixed32 to_relay_session_id = 25;
inline bool CMsgSteamDatagramConnectionStatsP2PRouterToRouter::has_to_relay_session_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_has_to_relay_session_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_has_to_relay_session_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::clear_to_relay_session_id() {
  to_relay_session_id_ = 0u;
  clear_has_to_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramConnectionStatsP2PRouterToRouter::to_relay_session_id() const {
  return to_relay_session_id_;
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToRouter::set_to_relay_session_id(::google::protobuf::uint32 value) {
  set_has_to_relay_session_id();
  to_relay_session_id_ = value;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramP2PBadRouteRouterToRouter

// optional fixed32 from_relay_session_id = 1;
inline bool CMsgSteamDatagramP2PBadRouteRouterToRouter::has_from_relay_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::set_has_from_relay_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::clear_has_from_relay_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::clear_from_relay_session_id() {
  from_relay_session_id_ = 0u;
  clear_has_from_relay_session_id();
}
inline ::google::protobuf::uint32 CMsgSteamDatagramP2PBadRouteRouterToRouter::from_relay_session_id() const {
  return from_relay_session_id_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::set_from_relay_session_id(::google::protobuf::uint32 value) {
  set_has_from_relay_session_id();
  from_relay_session_id_ = value;
}

// optional fixed64 kludge_pad = 99;
inline bool CMsgSteamDatagramP2PBadRouteRouterToRouter::has_kludge_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::set_has_kludge_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::clear_has_kludge_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::clear_kludge_pad() {
  kludge_pad_ = GOOGLE_ULONGLONG(0);
  clear_has_kludge_pad();
}
inline ::google::protobuf::uint64 CMsgSteamDatagramP2PBadRouteRouterToRouter::kludge_pad() const {
  return kludge_pad_;
}
inline void CMsgSteamDatagramP2PBadRouteRouterToRouter::set_kludge_pad(::google::protobuf::uint64 value) {
  set_has_kludge_pad();
  kludge_pad_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramConnectionClosed_ERelayMode>() {
  return ::CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramConnectionStatsClientToRouter_Flags>() {
  return ::CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramConnectionStatsRouterToClient_Flags>() {
  return ::CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramConnectionStatsRouterToServer_Flags>() {
  return ::CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramConnectionStatsServerToRouter_Flags>() {
  return ::CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags>() {
  return ::CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags>() {
  return ::CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags>() {
  return ::CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steamdatagram_5fmessages_5fsdr_2eproto__INCLUDED
